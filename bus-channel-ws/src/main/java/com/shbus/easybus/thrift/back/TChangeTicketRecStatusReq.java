/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.back;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 修改取票状态请求VO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-03")
public class TChangeTicketRecStatusReq implements org.apache.thrift.TBase<TChangeTicketRecStatusReq, TChangeTicketRecStatusReq._Fields>, java.io.Serializable, Cloneable, Comparable<TChangeTicketRecStatusReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TChangeTicketRecStatusReq");

  private static final org.apache.thrift.protocol.TField EX_BUS_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exBusOrderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_REC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecStatus", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_REC_RANDOM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecRandomCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REC_TICKET_CHANEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recTicketChanelName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REC_TICKET_CHANEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recTicketChanelId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TChangeTicketRecStatusReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TChangeTicketRecStatusReqTupleSchemeFactory());
  }

  /**
   * 车票id
   */
  public long exBusOrderId; // required
  /**
   * 修改后的取票状态
   */
  public String ticketRecStatus; // required
  /**
   * 取票码
   */
  public String ticketRecRandomCode; // required
  /**
   * 取票渠道
   */
  public String recTicketChanelName; // required
  /**
   * 取票渠道id
   */
  public long recTicketChanelId; // optional
  /**
   * 取票用户id
   */
  public long userId; // optional
  /**
   * 取票用户名
   */
  public String userName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 车票id
     */
    EX_BUS_ORDER_ID((short)1, "exBusOrderId"),
    /**
     * 修改后的取票状态
     */
    TICKET_REC_STATUS((short)2, "ticketRecStatus"),
    /**
     * 取票码
     */
    TICKET_REC_RANDOM_CODE((short)3, "ticketRecRandomCode"),
    /**
     * 取票渠道
     */
    REC_TICKET_CHANEL_NAME((short)4, "recTicketChanelName"),
    /**
     * 取票渠道id
     */
    REC_TICKET_CHANEL_ID((short)5, "recTicketChanelId"),
    /**
     * 取票用户id
     */
    USER_ID((short)6, "userId"),
    /**
     * 取票用户名
     */
    USER_NAME((short)7, "userName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EX_BUS_ORDER_ID
          return EX_BUS_ORDER_ID;
        case 2: // TICKET_REC_STATUS
          return TICKET_REC_STATUS;
        case 3: // TICKET_REC_RANDOM_CODE
          return TICKET_REC_RANDOM_CODE;
        case 4: // REC_TICKET_CHANEL_NAME
          return REC_TICKET_CHANEL_NAME;
        case 5: // REC_TICKET_CHANEL_ID
          return REC_TICKET_CHANEL_ID;
        case 6: // USER_ID
          return USER_ID;
        case 7: // USER_NAME
          return USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXBUSORDERID_ISSET_ID = 0;
  private static final int __RECTICKETCHANELID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REC_TICKET_CHANEL_ID,_Fields.USER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EX_BUS_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("exBusOrderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_REC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ticketRecStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_RANDOM_CODE, new org.apache.thrift.meta_data.FieldMetaData("ticketRecRandomCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_TICKET_CHANEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("recTicketChanelName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_TICKET_CHANEL_ID, new org.apache.thrift.meta_data.FieldMetaData("recTicketChanelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TChangeTicketRecStatusReq.class, metaDataMap);
  }

  public TChangeTicketRecStatusReq() {
  }

  public TChangeTicketRecStatusReq(
    long exBusOrderId,
    String ticketRecStatus,
    String ticketRecRandomCode,
    String recTicketChanelName,
    String userName)
  {
    this();
    this.exBusOrderId = exBusOrderId;
    setExBusOrderIdIsSet(true);
    this.ticketRecStatus = ticketRecStatus;
    this.ticketRecRandomCode = ticketRecRandomCode;
    this.recTicketChanelName = recTicketChanelName;
    this.userName = userName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TChangeTicketRecStatusReq(TChangeTicketRecStatusReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.exBusOrderId = other.exBusOrderId;
    if (other.isSetTicketRecStatus()) {
      this.ticketRecStatus = other.ticketRecStatus;
    }
    if (other.isSetTicketRecRandomCode()) {
      this.ticketRecRandomCode = other.ticketRecRandomCode;
    }
    if (other.isSetRecTicketChanelName()) {
      this.recTicketChanelName = other.recTicketChanelName;
    }
    this.recTicketChanelId = other.recTicketChanelId;
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
  }

  public TChangeTicketRecStatusReq deepCopy() {
    return new TChangeTicketRecStatusReq(this);
  }

  @Override
  public void clear() {
    setExBusOrderIdIsSet(false);
    this.exBusOrderId = 0;
    this.ticketRecStatus = null;
    this.ticketRecRandomCode = null;
    this.recTicketChanelName = null;
    setRecTicketChanelIdIsSet(false);
    this.recTicketChanelId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
  }

  /**
   * 车票id
   */
  public long getExBusOrderId() {
    return this.exBusOrderId;
  }

  /**
   * 车票id
   */
  public TChangeTicketRecStatusReq setExBusOrderId(long exBusOrderId) {
    this.exBusOrderId = exBusOrderId;
    setExBusOrderIdIsSet(true);
    return this;
  }

  public void unsetExBusOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXBUSORDERID_ISSET_ID);
  }

  /** Returns true if field exBusOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExBusOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXBUSORDERID_ISSET_ID);
  }

  public void setExBusOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXBUSORDERID_ISSET_ID, value);
  }

  /**
   * 修改后的取票状态
   */
  public String getTicketRecStatus() {
    return this.ticketRecStatus;
  }

  /**
   * 修改后的取票状态
   */
  public TChangeTicketRecStatusReq setTicketRecStatus(String ticketRecStatus) {
    this.ticketRecStatus = ticketRecStatus;
    return this;
  }

  public void unsetTicketRecStatus() {
    this.ticketRecStatus = null;
  }

  /** Returns true if field ticketRecStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecStatus() {
    return this.ticketRecStatus != null;
  }

  public void setTicketRecStatusIsSet(boolean value) {
    if (!value) {
      this.ticketRecStatus = null;
    }
  }

  /**
   * 取票码
   */
  public String getTicketRecRandomCode() {
    return this.ticketRecRandomCode;
  }

  /**
   * 取票码
   */
  public TChangeTicketRecStatusReq setTicketRecRandomCode(String ticketRecRandomCode) {
    this.ticketRecRandomCode = ticketRecRandomCode;
    return this;
  }

  public void unsetTicketRecRandomCode() {
    this.ticketRecRandomCode = null;
  }

  /** Returns true if field ticketRecRandomCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecRandomCode() {
    return this.ticketRecRandomCode != null;
  }

  public void setTicketRecRandomCodeIsSet(boolean value) {
    if (!value) {
      this.ticketRecRandomCode = null;
    }
  }

  /**
   * 取票渠道
   */
  public String getRecTicketChanelName() {
    return this.recTicketChanelName;
  }

  /**
   * 取票渠道
   */
  public TChangeTicketRecStatusReq setRecTicketChanelName(String recTicketChanelName) {
    this.recTicketChanelName = recTicketChanelName;
    return this;
  }

  public void unsetRecTicketChanelName() {
    this.recTicketChanelName = null;
  }

  /** Returns true if field recTicketChanelName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecTicketChanelName() {
    return this.recTicketChanelName != null;
  }

  public void setRecTicketChanelNameIsSet(boolean value) {
    if (!value) {
      this.recTicketChanelName = null;
    }
  }

  /**
   * 取票渠道id
   */
  public long getRecTicketChanelId() {
    return this.recTicketChanelId;
  }

  /**
   * 取票渠道id
   */
  public TChangeTicketRecStatusReq setRecTicketChanelId(long recTicketChanelId) {
    this.recTicketChanelId = recTicketChanelId;
    setRecTicketChanelIdIsSet(true);
    return this;
  }

  public void unsetRecTicketChanelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECTICKETCHANELID_ISSET_ID);
  }

  /** Returns true if field recTicketChanelId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecTicketChanelId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECTICKETCHANELID_ISSET_ID);
  }

  public void setRecTicketChanelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECTICKETCHANELID_ISSET_ID, value);
  }

  /**
   * 取票用户id
   */
  public long getUserId() {
    return this.userId;
  }

  /**
   * 取票用户id
   */
  public TChangeTicketRecStatusReq setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  /**
   * 取票用户名
   */
  public String getUserName() {
    return this.userName;
  }

  /**
   * 取票用户名
   */
  public TChangeTicketRecStatusReq setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EX_BUS_ORDER_ID:
      if (value == null) {
        unsetExBusOrderId();
      } else {
        setExBusOrderId((Long)value);
      }
      break;

    case TICKET_REC_STATUS:
      if (value == null) {
        unsetTicketRecStatus();
      } else {
        setTicketRecStatus((String)value);
      }
      break;

    case TICKET_REC_RANDOM_CODE:
      if (value == null) {
        unsetTicketRecRandomCode();
      } else {
        setTicketRecRandomCode((String)value);
      }
      break;

    case REC_TICKET_CHANEL_NAME:
      if (value == null) {
        unsetRecTicketChanelName();
      } else {
        setRecTicketChanelName((String)value);
      }
      break;

    case REC_TICKET_CHANEL_ID:
      if (value == null) {
        unsetRecTicketChanelId();
      } else {
        setRecTicketChanelId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EX_BUS_ORDER_ID:
      return getExBusOrderId();

    case TICKET_REC_STATUS:
      return getTicketRecStatus();

    case TICKET_REC_RANDOM_CODE:
      return getTicketRecRandomCode();

    case REC_TICKET_CHANEL_NAME:
      return getRecTicketChanelName();

    case REC_TICKET_CHANEL_ID:
      return getRecTicketChanelId();

    case USER_ID:
      return getUserId();

    case USER_NAME:
      return getUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EX_BUS_ORDER_ID:
      return isSetExBusOrderId();
    case TICKET_REC_STATUS:
      return isSetTicketRecStatus();
    case TICKET_REC_RANDOM_CODE:
      return isSetTicketRecRandomCode();
    case REC_TICKET_CHANEL_NAME:
      return isSetRecTicketChanelName();
    case REC_TICKET_CHANEL_ID:
      return isSetRecTicketChanelId();
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TChangeTicketRecStatusReq)
      return this.equals((TChangeTicketRecStatusReq)that);
    return false;
  }

  public boolean equals(TChangeTicketRecStatusReq that) {
    if (that == null)
      return false;

    boolean this_present_exBusOrderId = true;
    boolean that_present_exBusOrderId = true;
    if (this_present_exBusOrderId || that_present_exBusOrderId) {
      if (!(this_present_exBusOrderId && that_present_exBusOrderId))
        return false;
      if (this.exBusOrderId != that.exBusOrderId)
        return false;
    }

    boolean this_present_ticketRecStatus = true && this.isSetTicketRecStatus();
    boolean that_present_ticketRecStatus = true && that.isSetTicketRecStatus();
    if (this_present_ticketRecStatus || that_present_ticketRecStatus) {
      if (!(this_present_ticketRecStatus && that_present_ticketRecStatus))
        return false;
      if (!this.ticketRecStatus.equals(that.ticketRecStatus))
        return false;
    }

    boolean this_present_ticketRecRandomCode = true && this.isSetTicketRecRandomCode();
    boolean that_present_ticketRecRandomCode = true && that.isSetTicketRecRandomCode();
    if (this_present_ticketRecRandomCode || that_present_ticketRecRandomCode) {
      if (!(this_present_ticketRecRandomCode && that_present_ticketRecRandomCode))
        return false;
      if (!this.ticketRecRandomCode.equals(that.ticketRecRandomCode))
        return false;
    }

    boolean this_present_recTicketChanelName = true && this.isSetRecTicketChanelName();
    boolean that_present_recTicketChanelName = true && that.isSetRecTicketChanelName();
    if (this_present_recTicketChanelName || that_present_recTicketChanelName) {
      if (!(this_present_recTicketChanelName && that_present_recTicketChanelName))
        return false;
      if (!this.recTicketChanelName.equals(that.recTicketChanelName))
        return false;
    }

    boolean this_present_recTicketChanelId = true && this.isSetRecTicketChanelId();
    boolean that_present_recTicketChanelId = true && that.isSetRecTicketChanelId();
    if (this_present_recTicketChanelId || that_present_recTicketChanelId) {
      if (!(this_present_recTicketChanelId && that_present_recTicketChanelId))
        return false;
      if (this.recTicketChanelId != that.recTicketChanelId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_exBusOrderId = true;
    list.add(present_exBusOrderId);
    if (present_exBusOrderId)
      list.add(exBusOrderId);

    boolean present_ticketRecStatus = true && (isSetTicketRecStatus());
    list.add(present_ticketRecStatus);
    if (present_ticketRecStatus)
      list.add(ticketRecStatus);

    boolean present_ticketRecRandomCode = true && (isSetTicketRecRandomCode());
    list.add(present_ticketRecRandomCode);
    if (present_ticketRecRandomCode)
      list.add(ticketRecRandomCode);

    boolean present_recTicketChanelName = true && (isSetRecTicketChanelName());
    list.add(present_recTicketChanelName);
    if (present_recTicketChanelName)
      list.add(recTicketChanelName);

    boolean present_recTicketChanelId = true && (isSetRecTicketChanelId());
    list.add(present_recTicketChanelId);
    if (present_recTicketChanelId)
      list.add(recTicketChanelId);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    return list.hashCode();
  }

  @Override
  public int compareTo(TChangeTicketRecStatusReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExBusOrderId()).compareTo(other.isSetExBusOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExBusOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exBusOrderId, other.exBusOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecStatus()).compareTo(other.isSetTicketRecStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecStatus, other.ticketRecStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecRandomCode()).compareTo(other.isSetTicketRecRandomCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecRandomCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecRandomCode, other.ticketRecRandomCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecTicketChanelName()).compareTo(other.isSetRecTicketChanelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecTicketChanelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recTicketChanelName, other.recTicketChanelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecTicketChanelId()).compareTo(other.isSetRecTicketChanelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecTicketChanelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recTicketChanelId, other.recTicketChanelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TChangeTicketRecStatusReq(");
    boolean first = true;

    sb.append("exBusOrderId:");
    sb.append(this.exBusOrderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketRecStatus:");
    if (this.ticketRecStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketRecStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketRecRandomCode:");
    if (this.ticketRecRandomCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketRecRandomCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recTicketChanelName:");
    if (this.recTicketChanelName == null) {
      sb.append("null");
    } else {
      sb.append(this.recTicketChanelName);
    }
    first = false;
    if (isSetRecTicketChanelId()) {
      if (!first) sb.append(", ");
      sb.append("recTicketChanelId:");
      sb.append(this.recTicketChanelId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'exBusOrderId' because it's a primitive and you chose the non-beans generator.
    if (ticketRecStatus == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketRecStatus' was not present! Struct: " + toString());
    }
    if (ticketRecRandomCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketRecRandomCode' was not present! Struct: " + toString());
    }
    if (recTicketChanelName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recTicketChanelName' was not present! Struct: " + toString());
    }
    if (userName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TChangeTicketRecStatusReqStandardSchemeFactory implements SchemeFactory {
    public TChangeTicketRecStatusReqStandardScheme getScheme() {
      return new TChangeTicketRecStatusReqStandardScheme();
    }
  }

  private static class TChangeTicketRecStatusReqStandardScheme extends StandardScheme<TChangeTicketRecStatusReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TChangeTicketRecStatusReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EX_BUS_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exBusOrderId = iprot.readI64();
              struct.setExBusOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_REC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecStatus = iprot.readString();
              struct.setTicketRecStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_REC_RANDOM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecRandomCode = iprot.readString();
              struct.setTicketRecRandomCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REC_TICKET_CHANEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recTicketChanelName = iprot.readString();
              struct.setRecTicketChanelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REC_TICKET_CHANEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recTicketChanelId = iprot.readI64();
              struct.setRecTicketChanelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetExBusOrderId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'exBusOrderId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TChangeTicketRecStatusReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EX_BUS_ORDER_ID_FIELD_DESC);
      oprot.writeI64(struct.exBusOrderId);
      oprot.writeFieldEnd();
      if (struct.ticketRecStatus != null) {
        oprot.writeFieldBegin(TICKET_REC_STATUS_FIELD_DESC);
        oprot.writeString(struct.ticketRecStatus);
        oprot.writeFieldEnd();
      }
      if (struct.ticketRecRandomCode != null) {
        oprot.writeFieldBegin(TICKET_REC_RANDOM_CODE_FIELD_DESC);
        oprot.writeString(struct.ticketRecRandomCode);
        oprot.writeFieldEnd();
      }
      if (struct.recTicketChanelName != null) {
        oprot.writeFieldBegin(REC_TICKET_CHANEL_NAME_FIELD_DESC);
        oprot.writeString(struct.recTicketChanelName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecTicketChanelId()) {
        oprot.writeFieldBegin(REC_TICKET_CHANEL_ID_FIELD_DESC);
        oprot.writeI64(struct.recTicketChanelId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TChangeTicketRecStatusReqTupleSchemeFactory implements SchemeFactory {
    public TChangeTicketRecStatusReqTupleScheme getScheme() {
      return new TChangeTicketRecStatusReqTupleScheme();
    }
  }

  private static class TChangeTicketRecStatusReqTupleScheme extends TupleScheme<TChangeTicketRecStatusReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TChangeTicketRecStatusReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.exBusOrderId);
      oprot.writeString(struct.ticketRecStatus);
      oprot.writeString(struct.ticketRecRandomCode);
      oprot.writeString(struct.recTicketChanelName);
      oprot.writeString(struct.userName);
      BitSet optionals = new BitSet();
      if (struct.isSetRecTicketChanelId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRecTicketChanelId()) {
        oprot.writeI64(struct.recTicketChanelId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TChangeTicketRecStatusReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.exBusOrderId = iprot.readI64();
      struct.setExBusOrderIdIsSet(true);
      struct.ticketRecStatus = iprot.readString();
      struct.setTicketRecStatusIsSet(true);
      struct.ticketRecRandomCode = iprot.readString();
      struct.setTicketRecRandomCodeIsSet(true);
      struct.recTicketChanelName = iprot.readString();
      struct.setRecTicketChanelNameIsSet(true);
      struct.userName = iprot.readString();
      struct.setUserNameIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.recTicketChanelId = iprot.readI64();
        struct.setRecTicketChanelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

