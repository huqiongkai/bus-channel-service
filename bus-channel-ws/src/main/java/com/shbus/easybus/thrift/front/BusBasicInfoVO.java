/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 车次基本信息VO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-31")
public class BusBasicInfoVO implements org.apache.thrift.TBase<BusBasicInfoVO, BusBasicInfoVO._Fields>, java.io.Serializable, Cloneable, Comparable<BusBasicInfoVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusBasicInfoVO");

  private static final org.apache.thrift.protocol.TField TO_PROVINCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toProvinceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TO_PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toProvinceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PTHALL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pthallType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OVERTIME_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("overtimeStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUS_LICENSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busLicenseId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BUS_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busTypeId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BUS_GRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busGradeId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CARRIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("carrierId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CARRIER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("carrierName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("capacity", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STOP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TICKET_GATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketGateId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TICKET_GATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketGateName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DEPART_FIELD_DESC = new org.apache.thrift.protocol.TField("depart", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField ARRIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrive", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField PLEAVE_DTYYYY_MMDD_HHMMSS_FIELD_DESC = new org.apache.thrift.protocol.TField("pleaveDtyyyyMMddHHmmss", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField RTORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtorderCode", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitId", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TO_STATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toStationId", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TO_STATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toStationName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField RTORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rtorderId", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SYS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sysCode", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusBasicInfoVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusBasicInfoVOTupleSchemeFactory());
  }

  /**
   * 到达省份ID
   */
  public String toProvinceId; // required
  /**
   * 到达省份名称
   */
  public String toProvinceName; // required
  /**
   * 始发站 车站类型
   */
  public String pthallType; // required
  /**
   * 是否复制加班  加班状态
   */
  public String overtimeStatus; // required
  /**
   * 承运公司许可证
   */
  public String busLicenseId; // required
  /**
   * 车辆类型
   */
  public String busTypeId; // required
  /**
   * 车辆等级
   */
  public String busGradeId; // required
  /**
   * 车公司代码
   */
  public String carrierId; // required
  /**
   * 车公司名称
   */
  public String carrierName; // required
  /**
   * 车辆可载客人数
   */
  public String capacity; // required
  /**
   * 班次状态
   */
  public String stopType; // required
  /**
   * 检票口代码
   */
  public String ticketGateId; // required
  /**
   * 检票口名称
   */
  public String ticketGateName; // required
  /**
   * 备注
   */
  public String remark; // required
  /**
   * 出发地行政区域信息
   */
  public SysChinaRegion depart; // required
  /**
   * 目的地行政区域信息
   */
  public SysChinaRegion arrive; // required
  /**
   * 出发时间
   */
  public String pleaveDtyyyyMMddHHmmss; // required
  /**
   * 车次编号
   */
  public String rtorderCode; // required
  /**
   * 出发车站编号
   */
  public String unitId; // required
  /**
   * 到达车站编号
   */
  public String toStationId; // required
  /**
   * 到达车站名称
   */
  public String toStationName; // required
  /**
   * 车次id
   */
  public String rtorderId; // required
  /**
   * 出票系统代码
   */
  public String sysCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 到达省份ID
     */
    TO_PROVINCE_ID((short)1, "toProvinceId"),
    /**
     * 到达省份名称
     */
    TO_PROVINCE_NAME((short)2, "toProvinceName"),
    /**
     * 始发站 车站类型
     */
    PTHALL_TYPE((short)3, "pthallType"),
    /**
     * 是否复制加班  加班状态
     */
    OVERTIME_STATUS((short)4, "overtimeStatus"),
    /**
     * 承运公司许可证
     */
    BUS_LICENSE_ID((short)5, "busLicenseId"),
    /**
     * 车辆类型
     */
    BUS_TYPE_ID((short)6, "busTypeId"),
    /**
     * 车辆等级
     */
    BUS_GRADE_ID((short)7, "busGradeId"),
    /**
     * 车公司代码
     */
    CARRIER_ID((short)8, "carrierId"),
    /**
     * 车公司名称
     */
    CARRIER_NAME((short)9, "carrierName"),
    /**
     * 车辆可载客人数
     */
    CAPACITY((short)10, "capacity"),
    /**
     * 班次状态
     */
    STOP_TYPE((short)11, "stopType"),
    /**
     * 检票口代码
     */
    TICKET_GATE_ID((short)12, "ticketGateId"),
    /**
     * 检票口名称
     */
    TICKET_GATE_NAME((short)13, "ticketGateName"),
    /**
     * 备注
     */
    REMARK((short)14, "remark"),
    /**
     * 出发地行政区域信息
     */
    DEPART((short)15, "depart"),
    /**
     * 目的地行政区域信息
     */
    ARRIVE((short)16, "arrive"),
    /**
     * 出发时间
     */
    PLEAVE_DTYYYY_MMDD_HHMMSS((short)17, "pleaveDtyyyyMMddHHmmss"),
    /**
     * 车次编号
     */
    RTORDER_CODE((short)18, "rtorderCode"),
    /**
     * 出发车站编号
     */
    UNIT_ID((short)19, "unitId"),
    /**
     * 到达车站编号
     */
    TO_STATION_ID((short)20, "toStationId"),
    /**
     * 到达车站名称
     */
    TO_STATION_NAME((short)21, "toStationName"),
    /**
     * 车次id
     */
    RTORDER_ID((short)22, "rtorderId"),
    /**
     * 出票系统代码
     */
    SYS_CODE((short)23, "sysCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TO_PROVINCE_ID
          return TO_PROVINCE_ID;
        case 2: // TO_PROVINCE_NAME
          return TO_PROVINCE_NAME;
        case 3: // PTHALL_TYPE
          return PTHALL_TYPE;
        case 4: // OVERTIME_STATUS
          return OVERTIME_STATUS;
        case 5: // BUS_LICENSE_ID
          return BUS_LICENSE_ID;
        case 6: // BUS_TYPE_ID
          return BUS_TYPE_ID;
        case 7: // BUS_GRADE_ID
          return BUS_GRADE_ID;
        case 8: // CARRIER_ID
          return CARRIER_ID;
        case 9: // CARRIER_NAME
          return CARRIER_NAME;
        case 10: // CAPACITY
          return CAPACITY;
        case 11: // STOP_TYPE
          return STOP_TYPE;
        case 12: // TICKET_GATE_ID
          return TICKET_GATE_ID;
        case 13: // TICKET_GATE_NAME
          return TICKET_GATE_NAME;
        case 14: // REMARK
          return REMARK;
        case 15: // DEPART
          return DEPART;
        case 16: // ARRIVE
          return ARRIVE;
        case 17: // PLEAVE_DTYYYY_MMDD_HHMMSS
          return PLEAVE_DTYYYY_MMDD_HHMMSS;
        case 18: // RTORDER_CODE
          return RTORDER_CODE;
        case 19: // UNIT_ID
          return UNIT_ID;
        case 20: // TO_STATION_ID
          return TO_STATION_ID;
        case 21: // TO_STATION_NAME
          return TO_STATION_NAME;
        case 22: // RTORDER_ID
          return RTORDER_ID;
        case 23: // SYS_CODE
          return SYS_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TO_PROVINCE_ID, new org.apache.thrift.meta_data.FieldMetaData("toProvinceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("toProvinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PTHALL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pthallType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERTIME_STATUS, new org.apache.thrift.meta_data.FieldMetaData("overtimeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_LICENSE_ID, new org.apache.thrift.meta_data.FieldMetaData("busLicenseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("busTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_GRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("busGradeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARRIER_ID, new org.apache.thrift.meta_data.FieldMetaData("carrierId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARRIER_NAME, new org.apache.thrift.meta_data.FieldMetaData("carrierName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("capacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stopType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_GATE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketGateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_GATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketGateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPART, new org.apache.thrift.meta_data.FieldMetaData("depart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysChinaRegion.class)));
    tmpMap.put(_Fields.ARRIVE, new org.apache.thrift.meta_data.FieldMetaData("arrive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysChinaRegion.class)));
    tmpMap.put(_Fields.PLEAVE_DTYYYY_MMDD_HHMMSS, new org.apache.thrift.meta_data.FieldMetaData("pleaveDtyyyyMMddHHmmss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RTORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("rtorderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_STATION_ID, new org.apache.thrift.meta_data.FieldMetaData("toStationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_STATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("toStationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RTORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("rtorderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYS_CODE, new org.apache.thrift.meta_data.FieldMetaData("sysCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusBasicInfoVO.class, metaDataMap);
  }

  public BusBasicInfoVO() {
  }

  public BusBasicInfoVO(
    String toProvinceId,
    String toProvinceName,
    String pthallType,
    String overtimeStatus,
    String busLicenseId,
    String busTypeId,
    String busGradeId,
    String carrierId,
    String carrierName,
    String capacity,
    String stopType,
    String ticketGateId,
    String ticketGateName,
    String remark,
    SysChinaRegion depart,
    SysChinaRegion arrive,
    String pleaveDtyyyyMMddHHmmss,
    String rtorderCode,
    String unitId,
    String toStationId,
    String toStationName,
    String rtorderId,
    String sysCode)
  {
    this();
    this.toProvinceId = toProvinceId;
    this.toProvinceName = toProvinceName;
    this.pthallType = pthallType;
    this.overtimeStatus = overtimeStatus;
    this.busLicenseId = busLicenseId;
    this.busTypeId = busTypeId;
    this.busGradeId = busGradeId;
    this.carrierId = carrierId;
    this.carrierName = carrierName;
    this.capacity = capacity;
    this.stopType = stopType;
    this.ticketGateId = ticketGateId;
    this.ticketGateName = ticketGateName;
    this.remark = remark;
    this.depart = depart;
    this.arrive = arrive;
    this.pleaveDtyyyyMMddHHmmss = pleaveDtyyyyMMddHHmmss;
    this.rtorderCode = rtorderCode;
    this.unitId = unitId;
    this.toStationId = toStationId;
    this.toStationName = toStationName;
    this.rtorderId = rtorderId;
    this.sysCode = sysCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusBasicInfoVO(BusBasicInfoVO other) {
    if (other.isSetToProvinceId()) {
      this.toProvinceId = other.toProvinceId;
    }
    if (other.isSetToProvinceName()) {
      this.toProvinceName = other.toProvinceName;
    }
    if (other.isSetPthallType()) {
      this.pthallType = other.pthallType;
    }
    if (other.isSetOvertimeStatus()) {
      this.overtimeStatus = other.overtimeStatus;
    }
    if (other.isSetBusLicenseId()) {
      this.busLicenseId = other.busLicenseId;
    }
    if (other.isSetBusTypeId()) {
      this.busTypeId = other.busTypeId;
    }
    if (other.isSetBusGradeId()) {
      this.busGradeId = other.busGradeId;
    }
    if (other.isSetCarrierId()) {
      this.carrierId = other.carrierId;
    }
    if (other.isSetCarrierName()) {
      this.carrierName = other.carrierName;
    }
    if (other.isSetCapacity()) {
      this.capacity = other.capacity;
    }
    if (other.isSetStopType()) {
      this.stopType = other.stopType;
    }
    if (other.isSetTicketGateId()) {
      this.ticketGateId = other.ticketGateId;
    }
    if (other.isSetTicketGateName()) {
      this.ticketGateName = other.ticketGateName;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetDepart()) {
      this.depart = new SysChinaRegion(other.depart);
    }
    if (other.isSetArrive()) {
      this.arrive = new SysChinaRegion(other.arrive);
    }
    if (other.isSetPleaveDtyyyyMMddHHmmss()) {
      this.pleaveDtyyyyMMddHHmmss = other.pleaveDtyyyyMMddHHmmss;
    }
    if (other.isSetRtorderCode()) {
      this.rtorderCode = other.rtorderCode;
    }
    if (other.isSetUnitId()) {
      this.unitId = other.unitId;
    }
    if (other.isSetToStationId()) {
      this.toStationId = other.toStationId;
    }
    if (other.isSetToStationName()) {
      this.toStationName = other.toStationName;
    }
    if (other.isSetRtorderId()) {
      this.rtorderId = other.rtorderId;
    }
    if (other.isSetSysCode()) {
      this.sysCode = other.sysCode;
    }
  }

  public BusBasicInfoVO deepCopy() {
    return new BusBasicInfoVO(this);
  }

  @Override
  public void clear() {
    this.toProvinceId = null;
    this.toProvinceName = null;
    this.pthallType = null;
    this.overtimeStatus = null;
    this.busLicenseId = null;
    this.busTypeId = null;
    this.busGradeId = null;
    this.carrierId = null;
    this.carrierName = null;
    this.capacity = null;
    this.stopType = null;
    this.ticketGateId = null;
    this.ticketGateName = null;
    this.remark = null;
    this.depart = null;
    this.arrive = null;
    this.pleaveDtyyyyMMddHHmmss = null;
    this.rtorderCode = null;
    this.unitId = null;
    this.toStationId = null;
    this.toStationName = null;
    this.rtorderId = null;
    this.sysCode = null;
  }

  /**
   * 到达省份ID
   */
  public String getToProvinceId() {
    return this.toProvinceId;
  }

  /**
   * 到达省份ID
   */
  public BusBasicInfoVO setToProvinceId(String toProvinceId) {
    this.toProvinceId = toProvinceId;
    return this;
  }

  public void unsetToProvinceId() {
    this.toProvinceId = null;
  }

  /** Returns true if field toProvinceId is set (has been assigned a value) and false otherwise */
  public boolean isSetToProvinceId() {
    return this.toProvinceId != null;
  }

  public void setToProvinceIdIsSet(boolean value) {
    if (!value) {
      this.toProvinceId = null;
    }
  }

  /**
   * 到达省份名称
   */
  public String getToProvinceName() {
    return this.toProvinceName;
  }

  /**
   * 到达省份名称
   */
  public BusBasicInfoVO setToProvinceName(String toProvinceName) {
    this.toProvinceName = toProvinceName;
    return this;
  }

  public void unsetToProvinceName() {
    this.toProvinceName = null;
  }

  /** Returns true if field toProvinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetToProvinceName() {
    return this.toProvinceName != null;
  }

  public void setToProvinceNameIsSet(boolean value) {
    if (!value) {
      this.toProvinceName = null;
    }
  }

  /**
   * 始发站 车站类型
   */
  public String getPthallType() {
    return this.pthallType;
  }

  /**
   * 始发站 车站类型
   */
  public BusBasicInfoVO setPthallType(String pthallType) {
    this.pthallType = pthallType;
    return this;
  }

  public void unsetPthallType() {
    this.pthallType = null;
  }

  /** Returns true if field pthallType is set (has been assigned a value) and false otherwise */
  public boolean isSetPthallType() {
    return this.pthallType != null;
  }

  public void setPthallTypeIsSet(boolean value) {
    if (!value) {
      this.pthallType = null;
    }
  }

  /**
   * 是否复制加班  加班状态
   */
  public String getOvertimeStatus() {
    return this.overtimeStatus;
  }

  /**
   * 是否复制加班  加班状态
   */
  public BusBasicInfoVO setOvertimeStatus(String overtimeStatus) {
    this.overtimeStatus = overtimeStatus;
    return this;
  }

  public void unsetOvertimeStatus() {
    this.overtimeStatus = null;
  }

  /** Returns true if field overtimeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOvertimeStatus() {
    return this.overtimeStatus != null;
  }

  public void setOvertimeStatusIsSet(boolean value) {
    if (!value) {
      this.overtimeStatus = null;
    }
  }

  /**
   * 承运公司许可证
   */
  public String getBusLicenseId() {
    return this.busLicenseId;
  }

  /**
   * 承运公司许可证
   */
  public BusBasicInfoVO setBusLicenseId(String busLicenseId) {
    this.busLicenseId = busLicenseId;
    return this;
  }

  public void unsetBusLicenseId() {
    this.busLicenseId = null;
  }

  /** Returns true if field busLicenseId is set (has been assigned a value) and false otherwise */
  public boolean isSetBusLicenseId() {
    return this.busLicenseId != null;
  }

  public void setBusLicenseIdIsSet(boolean value) {
    if (!value) {
      this.busLicenseId = null;
    }
  }

  /**
   * 车辆类型
   */
  public String getBusTypeId() {
    return this.busTypeId;
  }

  /**
   * 车辆类型
   */
  public BusBasicInfoVO setBusTypeId(String busTypeId) {
    this.busTypeId = busTypeId;
    return this;
  }

  public void unsetBusTypeId() {
    this.busTypeId = null;
  }

  /** Returns true if field busTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetBusTypeId() {
    return this.busTypeId != null;
  }

  public void setBusTypeIdIsSet(boolean value) {
    if (!value) {
      this.busTypeId = null;
    }
  }

  /**
   * 车辆等级
   */
  public String getBusGradeId() {
    return this.busGradeId;
  }

  /**
   * 车辆等级
   */
  public BusBasicInfoVO setBusGradeId(String busGradeId) {
    this.busGradeId = busGradeId;
    return this;
  }

  public void unsetBusGradeId() {
    this.busGradeId = null;
  }

  /** Returns true if field busGradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetBusGradeId() {
    return this.busGradeId != null;
  }

  public void setBusGradeIdIsSet(boolean value) {
    if (!value) {
      this.busGradeId = null;
    }
  }

  /**
   * 车公司代码
   */
  public String getCarrierId() {
    return this.carrierId;
  }

  /**
   * 车公司代码
   */
  public BusBasicInfoVO setCarrierId(String carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  public void unsetCarrierId() {
    this.carrierId = null;
  }

  /** Returns true if field carrierId is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrierId() {
    return this.carrierId != null;
  }

  public void setCarrierIdIsSet(boolean value) {
    if (!value) {
      this.carrierId = null;
    }
  }

  /**
   * 车公司名称
   */
  public String getCarrierName() {
    return this.carrierName;
  }

  /**
   * 车公司名称
   */
  public BusBasicInfoVO setCarrierName(String carrierName) {
    this.carrierName = carrierName;
    return this;
  }

  public void unsetCarrierName() {
    this.carrierName = null;
  }

  /** Returns true if field carrierName is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrierName() {
    return this.carrierName != null;
  }

  public void setCarrierNameIsSet(boolean value) {
    if (!value) {
      this.carrierName = null;
    }
  }

  /**
   * 车辆可载客人数
   */
  public String getCapacity() {
    return this.capacity;
  }

  /**
   * 车辆可载客人数
   */
  public BusBasicInfoVO setCapacity(String capacity) {
    this.capacity = capacity;
    return this;
  }

  public void unsetCapacity() {
    this.capacity = null;
  }

  /** Returns true if field capacity is set (has been assigned a value) and false otherwise */
  public boolean isSetCapacity() {
    return this.capacity != null;
  }

  public void setCapacityIsSet(boolean value) {
    if (!value) {
      this.capacity = null;
    }
  }

  /**
   * 班次状态
   */
  public String getStopType() {
    return this.stopType;
  }

  /**
   * 班次状态
   */
  public BusBasicInfoVO setStopType(String stopType) {
    this.stopType = stopType;
    return this;
  }

  public void unsetStopType() {
    this.stopType = null;
  }

  /** Returns true if field stopType is set (has been assigned a value) and false otherwise */
  public boolean isSetStopType() {
    return this.stopType != null;
  }

  public void setStopTypeIsSet(boolean value) {
    if (!value) {
      this.stopType = null;
    }
  }

  /**
   * 检票口代码
   */
  public String getTicketGateId() {
    return this.ticketGateId;
  }

  /**
   * 检票口代码
   */
  public BusBasicInfoVO setTicketGateId(String ticketGateId) {
    this.ticketGateId = ticketGateId;
    return this;
  }

  public void unsetTicketGateId() {
    this.ticketGateId = null;
  }

  /** Returns true if field ticketGateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketGateId() {
    return this.ticketGateId != null;
  }

  public void setTicketGateIdIsSet(boolean value) {
    if (!value) {
      this.ticketGateId = null;
    }
  }

  /**
   * 检票口名称
   */
  public String getTicketGateName() {
    return this.ticketGateName;
  }

  /**
   * 检票口名称
   */
  public BusBasicInfoVO setTicketGateName(String ticketGateName) {
    this.ticketGateName = ticketGateName;
    return this;
  }

  public void unsetTicketGateName() {
    this.ticketGateName = null;
  }

  /** Returns true if field ticketGateName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketGateName() {
    return this.ticketGateName != null;
  }

  public void setTicketGateNameIsSet(boolean value) {
    if (!value) {
      this.ticketGateName = null;
    }
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public BusBasicInfoVO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 出发地行政区域信息
   */
  public SysChinaRegion getDepart() {
    return this.depart;
  }

  /**
   * 出发地行政区域信息
   */
  public BusBasicInfoVO setDepart(SysChinaRegion depart) {
    this.depart = depart;
    return this;
  }

  public void unsetDepart() {
    this.depart = null;
  }

  /** Returns true if field depart is set (has been assigned a value) and false otherwise */
  public boolean isSetDepart() {
    return this.depart != null;
  }

  public void setDepartIsSet(boolean value) {
    if (!value) {
      this.depart = null;
    }
  }

  /**
   * 目的地行政区域信息
   */
  public SysChinaRegion getArrive() {
    return this.arrive;
  }

  /**
   * 目的地行政区域信息
   */
  public BusBasicInfoVO setArrive(SysChinaRegion arrive) {
    this.arrive = arrive;
    return this;
  }

  public void unsetArrive() {
    this.arrive = null;
  }

  /** Returns true if field arrive is set (has been assigned a value) and false otherwise */
  public boolean isSetArrive() {
    return this.arrive != null;
  }

  public void setArriveIsSet(boolean value) {
    if (!value) {
      this.arrive = null;
    }
  }

  /**
   * 出发时间
   */
  public String getPleaveDtyyyyMMddHHmmss() {
    return this.pleaveDtyyyyMMddHHmmss;
  }

  /**
   * 出发时间
   */
  public BusBasicInfoVO setPleaveDtyyyyMMddHHmmss(String pleaveDtyyyyMMddHHmmss) {
    this.pleaveDtyyyyMMddHHmmss = pleaveDtyyyyMMddHHmmss;
    return this;
  }

  public void unsetPleaveDtyyyyMMddHHmmss() {
    this.pleaveDtyyyyMMddHHmmss = null;
  }

  /** Returns true if field pleaveDtyyyyMMddHHmmss is set (has been assigned a value) and false otherwise */
  public boolean isSetPleaveDtyyyyMMddHHmmss() {
    return this.pleaveDtyyyyMMddHHmmss != null;
  }

  public void setPleaveDtyyyyMMddHHmmssIsSet(boolean value) {
    if (!value) {
      this.pleaveDtyyyyMMddHHmmss = null;
    }
  }

  /**
   * 车次编号
   */
  public String getRtorderCode() {
    return this.rtorderCode;
  }

  /**
   * 车次编号
   */
  public BusBasicInfoVO setRtorderCode(String rtorderCode) {
    this.rtorderCode = rtorderCode;
    return this;
  }

  public void unsetRtorderCode() {
    this.rtorderCode = null;
  }

  /** Returns true if field rtorderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRtorderCode() {
    return this.rtorderCode != null;
  }

  public void setRtorderCodeIsSet(boolean value) {
    if (!value) {
      this.rtorderCode = null;
    }
  }

  /**
   * 出发车站编号
   */
  public String getUnitId() {
    return this.unitId;
  }

  /**
   * 出发车站编号
   */
  public BusBasicInfoVO setUnitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  public void unsetUnitId() {
    this.unitId = null;
  }

  /** Returns true if field unitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitId() {
    return this.unitId != null;
  }

  public void setUnitIdIsSet(boolean value) {
    if (!value) {
      this.unitId = null;
    }
  }

  /**
   * 到达车站编号
   */
  public String getToStationId() {
    return this.toStationId;
  }

  /**
   * 到达车站编号
   */
  public BusBasicInfoVO setToStationId(String toStationId) {
    this.toStationId = toStationId;
    return this;
  }

  public void unsetToStationId() {
    this.toStationId = null;
  }

  /** Returns true if field toStationId is set (has been assigned a value) and false otherwise */
  public boolean isSetToStationId() {
    return this.toStationId != null;
  }

  public void setToStationIdIsSet(boolean value) {
    if (!value) {
      this.toStationId = null;
    }
  }

  /**
   * 到达车站名称
   */
  public String getToStationName() {
    return this.toStationName;
  }

  /**
   * 到达车站名称
   */
  public BusBasicInfoVO setToStationName(String toStationName) {
    this.toStationName = toStationName;
    return this;
  }

  public void unsetToStationName() {
    this.toStationName = null;
  }

  /** Returns true if field toStationName is set (has been assigned a value) and false otherwise */
  public boolean isSetToStationName() {
    return this.toStationName != null;
  }

  public void setToStationNameIsSet(boolean value) {
    if (!value) {
      this.toStationName = null;
    }
  }

  /**
   * 车次id
   */
  public String getRtorderId() {
    return this.rtorderId;
  }

  /**
   * 车次id
   */
  public BusBasicInfoVO setRtorderId(String rtorderId) {
    this.rtorderId = rtorderId;
    return this;
  }

  public void unsetRtorderId() {
    this.rtorderId = null;
  }

  /** Returns true if field rtorderId is set (has been assigned a value) and false otherwise */
  public boolean isSetRtorderId() {
    return this.rtorderId != null;
  }

  public void setRtorderIdIsSet(boolean value) {
    if (!value) {
      this.rtorderId = null;
    }
  }

  /**
   * 出票系统代码
   */
  public String getSysCode() {
    return this.sysCode;
  }

  /**
   * 出票系统代码
   */
  public BusBasicInfoVO setSysCode(String sysCode) {
    this.sysCode = sysCode;
    return this;
  }

  public void unsetSysCode() {
    this.sysCode = null;
  }

  /** Returns true if field sysCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSysCode() {
    return this.sysCode != null;
  }

  public void setSysCodeIsSet(boolean value) {
    if (!value) {
      this.sysCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TO_PROVINCE_ID:
      if (value == null) {
        unsetToProvinceId();
      } else {
        setToProvinceId((String)value);
      }
      break;

    case TO_PROVINCE_NAME:
      if (value == null) {
        unsetToProvinceName();
      } else {
        setToProvinceName((String)value);
      }
      break;

    case PTHALL_TYPE:
      if (value == null) {
        unsetPthallType();
      } else {
        setPthallType((String)value);
      }
      break;

    case OVERTIME_STATUS:
      if (value == null) {
        unsetOvertimeStatus();
      } else {
        setOvertimeStatus((String)value);
      }
      break;

    case BUS_LICENSE_ID:
      if (value == null) {
        unsetBusLicenseId();
      } else {
        setBusLicenseId((String)value);
      }
      break;

    case BUS_TYPE_ID:
      if (value == null) {
        unsetBusTypeId();
      } else {
        setBusTypeId((String)value);
      }
      break;

    case BUS_GRADE_ID:
      if (value == null) {
        unsetBusGradeId();
      } else {
        setBusGradeId((String)value);
      }
      break;

    case CARRIER_ID:
      if (value == null) {
        unsetCarrierId();
      } else {
        setCarrierId((String)value);
      }
      break;

    case CARRIER_NAME:
      if (value == null) {
        unsetCarrierName();
      } else {
        setCarrierName((String)value);
      }
      break;

    case CAPACITY:
      if (value == null) {
        unsetCapacity();
      } else {
        setCapacity((String)value);
      }
      break;

    case STOP_TYPE:
      if (value == null) {
        unsetStopType();
      } else {
        setStopType((String)value);
      }
      break;

    case TICKET_GATE_ID:
      if (value == null) {
        unsetTicketGateId();
      } else {
        setTicketGateId((String)value);
      }
      break;

    case TICKET_GATE_NAME:
      if (value == null) {
        unsetTicketGateName();
      } else {
        setTicketGateName((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case DEPART:
      if (value == null) {
        unsetDepart();
      } else {
        setDepart((SysChinaRegion)value);
      }
      break;

    case ARRIVE:
      if (value == null) {
        unsetArrive();
      } else {
        setArrive((SysChinaRegion)value);
      }
      break;

    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      if (value == null) {
        unsetPleaveDtyyyyMMddHHmmss();
      } else {
        setPleaveDtyyyyMMddHHmmss((String)value);
      }
      break;

    case RTORDER_CODE:
      if (value == null) {
        unsetRtorderCode();
      } else {
        setRtorderCode((String)value);
      }
      break;

    case UNIT_ID:
      if (value == null) {
        unsetUnitId();
      } else {
        setUnitId((String)value);
      }
      break;

    case TO_STATION_ID:
      if (value == null) {
        unsetToStationId();
      } else {
        setToStationId((String)value);
      }
      break;

    case TO_STATION_NAME:
      if (value == null) {
        unsetToStationName();
      } else {
        setToStationName((String)value);
      }
      break;

    case RTORDER_ID:
      if (value == null) {
        unsetRtorderId();
      } else {
        setRtorderId((String)value);
      }
      break;

    case SYS_CODE:
      if (value == null) {
        unsetSysCode();
      } else {
        setSysCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TO_PROVINCE_ID:
      return getToProvinceId();

    case TO_PROVINCE_NAME:
      return getToProvinceName();

    case PTHALL_TYPE:
      return getPthallType();

    case OVERTIME_STATUS:
      return getOvertimeStatus();

    case BUS_LICENSE_ID:
      return getBusLicenseId();

    case BUS_TYPE_ID:
      return getBusTypeId();

    case BUS_GRADE_ID:
      return getBusGradeId();

    case CARRIER_ID:
      return getCarrierId();

    case CARRIER_NAME:
      return getCarrierName();

    case CAPACITY:
      return getCapacity();

    case STOP_TYPE:
      return getStopType();

    case TICKET_GATE_ID:
      return getTicketGateId();

    case TICKET_GATE_NAME:
      return getTicketGateName();

    case REMARK:
      return getRemark();

    case DEPART:
      return getDepart();

    case ARRIVE:
      return getArrive();

    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      return getPleaveDtyyyyMMddHHmmss();

    case RTORDER_CODE:
      return getRtorderCode();

    case UNIT_ID:
      return getUnitId();

    case TO_STATION_ID:
      return getToStationId();

    case TO_STATION_NAME:
      return getToStationName();

    case RTORDER_ID:
      return getRtorderId();

    case SYS_CODE:
      return getSysCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TO_PROVINCE_ID:
      return isSetToProvinceId();
    case TO_PROVINCE_NAME:
      return isSetToProvinceName();
    case PTHALL_TYPE:
      return isSetPthallType();
    case OVERTIME_STATUS:
      return isSetOvertimeStatus();
    case BUS_LICENSE_ID:
      return isSetBusLicenseId();
    case BUS_TYPE_ID:
      return isSetBusTypeId();
    case BUS_GRADE_ID:
      return isSetBusGradeId();
    case CARRIER_ID:
      return isSetCarrierId();
    case CARRIER_NAME:
      return isSetCarrierName();
    case CAPACITY:
      return isSetCapacity();
    case STOP_TYPE:
      return isSetStopType();
    case TICKET_GATE_ID:
      return isSetTicketGateId();
    case TICKET_GATE_NAME:
      return isSetTicketGateName();
    case REMARK:
      return isSetRemark();
    case DEPART:
      return isSetDepart();
    case ARRIVE:
      return isSetArrive();
    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      return isSetPleaveDtyyyyMMddHHmmss();
    case RTORDER_CODE:
      return isSetRtorderCode();
    case UNIT_ID:
      return isSetUnitId();
    case TO_STATION_ID:
      return isSetToStationId();
    case TO_STATION_NAME:
      return isSetToStationName();
    case RTORDER_ID:
      return isSetRtorderId();
    case SYS_CODE:
      return isSetSysCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusBasicInfoVO)
      return this.equals((BusBasicInfoVO)that);
    return false;
  }

  public boolean equals(BusBasicInfoVO that) {
    if (that == null)
      return false;

    boolean this_present_toProvinceId = true && this.isSetToProvinceId();
    boolean that_present_toProvinceId = true && that.isSetToProvinceId();
    if (this_present_toProvinceId || that_present_toProvinceId) {
      if (!(this_present_toProvinceId && that_present_toProvinceId))
        return false;
      if (!this.toProvinceId.equals(that.toProvinceId))
        return false;
    }

    boolean this_present_toProvinceName = true && this.isSetToProvinceName();
    boolean that_present_toProvinceName = true && that.isSetToProvinceName();
    if (this_present_toProvinceName || that_present_toProvinceName) {
      if (!(this_present_toProvinceName && that_present_toProvinceName))
        return false;
      if (!this.toProvinceName.equals(that.toProvinceName))
        return false;
    }

    boolean this_present_pthallType = true && this.isSetPthallType();
    boolean that_present_pthallType = true && that.isSetPthallType();
    if (this_present_pthallType || that_present_pthallType) {
      if (!(this_present_pthallType && that_present_pthallType))
        return false;
      if (!this.pthallType.equals(that.pthallType))
        return false;
    }

    boolean this_present_overtimeStatus = true && this.isSetOvertimeStatus();
    boolean that_present_overtimeStatus = true && that.isSetOvertimeStatus();
    if (this_present_overtimeStatus || that_present_overtimeStatus) {
      if (!(this_present_overtimeStatus && that_present_overtimeStatus))
        return false;
      if (!this.overtimeStatus.equals(that.overtimeStatus))
        return false;
    }

    boolean this_present_busLicenseId = true && this.isSetBusLicenseId();
    boolean that_present_busLicenseId = true && that.isSetBusLicenseId();
    if (this_present_busLicenseId || that_present_busLicenseId) {
      if (!(this_present_busLicenseId && that_present_busLicenseId))
        return false;
      if (!this.busLicenseId.equals(that.busLicenseId))
        return false;
    }

    boolean this_present_busTypeId = true && this.isSetBusTypeId();
    boolean that_present_busTypeId = true && that.isSetBusTypeId();
    if (this_present_busTypeId || that_present_busTypeId) {
      if (!(this_present_busTypeId && that_present_busTypeId))
        return false;
      if (!this.busTypeId.equals(that.busTypeId))
        return false;
    }

    boolean this_present_busGradeId = true && this.isSetBusGradeId();
    boolean that_present_busGradeId = true && that.isSetBusGradeId();
    if (this_present_busGradeId || that_present_busGradeId) {
      if (!(this_present_busGradeId && that_present_busGradeId))
        return false;
      if (!this.busGradeId.equals(that.busGradeId))
        return false;
    }

    boolean this_present_carrierId = true && this.isSetCarrierId();
    boolean that_present_carrierId = true && that.isSetCarrierId();
    if (this_present_carrierId || that_present_carrierId) {
      if (!(this_present_carrierId && that_present_carrierId))
        return false;
      if (!this.carrierId.equals(that.carrierId))
        return false;
    }

    boolean this_present_carrierName = true && this.isSetCarrierName();
    boolean that_present_carrierName = true && that.isSetCarrierName();
    if (this_present_carrierName || that_present_carrierName) {
      if (!(this_present_carrierName && that_present_carrierName))
        return false;
      if (!this.carrierName.equals(that.carrierName))
        return false;
    }

    boolean this_present_capacity = true && this.isSetCapacity();
    boolean that_present_capacity = true && that.isSetCapacity();
    if (this_present_capacity || that_present_capacity) {
      if (!(this_present_capacity && that_present_capacity))
        return false;
      if (!this.capacity.equals(that.capacity))
        return false;
    }

    boolean this_present_stopType = true && this.isSetStopType();
    boolean that_present_stopType = true && that.isSetStopType();
    if (this_present_stopType || that_present_stopType) {
      if (!(this_present_stopType && that_present_stopType))
        return false;
      if (!this.stopType.equals(that.stopType))
        return false;
    }

    boolean this_present_ticketGateId = true && this.isSetTicketGateId();
    boolean that_present_ticketGateId = true && that.isSetTicketGateId();
    if (this_present_ticketGateId || that_present_ticketGateId) {
      if (!(this_present_ticketGateId && that_present_ticketGateId))
        return false;
      if (!this.ticketGateId.equals(that.ticketGateId))
        return false;
    }

    boolean this_present_ticketGateName = true && this.isSetTicketGateName();
    boolean that_present_ticketGateName = true && that.isSetTicketGateName();
    if (this_present_ticketGateName || that_present_ticketGateName) {
      if (!(this_present_ticketGateName && that_present_ticketGateName))
        return false;
      if (!this.ticketGateName.equals(that.ticketGateName))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_depart = true && this.isSetDepart();
    boolean that_present_depart = true && that.isSetDepart();
    if (this_present_depart || that_present_depart) {
      if (!(this_present_depart && that_present_depart))
        return false;
      if (!this.depart.equals(that.depart))
        return false;
    }

    boolean this_present_arrive = true && this.isSetArrive();
    boolean that_present_arrive = true && that.isSetArrive();
    if (this_present_arrive || that_present_arrive) {
      if (!(this_present_arrive && that_present_arrive))
        return false;
      if (!this.arrive.equals(that.arrive))
        return false;
    }

    boolean this_present_pleaveDtyyyyMMddHHmmss = true && this.isSetPleaveDtyyyyMMddHHmmss();
    boolean that_present_pleaveDtyyyyMMddHHmmss = true && that.isSetPleaveDtyyyyMMddHHmmss();
    if (this_present_pleaveDtyyyyMMddHHmmss || that_present_pleaveDtyyyyMMddHHmmss) {
      if (!(this_present_pleaveDtyyyyMMddHHmmss && that_present_pleaveDtyyyyMMddHHmmss))
        return false;
      if (!this.pleaveDtyyyyMMddHHmmss.equals(that.pleaveDtyyyyMMddHHmmss))
        return false;
    }

    boolean this_present_rtorderCode = true && this.isSetRtorderCode();
    boolean that_present_rtorderCode = true && that.isSetRtorderCode();
    if (this_present_rtorderCode || that_present_rtorderCode) {
      if (!(this_present_rtorderCode && that_present_rtorderCode))
        return false;
      if (!this.rtorderCode.equals(that.rtorderCode))
        return false;
    }

    boolean this_present_unitId = true && this.isSetUnitId();
    boolean that_present_unitId = true && that.isSetUnitId();
    if (this_present_unitId || that_present_unitId) {
      if (!(this_present_unitId && that_present_unitId))
        return false;
      if (!this.unitId.equals(that.unitId))
        return false;
    }

    boolean this_present_toStationId = true && this.isSetToStationId();
    boolean that_present_toStationId = true && that.isSetToStationId();
    if (this_present_toStationId || that_present_toStationId) {
      if (!(this_present_toStationId && that_present_toStationId))
        return false;
      if (!this.toStationId.equals(that.toStationId))
        return false;
    }

    boolean this_present_toStationName = true && this.isSetToStationName();
    boolean that_present_toStationName = true && that.isSetToStationName();
    if (this_present_toStationName || that_present_toStationName) {
      if (!(this_present_toStationName && that_present_toStationName))
        return false;
      if (!this.toStationName.equals(that.toStationName))
        return false;
    }

    boolean this_present_rtorderId = true && this.isSetRtorderId();
    boolean that_present_rtorderId = true && that.isSetRtorderId();
    if (this_present_rtorderId || that_present_rtorderId) {
      if (!(this_present_rtorderId && that_present_rtorderId))
        return false;
      if (!this.rtorderId.equals(that.rtorderId))
        return false;
    }

    boolean this_present_sysCode = true && this.isSetSysCode();
    boolean that_present_sysCode = true && that.isSetSysCode();
    if (this_present_sysCode || that_present_sysCode) {
      if (!(this_present_sysCode && that_present_sysCode))
        return false;
      if (!this.sysCode.equals(that.sysCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_toProvinceId = true && (isSetToProvinceId());
    list.add(present_toProvinceId);
    if (present_toProvinceId)
      list.add(toProvinceId);

    boolean present_toProvinceName = true && (isSetToProvinceName());
    list.add(present_toProvinceName);
    if (present_toProvinceName)
      list.add(toProvinceName);

    boolean present_pthallType = true && (isSetPthallType());
    list.add(present_pthallType);
    if (present_pthallType)
      list.add(pthallType);

    boolean present_overtimeStatus = true && (isSetOvertimeStatus());
    list.add(present_overtimeStatus);
    if (present_overtimeStatus)
      list.add(overtimeStatus);

    boolean present_busLicenseId = true && (isSetBusLicenseId());
    list.add(present_busLicenseId);
    if (present_busLicenseId)
      list.add(busLicenseId);

    boolean present_busTypeId = true && (isSetBusTypeId());
    list.add(present_busTypeId);
    if (present_busTypeId)
      list.add(busTypeId);

    boolean present_busGradeId = true && (isSetBusGradeId());
    list.add(present_busGradeId);
    if (present_busGradeId)
      list.add(busGradeId);

    boolean present_carrierId = true && (isSetCarrierId());
    list.add(present_carrierId);
    if (present_carrierId)
      list.add(carrierId);

    boolean present_carrierName = true && (isSetCarrierName());
    list.add(present_carrierName);
    if (present_carrierName)
      list.add(carrierName);

    boolean present_capacity = true && (isSetCapacity());
    list.add(present_capacity);
    if (present_capacity)
      list.add(capacity);

    boolean present_stopType = true && (isSetStopType());
    list.add(present_stopType);
    if (present_stopType)
      list.add(stopType);

    boolean present_ticketGateId = true && (isSetTicketGateId());
    list.add(present_ticketGateId);
    if (present_ticketGateId)
      list.add(ticketGateId);

    boolean present_ticketGateName = true && (isSetTicketGateName());
    list.add(present_ticketGateName);
    if (present_ticketGateName)
      list.add(ticketGateName);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_depart = true && (isSetDepart());
    list.add(present_depart);
    if (present_depart)
      list.add(depart);

    boolean present_arrive = true && (isSetArrive());
    list.add(present_arrive);
    if (present_arrive)
      list.add(arrive);

    boolean present_pleaveDtyyyyMMddHHmmss = true && (isSetPleaveDtyyyyMMddHHmmss());
    list.add(present_pleaveDtyyyyMMddHHmmss);
    if (present_pleaveDtyyyyMMddHHmmss)
      list.add(pleaveDtyyyyMMddHHmmss);

    boolean present_rtorderCode = true && (isSetRtorderCode());
    list.add(present_rtorderCode);
    if (present_rtorderCode)
      list.add(rtorderCode);

    boolean present_unitId = true && (isSetUnitId());
    list.add(present_unitId);
    if (present_unitId)
      list.add(unitId);

    boolean present_toStationId = true && (isSetToStationId());
    list.add(present_toStationId);
    if (present_toStationId)
      list.add(toStationId);

    boolean present_toStationName = true && (isSetToStationName());
    list.add(present_toStationName);
    if (present_toStationName)
      list.add(toStationName);

    boolean present_rtorderId = true && (isSetRtorderId());
    list.add(present_rtorderId);
    if (present_rtorderId)
      list.add(rtorderId);

    boolean present_sysCode = true && (isSetSysCode());
    list.add(present_sysCode);
    if (present_sysCode)
      list.add(sysCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(BusBasicInfoVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetToProvinceId()).compareTo(other.isSetToProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToProvinceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toProvinceId, other.toProvinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToProvinceName()).compareTo(other.isSetToProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toProvinceName, other.toProvinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPthallType()).compareTo(other.isSetPthallType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPthallType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pthallType, other.pthallType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOvertimeStatus()).compareTo(other.isSetOvertimeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOvertimeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overtimeStatus, other.overtimeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusLicenseId()).compareTo(other.isSetBusLicenseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusLicenseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busLicenseId, other.busLicenseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusTypeId()).compareTo(other.isSetBusTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busTypeId, other.busTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusGradeId()).compareTo(other.isSetBusGradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusGradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busGradeId, other.busGradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarrierId()).compareTo(other.isSetCarrierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrierId, other.carrierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarrierName()).compareTo(other.isSetCarrierName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrierName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrierName, other.carrierName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapacity()).compareTo(other.isSetCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacity, other.capacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopType()).compareTo(other.isSetStopType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopType, other.stopType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketGateId()).compareTo(other.isSetTicketGateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketGateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketGateId, other.ticketGateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketGateName()).compareTo(other.isSetTicketGateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketGateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketGateName, other.ticketGateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepart()).compareTo(other.isSetDepart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depart, other.depart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrive()).compareTo(other.isSetArrive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrive, other.arrive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPleaveDtyyyyMMddHHmmss()).compareTo(other.isSetPleaveDtyyyyMMddHHmmss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPleaveDtyyyyMMddHHmmss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pleaveDtyyyyMMddHHmmss, other.pleaveDtyyyyMMddHHmmss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtorderCode()).compareTo(other.isSetRtorderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtorderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtorderCode, other.rtorderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitId()).compareTo(other.isSetUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitId, other.unitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStationId()).compareTo(other.isSetToStationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStationId, other.toStationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStationName()).compareTo(other.isSetToStationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStationName, other.toStationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtorderId()).compareTo(other.isSetRtorderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtorderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtorderId, other.rtorderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSysCode()).compareTo(other.isSetSysCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysCode, other.sysCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusBasicInfoVO(");
    boolean first = true;

    sb.append("toProvinceId:");
    if (this.toProvinceId == null) {
      sb.append("null");
    } else {
      sb.append(this.toProvinceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toProvinceName:");
    if (this.toProvinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.toProvinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pthallType:");
    if (this.pthallType == null) {
      sb.append("null");
    } else {
      sb.append(this.pthallType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overtimeStatus:");
    if (this.overtimeStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.overtimeStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busLicenseId:");
    if (this.busLicenseId == null) {
      sb.append("null");
    } else {
      sb.append(this.busLicenseId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busTypeId:");
    if (this.busTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.busTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busGradeId:");
    if (this.busGradeId == null) {
      sb.append("null");
    } else {
      sb.append(this.busGradeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carrierId:");
    if (this.carrierId == null) {
      sb.append("null");
    } else {
      sb.append(this.carrierId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carrierName:");
    if (this.carrierName == null) {
      sb.append("null");
    } else {
      sb.append(this.carrierName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("capacity:");
    if (this.capacity == null) {
      sb.append("null");
    } else {
      sb.append(this.capacity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopType:");
    if (this.stopType == null) {
      sb.append("null");
    } else {
      sb.append(this.stopType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketGateId:");
    if (this.ticketGateId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketGateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketGateName:");
    if (this.ticketGateName == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketGateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("depart:");
    if (this.depart == null) {
      sb.append("null");
    } else {
      sb.append(this.depart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrive:");
    if (this.arrive == null) {
      sb.append("null");
    } else {
      sb.append(this.arrive);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pleaveDtyyyyMMddHHmmss:");
    if (this.pleaveDtyyyyMMddHHmmss == null) {
      sb.append("null");
    } else {
      sb.append(this.pleaveDtyyyyMMddHHmmss);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rtorderCode:");
    if (this.rtorderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.rtorderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitId:");
    if (this.unitId == null) {
      sb.append("null");
    } else {
      sb.append(this.unitId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStationId:");
    if (this.toStationId == null) {
      sb.append("null");
    } else {
      sb.append(this.toStationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStationName:");
    if (this.toStationName == null) {
      sb.append("null");
    } else {
      sb.append(this.toStationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rtorderId:");
    if (this.rtorderId == null) {
      sb.append("null");
    } else {
      sb.append(this.rtorderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysCode:");
    if (this.sysCode == null) {
      sb.append("null");
    } else {
      sb.append(this.sysCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (depart != null) {
      depart.validate();
    }
    if (arrive != null) {
      arrive.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusBasicInfoVOStandardSchemeFactory implements SchemeFactory {
    public BusBasicInfoVOStandardScheme getScheme() {
      return new BusBasicInfoVOStandardScheme();
    }
  }

  private static class BusBasicInfoVOStandardScheme extends StandardScheme<BusBasicInfoVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusBasicInfoVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TO_PROVINCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toProvinceId = iprot.readString();
              struct.setToProvinceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toProvinceName = iprot.readString();
              struct.setToProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PTHALL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pthallType = iprot.readString();
              struct.setPthallTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OVERTIME_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overtimeStatus = iprot.readString();
              struct.setOvertimeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUS_LICENSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busLicenseId = iprot.readString();
              struct.setBusLicenseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUS_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busTypeId = iprot.readString();
              struct.setBusTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUS_GRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busGradeId = iprot.readString();
              struct.setBusGradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CARRIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carrierId = iprot.readString();
              struct.setCarrierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CARRIER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carrierName = iprot.readString();
              struct.setCarrierNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.capacity = iprot.readString();
              struct.setCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STOP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopType = iprot.readString();
              struct.setStopTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TICKET_GATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketGateId = iprot.readString();
              struct.setTicketGateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TICKET_GATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketGateName = iprot.readString();
              struct.setTicketGateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEPART
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.depart = new SysChinaRegion();
              struct.depart.read(iprot);
              struct.setDepartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ARRIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.arrive = new SysChinaRegion();
              struct.arrive.read(iprot);
              struct.setArriveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PLEAVE_DTYYYY_MMDD_HHMMSS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pleaveDtyyyyMMddHHmmss = iprot.readString();
              struct.setPleaveDtyyyyMMddHHmmssIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RTORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtorderCode = iprot.readString();
              struct.setRtorderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitId = iprot.readString();
              struct.setUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TO_STATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toStationId = iprot.readString();
              struct.setToStationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TO_STATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toStationName = iprot.readString();
              struct.setToStationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RTORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtorderId = iprot.readString();
              struct.setRtorderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SYS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sysCode = iprot.readString();
              struct.setSysCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusBasicInfoVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.toProvinceId != null) {
        oprot.writeFieldBegin(TO_PROVINCE_ID_FIELD_DESC);
        oprot.writeString(struct.toProvinceId);
        oprot.writeFieldEnd();
      }
      if (struct.toProvinceName != null) {
        oprot.writeFieldBegin(TO_PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.toProvinceName);
        oprot.writeFieldEnd();
      }
      if (struct.pthallType != null) {
        oprot.writeFieldBegin(PTHALL_TYPE_FIELD_DESC);
        oprot.writeString(struct.pthallType);
        oprot.writeFieldEnd();
      }
      if (struct.overtimeStatus != null) {
        oprot.writeFieldBegin(OVERTIME_STATUS_FIELD_DESC);
        oprot.writeString(struct.overtimeStatus);
        oprot.writeFieldEnd();
      }
      if (struct.busLicenseId != null) {
        oprot.writeFieldBegin(BUS_LICENSE_ID_FIELD_DESC);
        oprot.writeString(struct.busLicenseId);
        oprot.writeFieldEnd();
      }
      if (struct.busTypeId != null) {
        oprot.writeFieldBegin(BUS_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.busTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.busGradeId != null) {
        oprot.writeFieldBegin(BUS_GRADE_ID_FIELD_DESC);
        oprot.writeString(struct.busGradeId);
        oprot.writeFieldEnd();
      }
      if (struct.carrierId != null) {
        oprot.writeFieldBegin(CARRIER_ID_FIELD_DESC);
        oprot.writeString(struct.carrierId);
        oprot.writeFieldEnd();
      }
      if (struct.carrierName != null) {
        oprot.writeFieldBegin(CARRIER_NAME_FIELD_DESC);
        oprot.writeString(struct.carrierName);
        oprot.writeFieldEnd();
      }
      if (struct.capacity != null) {
        oprot.writeFieldBegin(CAPACITY_FIELD_DESC);
        oprot.writeString(struct.capacity);
        oprot.writeFieldEnd();
      }
      if (struct.stopType != null) {
        oprot.writeFieldBegin(STOP_TYPE_FIELD_DESC);
        oprot.writeString(struct.stopType);
        oprot.writeFieldEnd();
      }
      if (struct.ticketGateId != null) {
        oprot.writeFieldBegin(TICKET_GATE_ID_FIELD_DESC);
        oprot.writeString(struct.ticketGateId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketGateName != null) {
        oprot.writeFieldBegin(TICKET_GATE_NAME_FIELD_DESC);
        oprot.writeString(struct.ticketGateName);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.depart != null) {
        oprot.writeFieldBegin(DEPART_FIELD_DESC);
        struct.depart.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.arrive != null) {
        oprot.writeFieldBegin(ARRIVE_FIELD_DESC);
        struct.arrive.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pleaveDtyyyyMMddHHmmss != null) {
        oprot.writeFieldBegin(PLEAVE_DTYYYY_MMDD_HHMMSS_FIELD_DESC);
        oprot.writeString(struct.pleaveDtyyyyMMddHHmmss);
        oprot.writeFieldEnd();
      }
      if (struct.rtorderCode != null) {
        oprot.writeFieldBegin(RTORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.rtorderCode);
        oprot.writeFieldEnd();
      }
      if (struct.unitId != null) {
        oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
        oprot.writeString(struct.unitId);
        oprot.writeFieldEnd();
      }
      if (struct.toStationId != null) {
        oprot.writeFieldBegin(TO_STATION_ID_FIELD_DESC);
        oprot.writeString(struct.toStationId);
        oprot.writeFieldEnd();
      }
      if (struct.toStationName != null) {
        oprot.writeFieldBegin(TO_STATION_NAME_FIELD_DESC);
        oprot.writeString(struct.toStationName);
        oprot.writeFieldEnd();
      }
      if (struct.rtorderId != null) {
        oprot.writeFieldBegin(RTORDER_ID_FIELD_DESC);
        oprot.writeString(struct.rtorderId);
        oprot.writeFieldEnd();
      }
      if (struct.sysCode != null) {
        oprot.writeFieldBegin(SYS_CODE_FIELD_DESC);
        oprot.writeString(struct.sysCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusBasicInfoVOTupleSchemeFactory implements SchemeFactory {
    public BusBasicInfoVOTupleScheme getScheme() {
      return new BusBasicInfoVOTupleScheme();
    }
  }

  private static class BusBasicInfoVOTupleScheme extends TupleScheme<BusBasicInfoVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusBasicInfoVO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetToProvinceId()) {
        optionals.set(0);
      }
      if (struct.isSetToProvinceName()) {
        optionals.set(1);
      }
      if (struct.isSetPthallType()) {
        optionals.set(2);
      }
      if (struct.isSetOvertimeStatus()) {
        optionals.set(3);
      }
      if (struct.isSetBusLicenseId()) {
        optionals.set(4);
      }
      if (struct.isSetBusTypeId()) {
        optionals.set(5);
      }
      if (struct.isSetBusGradeId()) {
        optionals.set(6);
      }
      if (struct.isSetCarrierId()) {
        optionals.set(7);
      }
      if (struct.isSetCarrierName()) {
        optionals.set(8);
      }
      if (struct.isSetCapacity()) {
        optionals.set(9);
      }
      if (struct.isSetStopType()) {
        optionals.set(10);
      }
      if (struct.isSetTicketGateId()) {
        optionals.set(11);
      }
      if (struct.isSetTicketGateName()) {
        optionals.set(12);
      }
      if (struct.isSetRemark()) {
        optionals.set(13);
      }
      if (struct.isSetDepart()) {
        optionals.set(14);
      }
      if (struct.isSetArrive()) {
        optionals.set(15);
      }
      if (struct.isSetPleaveDtyyyyMMddHHmmss()) {
        optionals.set(16);
      }
      if (struct.isSetRtorderCode()) {
        optionals.set(17);
      }
      if (struct.isSetUnitId()) {
        optionals.set(18);
      }
      if (struct.isSetToStationId()) {
        optionals.set(19);
      }
      if (struct.isSetToStationName()) {
        optionals.set(20);
      }
      if (struct.isSetRtorderId()) {
        optionals.set(21);
      }
      if (struct.isSetSysCode()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetToProvinceId()) {
        oprot.writeString(struct.toProvinceId);
      }
      if (struct.isSetToProvinceName()) {
        oprot.writeString(struct.toProvinceName);
      }
      if (struct.isSetPthallType()) {
        oprot.writeString(struct.pthallType);
      }
      if (struct.isSetOvertimeStatus()) {
        oprot.writeString(struct.overtimeStatus);
      }
      if (struct.isSetBusLicenseId()) {
        oprot.writeString(struct.busLicenseId);
      }
      if (struct.isSetBusTypeId()) {
        oprot.writeString(struct.busTypeId);
      }
      if (struct.isSetBusGradeId()) {
        oprot.writeString(struct.busGradeId);
      }
      if (struct.isSetCarrierId()) {
        oprot.writeString(struct.carrierId);
      }
      if (struct.isSetCarrierName()) {
        oprot.writeString(struct.carrierName);
      }
      if (struct.isSetCapacity()) {
        oprot.writeString(struct.capacity);
      }
      if (struct.isSetStopType()) {
        oprot.writeString(struct.stopType);
      }
      if (struct.isSetTicketGateId()) {
        oprot.writeString(struct.ticketGateId);
      }
      if (struct.isSetTicketGateName()) {
        oprot.writeString(struct.ticketGateName);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetDepart()) {
        struct.depart.write(oprot);
      }
      if (struct.isSetArrive()) {
        struct.arrive.write(oprot);
      }
      if (struct.isSetPleaveDtyyyyMMddHHmmss()) {
        oprot.writeString(struct.pleaveDtyyyyMMddHHmmss);
      }
      if (struct.isSetRtorderCode()) {
        oprot.writeString(struct.rtorderCode);
      }
      if (struct.isSetUnitId()) {
        oprot.writeString(struct.unitId);
      }
      if (struct.isSetToStationId()) {
        oprot.writeString(struct.toStationId);
      }
      if (struct.isSetToStationName()) {
        oprot.writeString(struct.toStationName);
      }
      if (struct.isSetRtorderId()) {
        oprot.writeString(struct.rtorderId);
      }
      if (struct.isSetSysCode()) {
        oprot.writeString(struct.sysCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusBasicInfoVO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.toProvinceId = iprot.readString();
        struct.setToProvinceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toProvinceName = iprot.readString();
        struct.setToProvinceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pthallType = iprot.readString();
        struct.setPthallTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.overtimeStatus = iprot.readString();
        struct.setOvertimeStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.busLicenseId = iprot.readString();
        struct.setBusLicenseIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.busTypeId = iprot.readString();
        struct.setBusTypeIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.busGradeId = iprot.readString();
        struct.setBusGradeIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.carrierId = iprot.readString();
        struct.setCarrierIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.carrierName = iprot.readString();
        struct.setCarrierNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.capacity = iprot.readString();
        struct.setCapacityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.stopType = iprot.readString();
        struct.setStopTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ticketGateId = iprot.readString();
        struct.setTicketGateIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ticketGateName = iprot.readString();
        struct.setTicketGateNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(14)) {
        struct.depart = new SysChinaRegion();
        struct.depart.read(iprot);
        struct.setDepartIsSet(true);
      }
      if (incoming.get(15)) {
        struct.arrive = new SysChinaRegion();
        struct.arrive.read(iprot);
        struct.setArriveIsSet(true);
      }
      if (incoming.get(16)) {
        struct.pleaveDtyyyyMMddHHmmss = iprot.readString();
        struct.setPleaveDtyyyyMMddHHmmssIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rtorderCode = iprot.readString();
        struct.setRtorderCodeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.unitId = iprot.readString();
        struct.setUnitIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.toStationId = iprot.readString();
        struct.setToStationIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.toStationName = iprot.readString();
        struct.setToStationNameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.rtorderId = iprot.readString();
        struct.setRtorderIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.sysCode = iprot.readString();
        struct.setSysCodeIsSet(true);
      }
    }
  }

}

