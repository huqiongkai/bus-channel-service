/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.back;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 根据外部订单号修改取票状态请求VO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-03")
public class TChangeTicketRecStatusByExOrderIdReq implements org.apache.thrift.TBase<TChangeTicketRecStatusByExOrderIdReq, TChangeTicketRecStatusByExOrderIdReq._Fields>, java.io.Serializable, Cloneable, Comparable<TChangeTicketRecStatusByExOrderIdReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TChangeTicketRecStatusByExOrderIdReq");

  private static final org.apache.thrift.protocol.TField EX_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_REC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecStatus", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_REC_RANDOM_CODE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecRandomCodeMap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField REC_TICKET_CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recTicketChannelName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REC_TICKET_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recTicketChannelId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField REC_TICKET_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recTicketUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REC_TICKET_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recTicketUserId", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TChangeTicketRecStatusByExOrderIdReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TChangeTicketRecStatusByExOrderIdReqTupleSchemeFactory());
  }

  /**
   * 外部订单号
   */
  public String exOrderId; // required
  /**
   * 取票状态
   */
  public String ticketRecStatus; // required
  /**
   * 取票码
   */
  public Map<Long,String> ticketRecRandomCodeMap; // required
  /**
   * 预订渠道id
   */
  public long channelId; // required
  /**
   * 取票渠道名称
   */
  public String recTicketChannelName; // optional
  /**
   * 取票渠道
   */
  public long recTicketChannelId; // optional
  /**
   * 取票人姓名
   */
  public String recTicketUserName; // required
  /**
   * 取票人id
   */
  public long recTicketUserId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 外部订单号
     */
    EX_ORDER_ID((short)1, "exOrderId"),
    /**
     * 取票状态
     */
    TICKET_REC_STATUS((short)2, "ticketRecStatus"),
    /**
     * 取票码
     */
    TICKET_REC_RANDOM_CODE_MAP((short)3, "ticketRecRandomCodeMap"),
    /**
     * 预订渠道id
     */
    CHANNEL_ID((short)4, "channelId"),
    /**
     * 取票渠道名称
     */
    REC_TICKET_CHANNEL_NAME((short)5, "recTicketChannelName"),
    /**
     * 取票渠道
     */
    REC_TICKET_CHANNEL_ID((short)6, "recTicketChannelId"),
    /**
     * 取票人姓名
     */
    REC_TICKET_USER_NAME((short)7, "recTicketUserName"),
    /**
     * 取票人id
     */
    REC_TICKET_USER_ID((short)8, "recTicketUserId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EX_ORDER_ID
          return EX_ORDER_ID;
        case 2: // TICKET_REC_STATUS
          return TICKET_REC_STATUS;
        case 3: // TICKET_REC_RANDOM_CODE_MAP
          return TICKET_REC_RANDOM_CODE_MAP;
        case 4: // CHANNEL_ID
          return CHANNEL_ID;
        case 5: // REC_TICKET_CHANNEL_NAME
          return REC_TICKET_CHANNEL_NAME;
        case 6: // REC_TICKET_CHANNEL_ID
          return REC_TICKET_CHANNEL_ID;
        case 7: // REC_TICKET_USER_NAME
          return REC_TICKET_USER_NAME;
        case 8: // REC_TICKET_USER_ID
          return REC_TICKET_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHANNELID_ISSET_ID = 0;
  private static final int __RECTICKETCHANNELID_ISSET_ID = 1;
  private static final int __RECTICKETUSERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REC_TICKET_CHANNEL_NAME,_Fields.REC_TICKET_CHANNEL_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EX_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("exOrderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ticketRecStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_RANDOM_CODE_MAP, new org.apache.thrift.meta_data.FieldMetaData("ticketRecRandomCodeMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REC_TICKET_CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("recTicketChannelName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_TICKET_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("recTicketChannelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REC_TICKET_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("recTicketUserName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_TICKET_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("recTicketUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TChangeTicketRecStatusByExOrderIdReq.class, metaDataMap);
  }

  public TChangeTicketRecStatusByExOrderIdReq() {
  }

  public TChangeTicketRecStatusByExOrderIdReq(
    String exOrderId,
    String ticketRecStatus,
    Map<Long,String> ticketRecRandomCodeMap,
    long channelId,
    String recTicketUserName,
    long recTicketUserId)
  {
    this();
    this.exOrderId = exOrderId;
    this.ticketRecStatus = ticketRecStatus;
    this.ticketRecRandomCodeMap = ticketRecRandomCodeMap;
    this.channelId = channelId;
    setChannelIdIsSet(true);
    this.recTicketUserName = recTicketUserName;
    this.recTicketUserId = recTicketUserId;
    setRecTicketUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TChangeTicketRecStatusByExOrderIdReq(TChangeTicketRecStatusByExOrderIdReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExOrderId()) {
      this.exOrderId = other.exOrderId;
    }
    if (other.isSetTicketRecStatus()) {
      this.ticketRecStatus = other.ticketRecStatus;
    }
    if (other.isSetTicketRecRandomCodeMap()) {
      Map<Long,String> __this__ticketRecRandomCodeMap = new HashMap<Long,String>(other.ticketRecRandomCodeMap);
      this.ticketRecRandomCodeMap = __this__ticketRecRandomCodeMap;
    }
    this.channelId = other.channelId;
    if (other.isSetRecTicketChannelName()) {
      this.recTicketChannelName = other.recTicketChannelName;
    }
    this.recTicketChannelId = other.recTicketChannelId;
    if (other.isSetRecTicketUserName()) {
      this.recTicketUserName = other.recTicketUserName;
    }
    this.recTicketUserId = other.recTicketUserId;
  }

  public TChangeTicketRecStatusByExOrderIdReq deepCopy() {
    return new TChangeTicketRecStatusByExOrderIdReq(this);
  }

  @Override
  public void clear() {
    this.exOrderId = null;
    this.ticketRecStatus = null;
    this.ticketRecRandomCodeMap = null;
    setChannelIdIsSet(false);
    this.channelId = 0;
    this.recTicketChannelName = null;
    setRecTicketChannelIdIsSet(false);
    this.recTicketChannelId = 0;
    this.recTicketUserName = null;
    setRecTicketUserIdIsSet(false);
    this.recTicketUserId = 0;
  }

  /**
   * 外部订单号
   */
  public String getExOrderId() {
    return this.exOrderId;
  }

  /**
   * 外部订单号
   */
  public TChangeTicketRecStatusByExOrderIdReq setExOrderId(String exOrderId) {
    this.exOrderId = exOrderId;
    return this;
  }

  public void unsetExOrderId() {
    this.exOrderId = null;
  }

  /** Returns true if field exOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExOrderId() {
    return this.exOrderId != null;
  }

  public void setExOrderIdIsSet(boolean value) {
    if (!value) {
      this.exOrderId = null;
    }
  }

  /**
   * 取票状态
   */
  public String getTicketRecStatus() {
    return this.ticketRecStatus;
  }

  /**
   * 取票状态
   */
  public TChangeTicketRecStatusByExOrderIdReq setTicketRecStatus(String ticketRecStatus) {
    this.ticketRecStatus = ticketRecStatus;
    return this;
  }

  public void unsetTicketRecStatus() {
    this.ticketRecStatus = null;
  }

  /** Returns true if field ticketRecStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecStatus() {
    return this.ticketRecStatus != null;
  }

  public void setTicketRecStatusIsSet(boolean value) {
    if (!value) {
      this.ticketRecStatus = null;
    }
  }

  public int getTicketRecRandomCodeMapSize() {
    return (this.ticketRecRandomCodeMap == null) ? 0 : this.ticketRecRandomCodeMap.size();
  }

  public void putToTicketRecRandomCodeMap(long key, String val) {
    if (this.ticketRecRandomCodeMap == null) {
      this.ticketRecRandomCodeMap = new HashMap<Long,String>();
    }
    this.ticketRecRandomCodeMap.put(key, val);
  }

  /**
   * 取票码
   */
  public Map<Long,String> getTicketRecRandomCodeMap() {
    return this.ticketRecRandomCodeMap;
  }

  /**
   * 取票码
   */
  public TChangeTicketRecStatusByExOrderIdReq setTicketRecRandomCodeMap(Map<Long,String> ticketRecRandomCodeMap) {
    this.ticketRecRandomCodeMap = ticketRecRandomCodeMap;
    return this;
  }

  public void unsetTicketRecRandomCodeMap() {
    this.ticketRecRandomCodeMap = null;
  }

  /** Returns true if field ticketRecRandomCodeMap is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecRandomCodeMap() {
    return this.ticketRecRandomCodeMap != null;
  }

  public void setTicketRecRandomCodeMapIsSet(boolean value) {
    if (!value) {
      this.ticketRecRandomCodeMap = null;
    }
  }

  /**
   * 预订渠道id
   */
  public long getChannelId() {
    return this.channelId;
  }

  /**
   * 预订渠道id
   */
  public TChangeTicketRecStatusByExOrderIdReq setChannelId(long channelId) {
    this.channelId = channelId;
    setChannelIdIsSet(true);
    return this;
  }

  public void unsetChannelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  public void setChannelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
  }

  /**
   * 取票渠道名称
   */
  public String getRecTicketChannelName() {
    return this.recTicketChannelName;
  }

  /**
   * 取票渠道名称
   */
  public TChangeTicketRecStatusByExOrderIdReq setRecTicketChannelName(String recTicketChannelName) {
    this.recTicketChannelName = recTicketChannelName;
    return this;
  }

  public void unsetRecTicketChannelName() {
    this.recTicketChannelName = null;
  }

  /** Returns true if field recTicketChannelName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecTicketChannelName() {
    return this.recTicketChannelName != null;
  }

  public void setRecTicketChannelNameIsSet(boolean value) {
    if (!value) {
      this.recTicketChannelName = null;
    }
  }

  /**
   * 取票渠道
   */
  public long getRecTicketChannelId() {
    return this.recTicketChannelId;
  }

  /**
   * 取票渠道
   */
  public TChangeTicketRecStatusByExOrderIdReq setRecTicketChannelId(long recTicketChannelId) {
    this.recTicketChannelId = recTicketChannelId;
    setRecTicketChannelIdIsSet(true);
    return this;
  }

  public void unsetRecTicketChannelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECTICKETCHANNELID_ISSET_ID);
  }

  /** Returns true if field recTicketChannelId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecTicketChannelId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECTICKETCHANNELID_ISSET_ID);
  }

  public void setRecTicketChannelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECTICKETCHANNELID_ISSET_ID, value);
  }

  /**
   * 取票人姓名
   */
  public String getRecTicketUserName() {
    return this.recTicketUserName;
  }

  /**
   * 取票人姓名
   */
  public TChangeTicketRecStatusByExOrderIdReq setRecTicketUserName(String recTicketUserName) {
    this.recTicketUserName = recTicketUserName;
    return this;
  }

  public void unsetRecTicketUserName() {
    this.recTicketUserName = null;
  }

  /** Returns true if field recTicketUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecTicketUserName() {
    return this.recTicketUserName != null;
  }

  public void setRecTicketUserNameIsSet(boolean value) {
    if (!value) {
      this.recTicketUserName = null;
    }
  }

  /**
   * 取票人id
   */
  public long getRecTicketUserId() {
    return this.recTicketUserId;
  }

  /**
   * 取票人id
   */
  public TChangeTicketRecStatusByExOrderIdReq setRecTicketUserId(long recTicketUserId) {
    this.recTicketUserId = recTicketUserId;
    setRecTicketUserIdIsSet(true);
    return this;
  }

  public void unsetRecTicketUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECTICKETUSERID_ISSET_ID);
  }

  /** Returns true if field recTicketUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecTicketUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECTICKETUSERID_ISSET_ID);
  }

  public void setRecTicketUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECTICKETUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EX_ORDER_ID:
      if (value == null) {
        unsetExOrderId();
      } else {
        setExOrderId((String)value);
      }
      break;

    case TICKET_REC_STATUS:
      if (value == null) {
        unsetTicketRecStatus();
      } else {
        setTicketRecStatus((String)value);
      }
      break;

    case TICKET_REC_RANDOM_CODE_MAP:
      if (value == null) {
        unsetTicketRecRandomCodeMap();
      } else {
        setTicketRecRandomCodeMap((Map<Long,String>)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((Long)value);
      }
      break;

    case REC_TICKET_CHANNEL_NAME:
      if (value == null) {
        unsetRecTicketChannelName();
      } else {
        setRecTicketChannelName((String)value);
      }
      break;

    case REC_TICKET_CHANNEL_ID:
      if (value == null) {
        unsetRecTicketChannelId();
      } else {
        setRecTicketChannelId((Long)value);
      }
      break;

    case REC_TICKET_USER_NAME:
      if (value == null) {
        unsetRecTicketUserName();
      } else {
        setRecTicketUserName((String)value);
      }
      break;

    case REC_TICKET_USER_ID:
      if (value == null) {
        unsetRecTicketUserId();
      } else {
        setRecTicketUserId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EX_ORDER_ID:
      return getExOrderId();

    case TICKET_REC_STATUS:
      return getTicketRecStatus();

    case TICKET_REC_RANDOM_CODE_MAP:
      return getTicketRecRandomCodeMap();

    case CHANNEL_ID:
      return getChannelId();

    case REC_TICKET_CHANNEL_NAME:
      return getRecTicketChannelName();

    case REC_TICKET_CHANNEL_ID:
      return getRecTicketChannelId();

    case REC_TICKET_USER_NAME:
      return getRecTicketUserName();

    case REC_TICKET_USER_ID:
      return getRecTicketUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EX_ORDER_ID:
      return isSetExOrderId();
    case TICKET_REC_STATUS:
      return isSetTicketRecStatus();
    case TICKET_REC_RANDOM_CODE_MAP:
      return isSetTicketRecRandomCodeMap();
    case CHANNEL_ID:
      return isSetChannelId();
    case REC_TICKET_CHANNEL_NAME:
      return isSetRecTicketChannelName();
    case REC_TICKET_CHANNEL_ID:
      return isSetRecTicketChannelId();
    case REC_TICKET_USER_NAME:
      return isSetRecTicketUserName();
    case REC_TICKET_USER_ID:
      return isSetRecTicketUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TChangeTicketRecStatusByExOrderIdReq)
      return this.equals((TChangeTicketRecStatusByExOrderIdReq)that);
    return false;
  }

  public boolean equals(TChangeTicketRecStatusByExOrderIdReq that) {
    if (that == null)
      return false;

    boolean this_present_exOrderId = true && this.isSetExOrderId();
    boolean that_present_exOrderId = true && that.isSetExOrderId();
    if (this_present_exOrderId || that_present_exOrderId) {
      if (!(this_present_exOrderId && that_present_exOrderId))
        return false;
      if (!this.exOrderId.equals(that.exOrderId))
        return false;
    }

    boolean this_present_ticketRecStatus = true && this.isSetTicketRecStatus();
    boolean that_present_ticketRecStatus = true && that.isSetTicketRecStatus();
    if (this_present_ticketRecStatus || that_present_ticketRecStatus) {
      if (!(this_present_ticketRecStatus && that_present_ticketRecStatus))
        return false;
      if (!this.ticketRecStatus.equals(that.ticketRecStatus))
        return false;
    }

    boolean this_present_ticketRecRandomCodeMap = true && this.isSetTicketRecRandomCodeMap();
    boolean that_present_ticketRecRandomCodeMap = true && that.isSetTicketRecRandomCodeMap();
    if (this_present_ticketRecRandomCodeMap || that_present_ticketRecRandomCodeMap) {
      if (!(this_present_ticketRecRandomCodeMap && that_present_ticketRecRandomCodeMap))
        return false;
      if (!this.ticketRecRandomCodeMap.equals(that.ticketRecRandomCodeMap))
        return false;
    }

    boolean this_present_channelId = true;
    boolean that_present_channelId = true;
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (this.channelId != that.channelId)
        return false;
    }

    boolean this_present_recTicketChannelName = true && this.isSetRecTicketChannelName();
    boolean that_present_recTicketChannelName = true && that.isSetRecTicketChannelName();
    if (this_present_recTicketChannelName || that_present_recTicketChannelName) {
      if (!(this_present_recTicketChannelName && that_present_recTicketChannelName))
        return false;
      if (!this.recTicketChannelName.equals(that.recTicketChannelName))
        return false;
    }

    boolean this_present_recTicketChannelId = true && this.isSetRecTicketChannelId();
    boolean that_present_recTicketChannelId = true && that.isSetRecTicketChannelId();
    if (this_present_recTicketChannelId || that_present_recTicketChannelId) {
      if (!(this_present_recTicketChannelId && that_present_recTicketChannelId))
        return false;
      if (this.recTicketChannelId != that.recTicketChannelId)
        return false;
    }

    boolean this_present_recTicketUserName = true && this.isSetRecTicketUserName();
    boolean that_present_recTicketUserName = true && that.isSetRecTicketUserName();
    if (this_present_recTicketUserName || that_present_recTicketUserName) {
      if (!(this_present_recTicketUserName && that_present_recTicketUserName))
        return false;
      if (!this.recTicketUserName.equals(that.recTicketUserName))
        return false;
    }

    boolean this_present_recTicketUserId = true;
    boolean that_present_recTicketUserId = true;
    if (this_present_recTicketUserId || that_present_recTicketUserId) {
      if (!(this_present_recTicketUserId && that_present_recTicketUserId))
        return false;
      if (this.recTicketUserId != that.recTicketUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_exOrderId = true && (isSetExOrderId());
    list.add(present_exOrderId);
    if (present_exOrderId)
      list.add(exOrderId);

    boolean present_ticketRecStatus = true && (isSetTicketRecStatus());
    list.add(present_ticketRecStatus);
    if (present_ticketRecStatus)
      list.add(ticketRecStatus);

    boolean present_ticketRecRandomCodeMap = true && (isSetTicketRecRandomCodeMap());
    list.add(present_ticketRecRandomCodeMap);
    if (present_ticketRecRandomCodeMap)
      list.add(ticketRecRandomCodeMap);

    boolean present_channelId = true;
    list.add(present_channelId);
    if (present_channelId)
      list.add(channelId);

    boolean present_recTicketChannelName = true && (isSetRecTicketChannelName());
    list.add(present_recTicketChannelName);
    if (present_recTicketChannelName)
      list.add(recTicketChannelName);

    boolean present_recTicketChannelId = true && (isSetRecTicketChannelId());
    list.add(present_recTicketChannelId);
    if (present_recTicketChannelId)
      list.add(recTicketChannelId);

    boolean present_recTicketUserName = true && (isSetRecTicketUserName());
    list.add(present_recTicketUserName);
    if (present_recTicketUserName)
      list.add(recTicketUserName);

    boolean present_recTicketUserId = true;
    list.add(present_recTicketUserId);
    if (present_recTicketUserId)
      list.add(recTicketUserId);

    return list.hashCode();
  }

  @Override
  public int compareTo(TChangeTicketRecStatusByExOrderIdReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExOrderId()).compareTo(other.isSetExOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOrderId, other.exOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecStatus()).compareTo(other.isSetTicketRecStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecStatus, other.ticketRecStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecRandomCodeMap()).compareTo(other.isSetTicketRecRandomCodeMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecRandomCodeMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecRandomCodeMap, other.ticketRecRandomCodeMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecTicketChannelName()).compareTo(other.isSetRecTicketChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecTicketChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recTicketChannelName, other.recTicketChannelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecTicketChannelId()).compareTo(other.isSetRecTicketChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecTicketChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recTicketChannelId, other.recTicketChannelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecTicketUserName()).compareTo(other.isSetRecTicketUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecTicketUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recTicketUserName, other.recTicketUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecTicketUserId()).compareTo(other.isSetRecTicketUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecTicketUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recTicketUserId, other.recTicketUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TChangeTicketRecStatusByExOrderIdReq(");
    boolean first = true;

    sb.append("exOrderId:");
    if (this.exOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.exOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketRecStatus:");
    if (this.ticketRecStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketRecStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketRecRandomCodeMap:");
    if (this.ticketRecRandomCodeMap == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketRecRandomCodeMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelId:");
    sb.append(this.channelId);
    first = false;
    if (isSetRecTicketChannelName()) {
      if (!first) sb.append(", ");
      sb.append("recTicketChannelName:");
      if (this.recTicketChannelName == null) {
        sb.append("null");
      } else {
        sb.append(this.recTicketChannelName);
      }
      first = false;
    }
    if (isSetRecTicketChannelId()) {
      if (!first) sb.append(", ");
      sb.append("recTicketChannelId:");
      sb.append(this.recTicketChannelId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("recTicketUserName:");
    if (this.recTicketUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.recTicketUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recTicketUserId:");
    sb.append(this.recTicketUserId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (exOrderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exOrderId' was not present! Struct: " + toString());
    }
    if (ticketRecStatus == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketRecStatus' was not present! Struct: " + toString());
    }
    if (ticketRecRandomCodeMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketRecRandomCodeMap' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'channelId' because it's a primitive and you chose the non-beans generator.
    if (recTicketUserName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recTicketUserName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'recTicketUserId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TChangeTicketRecStatusByExOrderIdReqStandardSchemeFactory implements SchemeFactory {
    public TChangeTicketRecStatusByExOrderIdReqStandardScheme getScheme() {
      return new TChangeTicketRecStatusByExOrderIdReqStandardScheme();
    }
  }

  private static class TChangeTicketRecStatusByExOrderIdReqStandardScheme extends StandardScheme<TChangeTicketRecStatusByExOrderIdReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TChangeTicketRecStatusByExOrderIdReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EX_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exOrderId = iprot.readString();
              struct.setExOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_REC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecStatus = iprot.readString();
              struct.setTicketRecStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_REC_RANDOM_CODE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.ticketRecRandomCodeMap = new HashMap<Long,String>(2*_map0.size);
                long _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI64();
                  _val2 = iprot.readString();
                  struct.ticketRecRandomCodeMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setTicketRecRandomCodeMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.channelId = iprot.readI64();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REC_TICKET_CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recTicketChannelName = iprot.readString();
              struct.setRecTicketChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REC_TICKET_CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recTicketChannelId = iprot.readI64();
              struct.setRecTicketChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REC_TICKET_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recTicketUserName = iprot.readString();
              struct.setRecTicketUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REC_TICKET_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recTicketUserId = iprot.readI64();
              struct.setRecTicketUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetChannelId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRecTicketUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'recTicketUserId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TChangeTicketRecStatusByExOrderIdReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exOrderId != null) {
        oprot.writeFieldBegin(EX_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.exOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketRecStatus != null) {
        oprot.writeFieldBegin(TICKET_REC_STATUS_FIELD_DESC);
        oprot.writeString(struct.ticketRecStatus);
        oprot.writeFieldEnd();
      }
      if (struct.ticketRecRandomCodeMap != null) {
        oprot.writeFieldBegin(TICKET_REC_RANDOM_CODE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.ticketRecRandomCodeMap.size()));
          for (Map.Entry<Long, String> _iter4 : struct.ticketRecRandomCodeMap.entrySet())
          {
            oprot.writeI64(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
      oprot.writeI64(struct.channelId);
      oprot.writeFieldEnd();
      if (struct.recTicketChannelName != null) {
        if (struct.isSetRecTicketChannelName()) {
          oprot.writeFieldBegin(REC_TICKET_CHANNEL_NAME_FIELD_DESC);
          oprot.writeString(struct.recTicketChannelName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecTicketChannelId()) {
        oprot.writeFieldBegin(REC_TICKET_CHANNEL_ID_FIELD_DESC);
        oprot.writeI64(struct.recTicketChannelId);
        oprot.writeFieldEnd();
      }
      if (struct.recTicketUserName != null) {
        oprot.writeFieldBegin(REC_TICKET_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.recTicketUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_TICKET_USER_ID_FIELD_DESC);
      oprot.writeI64(struct.recTicketUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TChangeTicketRecStatusByExOrderIdReqTupleSchemeFactory implements SchemeFactory {
    public TChangeTicketRecStatusByExOrderIdReqTupleScheme getScheme() {
      return new TChangeTicketRecStatusByExOrderIdReqTupleScheme();
    }
  }

  private static class TChangeTicketRecStatusByExOrderIdReqTupleScheme extends TupleScheme<TChangeTicketRecStatusByExOrderIdReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TChangeTicketRecStatusByExOrderIdReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.exOrderId);
      oprot.writeString(struct.ticketRecStatus);
      {
        oprot.writeI32(struct.ticketRecRandomCodeMap.size());
        for (Map.Entry<Long, String> _iter5 : struct.ticketRecRandomCodeMap.entrySet())
        {
          oprot.writeI64(_iter5.getKey());
          oprot.writeString(_iter5.getValue());
        }
      }
      oprot.writeI64(struct.channelId);
      oprot.writeString(struct.recTicketUserName);
      oprot.writeI64(struct.recTicketUserId);
      BitSet optionals = new BitSet();
      if (struct.isSetRecTicketChannelName()) {
        optionals.set(0);
      }
      if (struct.isSetRecTicketChannelId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRecTicketChannelName()) {
        oprot.writeString(struct.recTicketChannelName);
      }
      if (struct.isSetRecTicketChannelId()) {
        oprot.writeI64(struct.recTicketChannelId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TChangeTicketRecStatusByExOrderIdReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.exOrderId = iprot.readString();
      struct.setExOrderIdIsSet(true);
      struct.ticketRecStatus = iprot.readString();
      struct.setTicketRecStatusIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.ticketRecRandomCodeMap = new HashMap<Long,String>(2*_map6.size);
        long _key7;
        String _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = iprot.readI64();
          _val8 = iprot.readString();
          struct.ticketRecRandomCodeMap.put(_key7, _val8);
        }
      }
      struct.setTicketRecRandomCodeMapIsSet(true);
      struct.channelId = iprot.readI64();
      struct.setChannelIdIsSet(true);
      struct.recTicketUserName = iprot.readString();
      struct.setRecTicketUserNameIsSet(true);
      struct.recTicketUserId = iprot.readI64();
      struct.setRecTicketUserIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.recTicketChannelName = iprot.readString();
        struct.setRecTicketChannelNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.recTicketChannelId = iprot.readI64();
        struct.setRecTicketChannelIdIsSet(true);
      }
    }
  }

}

