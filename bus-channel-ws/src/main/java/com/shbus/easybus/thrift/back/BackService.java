/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.back;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-03")
public class BackService {

  public interface Iface {

    /**
     * 申请退票  ---外部调用【发送消息】-- 如果自动退票上了 则异步自动退票
     * @author Administrator
     * @throws Exception
     * 
     * @param trefundorderapplyreq
     */
    public TRefundOrderApplyResp refundOrderApply(TRefundOrderApplyReq trefundorderapplyreq) throws org.apache.thrift.TException;

    /**
     * 修改退款金额
     * @author Administrator
     * 
     * @param tchangerefundorderamountreq
     */
    public TChangeRefundOrderAmountResp changeRefundOrderAmount(TChangeRefundOrderAmountReq tchangerefundorderamountreq) throws org.apache.thrift.TException;

    /**
     * 修改退改状态 退票成功  失败 两种状态【发送消息】-- 需要异步更新线路
     * @author Administrator
     * @throws Exception
     * 
     * @param tchangerefundorderstatusreq
     */
    public TChangeRefundOrderStatusResp changeRefundOrderStatus(TChangeRefundOrderStatusReq tchangerefundorderstatusreq) throws org.apache.thrift.TException;

    /**
     * 修改出票状态  出票成功失败两种状态【发送消息】-- 需要异步更新线路
     * @author Administrator
     * @throws Exception
     * 
     * @param tchangeticketstatusreq
     */
    public TChangeTicketStatusResp changeTicketStatus(TChangeTicketStatusReq tchangeticketstatusreq) throws org.apache.thrift.TException;

    /**
     * 修改订单取票状态--- 已取票 未取票【发送消息】
     * @author Administrator
     * @throws Exception
     * 
     * @param tchangeticketrecstatusreq
     */
    public TChangeTicketRecStatusResp changeTicketRecStatus(TChangeTicketRecStatusReq tchangeticketrecstatusreq) throws org.apache.thrift.TException;

    /**
     * 生成取票随机码 12位 有几张票生成几张 格式为 ：12位数字-index
     * @author Administrator
     * @return 返回 String[]
     * @throws Exception
     * 
     * @param tgenerateticketrecrandomreq
     */
    public TGenerateTicketRecRandomResp generateTicketRecRandom(TGenerateTicketRecRandomReq tgenerateticketrecrandomreq) throws org.apache.thrift.TException;

    /**
     * 修改出票状态  根据外部订单号---------------------ok
     * @author Administrator
     * @throws Exception
     * @throws Exception
     * 
     * @param tchangeticketstatusbyexorderidreq
     */
    public TChangeTicketStatusByExOrderIdResp changeTicketStatusByExOrderId(TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq) throws org.apache.thrift.TException;

    /**
     * 根据外部订单号修改退票状态
     * @author lixun
     * @date 2014-3-22 下午12:27:31
     * @param changerefundorderstatusbyexorderidreq
     * @return
     * @throws Exception
     * 
     * @param tchangerefundorderstatusbyexorderidreq
     */
    public TChangeRefundOrderStatusByExOrderIdResp changeRefundOrderStatusByExOrderId(TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq) throws org.apache.thrift.TException;

    /**
     * 修改订单取票状态 根据外部订单号--- 已取票 未取票【发送消息】---------------------ok
     * @author Administrator
     * @throws Exception
     * 
     * @param tchangeticketrecstatusbyexorderidreq
     */
    public TChangeTicketRecStatusByExOrderIdResp changeTicketRecStatusByExOrderId(TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void refundOrderApply(TRefundOrderApplyReq trefundorderapplyreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeRefundOrderAmount(TChangeRefundOrderAmountReq tchangerefundorderamountreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeRefundOrderStatus(TChangeRefundOrderStatusReq tchangerefundorderstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeTicketStatus(TChangeTicketStatusReq tchangeticketstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeTicketRecStatus(TChangeTicketRecStatusReq tchangeticketrecstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generateTicketRecRandom(TGenerateTicketRecRandomReq tgenerateticketrecrandomreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeTicketStatusByExOrderId(TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeRefundOrderStatusByExOrderId(TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeTicketRecStatusByExOrderId(TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TRefundOrderApplyResp refundOrderApply(TRefundOrderApplyReq trefundorderapplyreq) throws org.apache.thrift.TException
    {
      send_refundOrderApply(trefundorderapplyreq);
      return recv_refundOrderApply();
    }

    public void send_refundOrderApply(TRefundOrderApplyReq trefundorderapplyreq) throws org.apache.thrift.TException
    {
      refundOrderApply_args args = new refundOrderApply_args();
      args.setTrefundorderapplyreq(trefundorderapplyreq);
      sendBase("refundOrderApply", args);
    }

    public TRefundOrderApplyResp recv_refundOrderApply() throws org.apache.thrift.TException
    {
      refundOrderApply_result result = new refundOrderApply_result();
      receiveBase(result, "refundOrderApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refundOrderApply failed: unknown result");
    }

    public TChangeRefundOrderAmountResp changeRefundOrderAmount(TChangeRefundOrderAmountReq tchangerefundorderamountreq) throws org.apache.thrift.TException
    {
      send_changeRefundOrderAmount(tchangerefundorderamountreq);
      return recv_changeRefundOrderAmount();
    }

    public void send_changeRefundOrderAmount(TChangeRefundOrderAmountReq tchangerefundorderamountreq) throws org.apache.thrift.TException
    {
      changeRefundOrderAmount_args args = new changeRefundOrderAmount_args();
      args.setTchangerefundorderamountreq(tchangerefundorderamountreq);
      sendBase("changeRefundOrderAmount", args);
    }

    public TChangeRefundOrderAmountResp recv_changeRefundOrderAmount() throws org.apache.thrift.TException
    {
      changeRefundOrderAmount_result result = new changeRefundOrderAmount_result();
      receiveBase(result, "changeRefundOrderAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeRefundOrderAmount failed: unknown result");
    }

    public TChangeRefundOrderStatusResp changeRefundOrderStatus(TChangeRefundOrderStatusReq tchangerefundorderstatusreq) throws org.apache.thrift.TException
    {
      send_changeRefundOrderStatus(tchangerefundorderstatusreq);
      return recv_changeRefundOrderStatus();
    }

    public void send_changeRefundOrderStatus(TChangeRefundOrderStatusReq tchangerefundorderstatusreq) throws org.apache.thrift.TException
    {
      changeRefundOrderStatus_args args = new changeRefundOrderStatus_args();
      args.setTchangerefundorderstatusreq(tchangerefundorderstatusreq);
      sendBase("changeRefundOrderStatus", args);
    }

    public TChangeRefundOrderStatusResp recv_changeRefundOrderStatus() throws org.apache.thrift.TException
    {
      changeRefundOrderStatus_result result = new changeRefundOrderStatus_result();
      receiveBase(result, "changeRefundOrderStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeRefundOrderStatus failed: unknown result");
    }

    public TChangeTicketStatusResp changeTicketStatus(TChangeTicketStatusReq tchangeticketstatusreq) throws org.apache.thrift.TException
    {
      send_changeTicketStatus(tchangeticketstatusreq);
      return recv_changeTicketStatus();
    }

    public void send_changeTicketStatus(TChangeTicketStatusReq tchangeticketstatusreq) throws org.apache.thrift.TException
    {
      changeTicketStatus_args args = new changeTicketStatus_args();
      args.setTchangeticketstatusreq(tchangeticketstatusreq);
      sendBase("changeTicketStatus", args);
    }

    public TChangeTicketStatusResp recv_changeTicketStatus() throws org.apache.thrift.TException
    {
      changeTicketStatus_result result = new changeTicketStatus_result();
      receiveBase(result, "changeTicketStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeTicketStatus failed: unknown result");
    }

    public TChangeTicketRecStatusResp changeTicketRecStatus(TChangeTicketRecStatusReq tchangeticketrecstatusreq) throws org.apache.thrift.TException
    {
      send_changeTicketRecStatus(tchangeticketrecstatusreq);
      return recv_changeTicketRecStatus();
    }

    public void send_changeTicketRecStatus(TChangeTicketRecStatusReq tchangeticketrecstatusreq) throws org.apache.thrift.TException
    {
      changeTicketRecStatus_args args = new changeTicketRecStatus_args();
      args.setTchangeticketrecstatusreq(tchangeticketrecstatusreq);
      sendBase("changeTicketRecStatus", args);
    }

    public TChangeTicketRecStatusResp recv_changeTicketRecStatus() throws org.apache.thrift.TException
    {
      changeTicketRecStatus_result result = new changeTicketRecStatus_result();
      receiveBase(result, "changeTicketRecStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeTicketRecStatus failed: unknown result");
    }

    public TGenerateTicketRecRandomResp generateTicketRecRandom(TGenerateTicketRecRandomReq tgenerateticketrecrandomreq) throws org.apache.thrift.TException
    {
      send_generateTicketRecRandom(tgenerateticketrecrandomreq);
      return recv_generateTicketRecRandom();
    }

    public void send_generateTicketRecRandom(TGenerateTicketRecRandomReq tgenerateticketrecrandomreq) throws org.apache.thrift.TException
    {
      generateTicketRecRandom_args args = new generateTicketRecRandom_args();
      args.setTgenerateticketrecrandomreq(tgenerateticketrecrandomreq);
      sendBase("generateTicketRecRandom", args);
    }

    public TGenerateTicketRecRandomResp recv_generateTicketRecRandom() throws org.apache.thrift.TException
    {
      generateTicketRecRandom_result result = new generateTicketRecRandom_result();
      receiveBase(result, "generateTicketRecRandom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateTicketRecRandom failed: unknown result");
    }

    public TChangeTicketStatusByExOrderIdResp changeTicketStatusByExOrderId(TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq) throws org.apache.thrift.TException
    {
      send_changeTicketStatusByExOrderId(tchangeticketstatusbyexorderidreq);
      return recv_changeTicketStatusByExOrderId();
    }

    public void send_changeTicketStatusByExOrderId(TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq) throws org.apache.thrift.TException
    {
      changeTicketStatusByExOrderId_args args = new changeTicketStatusByExOrderId_args();
      args.setTchangeticketstatusbyexorderidreq(tchangeticketstatusbyexorderidreq);
      sendBase("changeTicketStatusByExOrderId", args);
    }

    public TChangeTicketStatusByExOrderIdResp recv_changeTicketStatusByExOrderId() throws org.apache.thrift.TException
    {
      changeTicketStatusByExOrderId_result result = new changeTicketStatusByExOrderId_result();
      receiveBase(result, "changeTicketStatusByExOrderId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeTicketStatusByExOrderId failed: unknown result");
    }

    public TChangeRefundOrderStatusByExOrderIdResp changeRefundOrderStatusByExOrderId(TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq) throws org.apache.thrift.TException
    {
      send_changeRefundOrderStatusByExOrderId(tchangerefundorderstatusbyexorderidreq);
      return recv_changeRefundOrderStatusByExOrderId();
    }

    public void send_changeRefundOrderStatusByExOrderId(TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq) throws org.apache.thrift.TException
    {
      changeRefundOrderStatusByExOrderId_args args = new changeRefundOrderStatusByExOrderId_args();
      args.setTchangerefundorderstatusbyexorderidreq(tchangerefundorderstatusbyexorderidreq);
      sendBase("changeRefundOrderStatusByExOrderId", args);
    }

    public TChangeRefundOrderStatusByExOrderIdResp recv_changeRefundOrderStatusByExOrderId() throws org.apache.thrift.TException
    {
      changeRefundOrderStatusByExOrderId_result result = new changeRefundOrderStatusByExOrderId_result();
      receiveBase(result, "changeRefundOrderStatusByExOrderId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeRefundOrderStatusByExOrderId failed: unknown result");
    }

    public TChangeTicketRecStatusByExOrderIdResp changeTicketRecStatusByExOrderId(TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq) throws org.apache.thrift.TException
    {
      send_changeTicketRecStatusByExOrderId(tchangeticketrecstatusbyexorderidreq);
      return recv_changeTicketRecStatusByExOrderId();
    }

    public void send_changeTicketRecStatusByExOrderId(TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq) throws org.apache.thrift.TException
    {
      changeTicketRecStatusByExOrderId_args args = new changeTicketRecStatusByExOrderId_args();
      args.setTchangeticketrecstatusbyexorderidreq(tchangeticketrecstatusbyexorderidreq);
      sendBase("changeTicketRecStatusByExOrderId", args);
    }

    public TChangeTicketRecStatusByExOrderIdResp recv_changeTicketRecStatusByExOrderId() throws org.apache.thrift.TException
    {
      changeTicketRecStatusByExOrderId_result result = new changeTicketRecStatusByExOrderId_result();
      receiveBase(result, "changeTicketRecStatusByExOrderId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeTicketRecStatusByExOrderId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void refundOrderApply(TRefundOrderApplyReq trefundorderapplyreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refundOrderApply_call method_call = new refundOrderApply_call(trefundorderapplyreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refundOrderApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRefundOrderApplyReq trefundorderapplyreq;
      public refundOrderApply_call(TRefundOrderApplyReq trefundorderapplyreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.trefundorderapplyreq = trefundorderapplyreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refundOrderApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refundOrderApply_args args = new refundOrderApply_args();
        args.setTrefundorderapplyreq(trefundorderapplyreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TRefundOrderApplyResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refundOrderApply();
      }
    }

    public void changeRefundOrderAmount(TChangeRefundOrderAmountReq tchangerefundorderamountreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeRefundOrderAmount_call method_call = new changeRefundOrderAmount_call(tchangerefundorderamountreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeRefundOrderAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TChangeRefundOrderAmountReq tchangerefundorderamountreq;
      public changeRefundOrderAmount_call(TChangeRefundOrderAmountReq tchangerefundorderamountreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tchangerefundorderamountreq = tchangerefundorderamountreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeRefundOrderAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeRefundOrderAmount_args args = new changeRefundOrderAmount_args();
        args.setTchangerefundorderamountreq(tchangerefundorderamountreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TChangeRefundOrderAmountResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeRefundOrderAmount();
      }
    }

    public void changeRefundOrderStatus(TChangeRefundOrderStatusReq tchangerefundorderstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeRefundOrderStatus_call method_call = new changeRefundOrderStatus_call(tchangerefundorderstatusreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeRefundOrderStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TChangeRefundOrderStatusReq tchangerefundorderstatusreq;
      public changeRefundOrderStatus_call(TChangeRefundOrderStatusReq tchangerefundorderstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tchangerefundorderstatusreq = tchangerefundorderstatusreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeRefundOrderStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeRefundOrderStatus_args args = new changeRefundOrderStatus_args();
        args.setTchangerefundorderstatusreq(tchangerefundorderstatusreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TChangeRefundOrderStatusResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeRefundOrderStatus();
      }
    }

    public void changeTicketStatus(TChangeTicketStatusReq tchangeticketstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeTicketStatus_call method_call = new changeTicketStatus_call(tchangeticketstatusreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeTicketStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TChangeTicketStatusReq tchangeticketstatusreq;
      public changeTicketStatus_call(TChangeTicketStatusReq tchangeticketstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tchangeticketstatusreq = tchangeticketstatusreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeTicketStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeTicketStatus_args args = new changeTicketStatus_args();
        args.setTchangeticketstatusreq(tchangeticketstatusreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TChangeTicketStatusResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeTicketStatus();
      }
    }

    public void changeTicketRecStatus(TChangeTicketRecStatusReq tchangeticketrecstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeTicketRecStatus_call method_call = new changeTicketRecStatus_call(tchangeticketrecstatusreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeTicketRecStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TChangeTicketRecStatusReq tchangeticketrecstatusreq;
      public changeTicketRecStatus_call(TChangeTicketRecStatusReq tchangeticketrecstatusreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tchangeticketrecstatusreq = tchangeticketrecstatusreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeTicketRecStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeTicketRecStatus_args args = new changeTicketRecStatus_args();
        args.setTchangeticketrecstatusreq(tchangeticketrecstatusreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TChangeTicketRecStatusResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeTicketRecStatus();
      }
    }

    public void generateTicketRecRandom(TGenerateTicketRecRandomReq tgenerateticketrecrandomreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateTicketRecRandom_call method_call = new generateTicketRecRandom_call(tgenerateticketrecrandomreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateTicketRecRandom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TGenerateTicketRecRandomReq tgenerateticketrecrandomreq;
      public generateTicketRecRandom_call(TGenerateTicketRecRandomReq tgenerateticketrecrandomreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tgenerateticketrecrandomreq = tgenerateticketrecrandomreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateTicketRecRandom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateTicketRecRandom_args args = new generateTicketRecRandom_args();
        args.setTgenerateticketrecrandomreq(tgenerateticketrecrandomreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGenerateTicketRecRandomResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateTicketRecRandom();
      }
    }

    public void changeTicketStatusByExOrderId(TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeTicketStatusByExOrderId_call method_call = new changeTicketStatusByExOrderId_call(tchangeticketstatusbyexorderidreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeTicketStatusByExOrderId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq;
      public changeTicketStatusByExOrderId_call(TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tchangeticketstatusbyexorderidreq = tchangeticketstatusbyexorderidreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeTicketStatusByExOrderId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeTicketStatusByExOrderId_args args = new changeTicketStatusByExOrderId_args();
        args.setTchangeticketstatusbyexorderidreq(tchangeticketstatusbyexorderidreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TChangeTicketStatusByExOrderIdResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeTicketStatusByExOrderId();
      }
    }

    public void changeRefundOrderStatusByExOrderId(TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeRefundOrderStatusByExOrderId_call method_call = new changeRefundOrderStatusByExOrderId_call(tchangerefundorderstatusbyexorderidreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeRefundOrderStatusByExOrderId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq;
      public changeRefundOrderStatusByExOrderId_call(TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tchangerefundorderstatusbyexorderidreq = tchangerefundorderstatusbyexorderidreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeRefundOrderStatusByExOrderId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeRefundOrderStatusByExOrderId_args args = new changeRefundOrderStatusByExOrderId_args();
        args.setTchangerefundorderstatusbyexorderidreq(tchangerefundorderstatusbyexorderidreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TChangeRefundOrderStatusByExOrderIdResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeRefundOrderStatusByExOrderId();
      }
    }

    public void changeTicketRecStatusByExOrderId(TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeTicketRecStatusByExOrderId_call method_call = new changeTicketRecStatusByExOrderId_call(tchangeticketrecstatusbyexorderidreq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeTicketRecStatusByExOrderId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq;
      public changeTicketRecStatusByExOrderId_call(TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tchangeticketrecstatusbyexorderidreq = tchangeticketrecstatusbyexorderidreq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeTicketRecStatusByExOrderId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeTicketRecStatusByExOrderId_args args = new changeTicketRecStatusByExOrderId_args();
        args.setTchangeticketrecstatusbyexorderidreq(tchangeticketrecstatusbyexorderidreq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TChangeTicketRecStatusByExOrderIdResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeTicketRecStatusByExOrderId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("refundOrderApply", new refundOrderApply());
      processMap.put("changeRefundOrderAmount", new changeRefundOrderAmount());
      processMap.put("changeRefundOrderStatus", new changeRefundOrderStatus());
      processMap.put("changeTicketStatus", new changeTicketStatus());
      processMap.put("changeTicketRecStatus", new changeTicketRecStatus());
      processMap.put("generateTicketRecRandom", new generateTicketRecRandom());
      processMap.put("changeTicketStatusByExOrderId", new changeTicketStatusByExOrderId());
      processMap.put("changeRefundOrderStatusByExOrderId", new changeRefundOrderStatusByExOrderId());
      processMap.put("changeTicketRecStatusByExOrderId", new changeTicketRecStatusByExOrderId());
      return processMap;
    }

    public static class refundOrderApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refundOrderApply_args> {
      public refundOrderApply() {
        super("refundOrderApply");
      }

      public refundOrderApply_args getEmptyArgsInstance() {
        return new refundOrderApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refundOrderApply_result getResult(I iface, refundOrderApply_args args) throws org.apache.thrift.TException {
        refundOrderApply_result result = new refundOrderApply_result();
        result.success = iface.refundOrderApply(args.trefundorderapplyreq);
        return result;
      }
    }

    public static class changeRefundOrderAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeRefundOrderAmount_args> {
      public changeRefundOrderAmount() {
        super("changeRefundOrderAmount");
      }

      public changeRefundOrderAmount_args getEmptyArgsInstance() {
        return new changeRefundOrderAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeRefundOrderAmount_result getResult(I iface, changeRefundOrderAmount_args args) throws org.apache.thrift.TException {
        changeRefundOrderAmount_result result = new changeRefundOrderAmount_result();
        result.success = iface.changeRefundOrderAmount(args.tchangerefundorderamountreq);
        return result;
      }
    }

    public static class changeRefundOrderStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeRefundOrderStatus_args> {
      public changeRefundOrderStatus() {
        super("changeRefundOrderStatus");
      }

      public changeRefundOrderStatus_args getEmptyArgsInstance() {
        return new changeRefundOrderStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeRefundOrderStatus_result getResult(I iface, changeRefundOrderStatus_args args) throws org.apache.thrift.TException {
        changeRefundOrderStatus_result result = new changeRefundOrderStatus_result();
        result.success = iface.changeRefundOrderStatus(args.tchangerefundorderstatusreq);
        return result;
      }
    }

    public static class changeTicketStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeTicketStatus_args> {
      public changeTicketStatus() {
        super("changeTicketStatus");
      }

      public changeTicketStatus_args getEmptyArgsInstance() {
        return new changeTicketStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeTicketStatus_result getResult(I iface, changeTicketStatus_args args) throws org.apache.thrift.TException {
        changeTicketStatus_result result = new changeTicketStatus_result();
        result.success = iface.changeTicketStatus(args.tchangeticketstatusreq);
        return result;
      }
    }

    public static class changeTicketRecStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeTicketRecStatus_args> {
      public changeTicketRecStatus() {
        super("changeTicketRecStatus");
      }

      public changeTicketRecStatus_args getEmptyArgsInstance() {
        return new changeTicketRecStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeTicketRecStatus_result getResult(I iface, changeTicketRecStatus_args args) throws org.apache.thrift.TException {
        changeTicketRecStatus_result result = new changeTicketRecStatus_result();
        result.success = iface.changeTicketRecStatus(args.tchangeticketrecstatusreq);
        return result;
      }
    }

    public static class generateTicketRecRandom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateTicketRecRandom_args> {
      public generateTicketRecRandom() {
        super("generateTicketRecRandom");
      }

      public generateTicketRecRandom_args getEmptyArgsInstance() {
        return new generateTicketRecRandom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateTicketRecRandom_result getResult(I iface, generateTicketRecRandom_args args) throws org.apache.thrift.TException {
        generateTicketRecRandom_result result = new generateTicketRecRandom_result();
        result.success = iface.generateTicketRecRandom(args.tgenerateticketrecrandomreq);
        return result;
      }
    }

    public static class changeTicketStatusByExOrderId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeTicketStatusByExOrderId_args> {
      public changeTicketStatusByExOrderId() {
        super("changeTicketStatusByExOrderId");
      }

      public changeTicketStatusByExOrderId_args getEmptyArgsInstance() {
        return new changeTicketStatusByExOrderId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeTicketStatusByExOrderId_result getResult(I iface, changeTicketStatusByExOrderId_args args) throws org.apache.thrift.TException {
        changeTicketStatusByExOrderId_result result = new changeTicketStatusByExOrderId_result();
        result.success = iface.changeTicketStatusByExOrderId(args.tchangeticketstatusbyexorderidreq);
        return result;
      }
    }

    public static class changeRefundOrderStatusByExOrderId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeRefundOrderStatusByExOrderId_args> {
      public changeRefundOrderStatusByExOrderId() {
        super("changeRefundOrderStatusByExOrderId");
      }

      public changeRefundOrderStatusByExOrderId_args getEmptyArgsInstance() {
        return new changeRefundOrderStatusByExOrderId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeRefundOrderStatusByExOrderId_result getResult(I iface, changeRefundOrderStatusByExOrderId_args args) throws org.apache.thrift.TException {
        changeRefundOrderStatusByExOrderId_result result = new changeRefundOrderStatusByExOrderId_result();
        result.success = iface.changeRefundOrderStatusByExOrderId(args.tchangerefundorderstatusbyexorderidreq);
        return result;
      }
    }

    public static class changeTicketRecStatusByExOrderId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeTicketRecStatusByExOrderId_args> {
      public changeTicketRecStatusByExOrderId() {
        super("changeTicketRecStatusByExOrderId");
      }

      public changeTicketRecStatusByExOrderId_args getEmptyArgsInstance() {
        return new changeTicketRecStatusByExOrderId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeTicketRecStatusByExOrderId_result getResult(I iface, changeTicketRecStatusByExOrderId_args args) throws org.apache.thrift.TException {
        changeTicketRecStatusByExOrderId_result result = new changeTicketRecStatusByExOrderId_result();
        result.success = iface.changeTicketRecStatusByExOrderId(args.tchangeticketrecstatusbyexorderidreq);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("refundOrderApply", new refundOrderApply());
      processMap.put("changeRefundOrderAmount", new changeRefundOrderAmount());
      processMap.put("changeRefundOrderStatus", new changeRefundOrderStatus());
      processMap.put("changeTicketStatus", new changeTicketStatus());
      processMap.put("changeTicketRecStatus", new changeTicketRecStatus());
      processMap.put("generateTicketRecRandom", new generateTicketRecRandom());
      processMap.put("changeTicketStatusByExOrderId", new changeTicketStatusByExOrderId());
      processMap.put("changeRefundOrderStatusByExOrderId", new changeRefundOrderStatusByExOrderId());
      processMap.put("changeTicketRecStatusByExOrderId", new changeTicketRecStatusByExOrderId());
      return processMap;
    }

    public static class refundOrderApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, refundOrderApply_args, TRefundOrderApplyResp> {
      public refundOrderApply() {
        super("refundOrderApply");
      }

      public refundOrderApply_args getEmptyArgsInstance() {
        return new refundOrderApply_args();
      }

      public AsyncMethodCallback<TRefundOrderApplyResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TRefundOrderApplyResp>() { 
          public void onComplete(TRefundOrderApplyResp o) {
            refundOrderApply_result result = new refundOrderApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            refundOrderApply_result result = new refundOrderApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, refundOrderApply_args args, org.apache.thrift.async.AsyncMethodCallback<TRefundOrderApplyResp> resultHandler) throws TException {
        iface.refundOrderApply(args.trefundorderapplyreq,resultHandler);
      }
    }

    public static class changeRefundOrderAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeRefundOrderAmount_args, TChangeRefundOrderAmountResp> {
      public changeRefundOrderAmount() {
        super("changeRefundOrderAmount");
      }

      public changeRefundOrderAmount_args getEmptyArgsInstance() {
        return new changeRefundOrderAmount_args();
      }

      public AsyncMethodCallback<TChangeRefundOrderAmountResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TChangeRefundOrderAmountResp>() { 
          public void onComplete(TChangeRefundOrderAmountResp o) {
            changeRefundOrderAmount_result result = new changeRefundOrderAmount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeRefundOrderAmount_result result = new changeRefundOrderAmount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeRefundOrderAmount_args args, org.apache.thrift.async.AsyncMethodCallback<TChangeRefundOrderAmountResp> resultHandler) throws TException {
        iface.changeRefundOrderAmount(args.tchangerefundorderamountreq,resultHandler);
      }
    }

    public static class changeRefundOrderStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeRefundOrderStatus_args, TChangeRefundOrderStatusResp> {
      public changeRefundOrderStatus() {
        super("changeRefundOrderStatus");
      }

      public changeRefundOrderStatus_args getEmptyArgsInstance() {
        return new changeRefundOrderStatus_args();
      }

      public AsyncMethodCallback<TChangeRefundOrderStatusResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TChangeRefundOrderStatusResp>() { 
          public void onComplete(TChangeRefundOrderStatusResp o) {
            changeRefundOrderStatus_result result = new changeRefundOrderStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeRefundOrderStatus_result result = new changeRefundOrderStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeRefundOrderStatus_args args, org.apache.thrift.async.AsyncMethodCallback<TChangeRefundOrderStatusResp> resultHandler) throws TException {
        iface.changeRefundOrderStatus(args.tchangerefundorderstatusreq,resultHandler);
      }
    }

    public static class changeTicketStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeTicketStatus_args, TChangeTicketStatusResp> {
      public changeTicketStatus() {
        super("changeTicketStatus");
      }

      public changeTicketStatus_args getEmptyArgsInstance() {
        return new changeTicketStatus_args();
      }

      public AsyncMethodCallback<TChangeTicketStatusResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TChangeTicketStatusResp>() { 
          public void onComplete(TChangeTicketStatusResp o) {
            changeTicketStatus_result result = new changeTicketStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeTicketStatus_result result = new changeTicketStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeTicketStatus_args args, org.apache.thrift.async.AsyncMethodCallback<TChangeTicketStatusResp> resultHandler) throws TException {
        iface.changeTicketStatus(args.tchangeticketstatusreq,resultHandler);
      }
    }

    public static class changeTicketRecStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeTicketRecStatus_args, TChangeTicketRecStatusResp> {
      public changeTicketRecStatus() {
        super("changeTicketRecStatus");
      }

      public changeTicketRecStatus_args getEmptyArgsInstance() {
        return new changeTicketRecStatus_args();
      }

      public AsyncMethodCallback<TChangeTicketRecStatusResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TChangeTicketRecStatusResp>() { 
          public void onComplete(TChangeTicketRecStatusResp o) {
            changeTicketRecStatus_result result = new changeTicketRecStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeTicketRecStatus_result result = new changeTicketRecStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeTicketRecStatus_args args, org.apache.thrift.async.AsyncMethodCallback<TChangeTicketRecStatusResp> resultHandler) throws TException {
        iface.changeTicketRecStatus(args.tchangeticketrecstatusreq,resultHandler);
      }
    }

    public static class generateTicketRecRandom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateTicketRecRandom_args, TGenerateTicketRecRandomResp> {
      public generateTicketRecRandom() {
        super("generateTicketRecRandom");
      }

      public generateTicketRecRandom_args getEmptyArgsInstance() {
        return new generateTicketRecRandom_args();
      }

      public AsyncMethodCallback<TGenerateTicketRecRandomResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGenerateTicketRecRandomResp>() { 
          public void onComplete(TGenerateTicketRecRandomResp o) {
            generateTicketRecRandom_result result = new generateTicketRecRandom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generateTicketRecRandom_result result = new generateTicketRecRandom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generateTicketRecRandom_args args, org.apache.thrift.async.AsyncMethodCallback<TGenerateTicketRecRandomResp> resultHandler) throws TException {
        iface.generateTicketRecRandom(args.tgenerateticketrecrandomreq,resultHandler);
      }
    }

    public static class changeTicketStatusByExOrderId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeTicketStatusByExOrderId_args, TChangeTicketStatusByExOrderIdResp> {
      public changeTicketStatusByExOrderId() {
        super("changeTicketStatusByExOrderId");
      }

      public changeTicketStatusByExOrderId_args getEmptyArgsInstance() {
        return new changeTicketStatusByExOrderId_args();
      }

      public AsyncMethodCallback<TChangeTicketStatusByExOrderIdResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TChangeTicketStatusByExOrderIdResp>() { 
          public void onComplete(TChangeTicketStatusByExOrderIdResp o) {
            changeTicketStatusByExOrderId_result result = new changeTicketStatusByExOrderId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeTicketStatusByExOrderId_result result = new changeTicketStatusByExOrderId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeTicketStatusByExOrderId_args args, org.apache.thrift.async.AsyncMethodCallback<TChangeTicketStatusByExOrderIdResp> resultHandler) throws TException {
        iface.changeTicketStatusByExOrderId(args.tchangeticketstatusbyexorderidreq,resultHandler);
      }
    }

    public static class changeRefundOrderStatusByExOrderId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeRefundOrderStatusByExOrderId_args, TChangeRefundOrderStatusByExOrderIdResp> {
      public changeRefundOrderStatusByExOrderId() {
        super("changeRefundOrderStatusByExOrderId");
      }

      public changeRefundOrderStatusByExOrderId_args getEmptyArgsInstance() {
        return new changeRefundOrderStatusByExOrderId_args();
      }

      public AsyncMethodCallback<TChangeRefundOrderStatusByExOrderIdResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TChangeRefundOrderStatusByExOrderIdResp>() { 
          public void onComplete(TChangeRefundOrderStatusByExOrderIdResp o) {
            changeRefundOrderStatusByExOrderId_result result = new changeRefundOrderStatusByExOrderId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeRefundOrderStatusByExOrderId_result result = new changeRefundOrderStatusByExOrderId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeRefundOrderStatusByExOrderId_args args, org.apache.thrift.async.AsyncMethodCallback<TChangeRefundOrderStatusByExOrderIdResp> resultHandler) throws TException {
        iface.changeRefundOrderStatusByExOrderId(args.tchangerefundorderstatusbyexorderidreq,resultHandler);
      }
    }

    public static class changeTicketRecStatusByExOrderId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeTicketRecStatusByExOrderId_args, TChangeTicketRecStatusByExOrderIdResp> {
      public changeTicketRecStatusByExOrderId() {
        super("changeTicketRecStatusByExOrderId");
      }

      public changeTicketRecStatusByExOrderId_args getEmptyArgsInstance() {
        return new changeTicketRecStatusByExOrderId_args();
      }

      public AsyncMethodCallback<TChangeTicketRecStatusByExOrderIdResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TChangeTicketRecStatusByExOrderIdResp>() { 
          public void onComplete(TChangeTicketRecStatusByExOrderIdResp o) {
            changeTicketRecStatusByExOrderId_result result = new changeTicketRecStatusByExOrderId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeTicketRecStatusByExOrderId_result result = new changeTicketRecStatusByExOrderId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeTicketRecStatusByExOrderId_args args, org.apache.thrift.async.AsyncMethodCallback<TChangeTicketRecStatusByExOrderIdResp> resultHandler) throws TException {
        iface.changeTicketRecStatusByExOrderId(args.tchangeticketrecstatusbyexorderidreq,resultHandler);
      }
    }

  }

  public static class refundOrderApply_args implements org.apache.thrift.TBase<refundOrderApply_args, refundOrderApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<refundOrderApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundOrderApply_args");

    private static final org.apache.thrift.protocol.TField TREFUNDORDERAPPLYREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("trefundorderapplyreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundOrderApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundOrderApply_argsTupleSchemeFactory());
    }

    public TRefundOrderApplyReq trefundorderapplyreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREFUNDORDERAPPLYREQ((short)1, "trefundorderapplyreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREFUNDORDERAPPLYREQ
            return TREFUNDORDERAPPLYREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREFUNDORDERAPPLYREQ, new org.apache.thrift.meta_data.FieldMetaData("trefundorderapplyreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRefundOrderApplyReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundOrderApply_args.class, metaDataMap);
    }

    public refundOrderApply_args() {
    }

    public refundOrderApply_args(
      TRefundOrderApplyReq trefundorderapplyreq)
    {
      this();
      this.trefundorderapplyreq = trefundorderapplyreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundOrderApply_args(refundOrderApply_args other) {
      if (other.isSetTrefundorderapplyreq()) {
        this.trefundorderapplyreq = new TRefundOrderApplyReq(other.trefundorderapplyreq);
      }
    }

    public refundOrderApply_args deepCopy() {
      return new refundOrderApply_args(this);
    }

    @Override
    public void clear() {
      this.trefundorderapplyreq = null;
    }

    public TRefundOrderApplyReq getTrefundorderapplyreq() {
      return this.trefundorderapplyreq;
    }

    public refundOrderApply_args setTrefundorderapplyreq(TRefundOrderApplyReq trefundorderapplyreq) {
      this.trefundorderapplyreq = trefundorderapplyreq;
      return this;
    }

    public void unsetTrefundorderapplyreq() {
      this.trefundorderapplyreq = null;
    }

    /** Returns true if field trefundorderapplyreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTrefundorderapplyreq() {
      return this.trefundorderapplyreq != null;
    }

    public void setTrefundorderapplyreqIsSet(boolean value) {
      if (!value) {
        this.trefundorderapplyreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREFUNDORDERAPPLYREQ:
        if (value == null) {
          unsetTrefundorderapplyreq();
        } else {
          setTrefundorderapplyreq((TRefundOrderApplyReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREFUNDORDERAPPLYREQ:
        return getTrefundorderapplyreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREFUNDORDERAPPLYREQ:
        return isSetTrefundorderapplyreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundOrderApply_args)
        return this.equals((refundOrderApply_args)that);
      return false;
    }

    public boolean equals(refundOrderApply_args that) {
      if (that == null)
        return false;

      boolean this_present_trefundorderapplyreq = true && this.isSetTrefundorderapplyreq();
      boolean that_present_trefundorderapplyreq = true && that.isSetTrefundorderapplyreq();
      if (this_present_trefundorderapplyreq || that_present_trefundorderapplyreq) {
        if (!(this_present_trefundorderapplyreq && that_present_trefundorderapplyreq))
          return false;
        if (!this.trefundorderapplyreq.equals(that.trefundorderapplyreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_trefundorderapplyreq = true && (isSetTrefundorderapplyreq());
      list.add(present_trefundorderapplyreq);
      if (present_trefundorderapplyreq)
        list.add(trefundorderapplyreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundOrderApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTrefundorderapplyreq()).compareTo(other.isSetTrefundorderapplyreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrefundorderapplyreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trefundorderapplyreq, other.trefundorderapplyreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundOrderApply_args(");
      boolean first = true;

      sb.append("trefundorderapplyreq:");
      if (this.trefundorderapplyreq == null) {
        sb.append("null");
      } else {
        sb.append(this.trefundorderapplyreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (trefundorderapplyreq != null) {
        trefundorderapplyreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundOrderApply_argsStandardSchemeFactory implements SchemeFactory {
      public refundOrderApply_argsStandardScheme getScheme() {
        return new refundOrderApply_argsStandardScheme();
      }
    }

    private static class refundOrderApply_argsStandardScheme extends StandardScheme<refundOrderApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundOrderApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREFUNDORDERAPPLYREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.trefundorderapplyreq = new TRefundOrderApplyReq();
                struct.trefundorderapplyreq.read(iprot);
                struct.setTrefundorderapplyreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundOrderApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.trefundorderapplyreq != null) {
          oprot.writeFieldBegin(TREFUNDORDERAPPLYREQ_FIELD_DESC);
          struct.trefundorderapplyreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundOrderApply_argsTupleSchemeFactory implements SchemeFactory {
      public refundOrderApply_argsTupleScheme getScheme() {
        return new refundOrderApply_argsTupleScheme();
      }
    }

    private static class refundOrderApply_argsTupleScheme extends TupleScheme<refundOrderApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundOrderApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTrefundorderapplyreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTrefundorderapplyreq()) {
          struct.trefundorderapplyreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundOrderApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.trefundorderapplyreq = new TRefundOrderApplyReq();
          struct.trefundorderapplyreq.read(iprot);
          struct.setTrefundorderapplyreqIsSet(true);
        }
      }
    }

  }

  public static class refundOrderApply_result implements org.apache.thrift.TBase<refundOrderApply_result, refundOrderApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<refundOrderApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundOrderApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundOrderApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundOrderApply_resultTupleSchemeFactory());
    }

    public TRefundOrderApplyResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRefundOrderApplyResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundOrderApply_result.class, metaDataMap);
    }

    public refundOrderApply_result() {
    }

    public refundOrderApply_result(
      TRefundOrderApplyResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundOrderApply_result(refundOrderApply_result other) {
      if (other.isSetSuccess()) {
        this.success = new TRefundOrderApplyResp(other.success);
      }
    }

    public refundOrderApply_result deepCopy() {
      return new refundOrderApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TRefundOrderApplyResp getSuccess() {
      return this.success;
    }

    public refundOrderApply_result setSuccess(TRefundOrderApplyResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TRefundOrderApplyResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundOrderApply_result)
        return this.equals((refundOrderApply_result)that);
      return false;
    }

    public boolean equals(refundOrderApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundOrderApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundOrderApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundOrderApply_resultStandardSchemeFactory implements SchemeFactory {
      public refundOrderApply_resultStandardScheme getScheme() {
        return new refundOrderApply_resultStandardScheme();
      }
    }

    private static class refundOrderApply_resultStandardScheme extends StandardScheme<refundOrderApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundOrderApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TRefundOrderApplyResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundOrderApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundOrderApply_resultTupleSchemeFactory implements SchemeFactory {
      public refundOrderApply_resultTupleScheme getScheme() {
        return new refundOrderApply_resultTupleScheme();
      }
    }

    private static class refundOrderApply_resultTupleScheme extends TupleScheme<refundOrderApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundOrderApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundOrderApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TRefundOrderApplyResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeRefundOrderAmount_args implements org.apache.thrift.TBase<changeRefundOrderAmount_args, changeRefundOrderAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeRefundOrderAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeRefundOrderAmount_args");

    private static final org.apache.thrift.protocol.TField TCHANGEREFUNDORDERAMOUNTREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tchangerefundorderamountreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeRefundOrderAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeRefundOrderAmount_argsTupleSchemeFactory());
    }

    public TChangeRefundOrderAmountReq tchangerefundorderamountreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TCHANGEREFUNDORDERAMOUNTREQ((short)1, "tchangerefundorderamountreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TCHANGEREFUNDORDERAMOUNTREQ
            return TCHANGEREFUNDORDERAMOUNTREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TCHANGEREFUNDORDERAMOUNTREQ, new org.apache.thrift.meta_data.FieldMetaData("tchangerefundorderamountreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeRefundOrderAmountReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeRefundOrderAmount_args.class, metaDataMap);
    }

    public changeRefundOrderAmount_args() {
    }

    public changeRefundOrderAmount_args(
      TChangeRefundOrderAmountReq tchangerefundorderamountreq)
    {
      this();
      this.tchangerefundorderamountreq = tchangerefundorderamountreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeRefundOrderAmount_args(changeRefundOrderAmount_args other) {
      if (other.isSetTchangerefundorderamountreq()) {
        this.tchangerefundorderamountreq = new TChangeRefundOrderAmountReq(other.tchangerefundorderamountreq);
      }
    }

    public changeRefundOrderAmount_args deepCopy() {
      return new changeRefundOrderAmount_args(this);
    }

    @Override
    public void clear() {
      this.tchangerefundorderamountreq = null;
    }

    public TChangeRefundOrderAmountReq getTchangerefundorderamountreq() {
      return this.tchangerefundorderamountreq;
    }

    public changeRefundOrderAmount_args setTchangerefundorderamountreq(TChangeRefundOrderAmountReq tchangerefundorderamountreq) {
      this.tchangerefundorderamountreq = tchangerefundorderamountreq;
      return this;
    }

    public void unsetTchangerefundorderamountreq() {
      this.tchangerefundorderamountreq = null;
    }

    /** Returns true if field tchangerefundorderamountreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTchangerefundorderamountreq() {
      return this.tchangerefundorderamountreq != null;
    }

    public void setTchangerefundorderamountreqIsSet(boolean value) {
      if (!value) {
        this.tchangerefundorderamountreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TCHANGEREFUNDORDERAMOUNTREQ:
        if (value == null) {
          unsetTchangerefundorderamountreq();
        } else {
          setTchangerefundorderamountreq((TChangeRefundOrderAmountReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TCHANGEREFUNDORDERAMOUNTREQ:
        return getTchangerefundorderamountreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TCHANGEREFUNDORDERAMOUNTREQ:
        return isSetTchangerefundorderamountreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeRefundOrderAmount_args)
        return this.equals((changeRefundOrderAmount_args)that);
      return false;
    }

    public boolean equals(changeRefundOrderAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_tchangerefundorderamountreq = true && this.isSetTchangerefundorderamountreq();
      boolean that_present_tchangerefundorderamountreq = true && that.isSetTchangerefundorderamountreq();
      if (this_present_tchangerefundorderamountreq || that_present_tchangerefundorderamountreq) {
        if (!(this_present_tchangerefundorderamountreq && that_present_tchangerefundorderamountreq))
          return false;
        if (!this.tchangerefundorderamountreq.equals(that.tchangerefundorderamountreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tchangerefundorderamountreq = true && (isSetTchangerefundorderamountreq());
      list.add(present_tchangerefundorderamountreq);
      if (present_tchangerefundorderamountreq)
        list.add(tchangerefundorderamountreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeRefundOrderAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTchangerefundorderamountreq()).compareTo(other.isSetTchangerefundorderamountreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTchangerefundorderamountreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tchangerefundorderamountreq, other.tchangerefundorderamountreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeRefundOrderAmount_args(");
      boolean first = true;

      sb.append("tchangerefundorderamountreq:");
      if (this.tchangerefundorderamountreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tchangerefundorderamountreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tchangerefundorderamountreq != null) {
        tchangerefundorderamountreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeRefundOrderAmount_argsStandardSchemeFactory implements SchemeFactory {
      public changeRefundOrderAmount_argsStandardScheme getScheme() {
        return new changeRefundOrderAmount_argsStandardScheme();
      }
    }

    private static class changeRefundOrderAmount_argsStandardScheme extends StandardScheme<changeRefundOrderAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeRefundOrderAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TCHANGEREFUNDORDERAMOUNTREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tchangerefundorderamountreq = new TChangeRefundOrderAmountReq();
                struct.tchangerefundorderamountreq.read(iprot);
                struct.setTchangerefundorderamountreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeRefundOrderAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tchangerefundorderamountreq != null) {
          oprot.writeFieldBegin(TCHANGEREFUNDORDERAMOUNTREQ_FIELD_DESC);
          struct.tchangerefundorderamountreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeRefundOrderAmount_argsTupleSchemeFactory implements SchemeFactory {
      public changeRefundOrderAmount_argsTupleScheme getScheme() {
        return new changeRefundOrderAmount_argsTupleScheme();
      }
    }

    private static class changeRefundOrderAmount_argsTupleScheme extends TupleScheme<changeRefundOrderAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTchangerefundorderamountreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTchangerefundorderamountreq()) {
          struct.tchangerefundorderamountreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tchangerefundorderamountreq = new TChangeRefundOrderAmountReq();
          struct.tchangerefundorderamountreq.read(iprot);
          struct.setTchangerefundorderamountreqIsSet(true);
        }
      }
    }

  }

  public static class changeRefundOrderAmount_result implements org.apache.thrift.TBase<changeRefundOrderAmount_result, changeRefundOrderAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeRefundOrderAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeRefundOrderAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeRefundOrderAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeRefundOrderAmount_resultTupleSchemeFactory());
    }

    public TChangeRefundOrderAmountResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeRefundOrderAmountResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeRefundOrderAmount_result.class, metaDataMap);
    }

    public changeRefundOrderAmount_result() {
    }

    public changeRefundOrderAmount_result(
      TChangeRefundOrderAmountResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeRefundOrderAmount_result(changeRefundOrderAmount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TChangeRefundOrderAmountResp(other.success);
      }
    }

    public changeRefundOrderAmount_result deepCopy() {
      return new changeRefundOrderAmount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TChangeRefundOrderAmountResp getSuccess() {
      return this.success;
    }

    public changeRefundOrderAmount_result setSuccess(TChangeRefundOrderAmountResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TChangeRefundOrderAmountResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeRefundOrderAmount_result)
        return this.equals((changeRefundOrderAmount_result)that);
      return false;
    }

    public boolean equals(changeRefundOrderAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeRefundOrderAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeRefundOrderAmount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeRefundOrderAmount_resultStandardSchemeFactory implements SchemeFactory {
      public changeRefundOrderAmount_resultStandardScheme getScheme() {
        return new changeRefundOrderAmount_resultStandardScheme();
      }
    }

    private static class changeRefundOrderAmount_resultStandardScheme extends StandardScheme<changeRefundOrderAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeRefundOrderAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TChangeRefundOrderAmountResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeRefundOrderAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeRefundOrderAmount_resultTupleSchemeFactory implements SchemeFactory {
      public changeRefundOrderAmount_resultTupleScheme getScheme() {
        return new changeRefundOrderAmount_resultTupleScheme();
      }
    }

    private static class changeRefundOrderAmount_resultTupleScheme extends TupleScheme<changeRefundOrderAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TChangeRefundOrderAmountResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeRefundOrderStatus_args implements org.apache.thrift.TBase<changeRefundOrderStatus_args, changeRefundOrderStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeRefundOrderStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeRefundOrderStatus_args");

    private static final org.apache.thrift.protocol.TField TCHANGEREFUNDORDERSTATUSREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tchangerefundorderstatusreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeRefundOrderStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeRefundOrderStatus_argsTupleSchemeFactory());
    }

    public TChangeRefundOrderStatusReq tchangerefundorderstatusreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TCHANGEREFUNDORDERSTATUSREQ((short)1, "tchangerefundorderstatusreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TCHANGEREFUNDORDERSTATUSREQ
            return TCHANGEREFUNDORDERSTATUSREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TCHANGEREFUNDORDERSTATUSREQ, new org.apache.thrift.meta_data.FieldMetaData("tchangerefundorderstatusreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeRefundOrderStatusReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeRefundOrderStatus_args.class, metaDataMap);
    }

    public changeRefundOrderStatus_args() {
    }

    public changeRefundOrderStatus_args(
      TChangeRefundOrderStatusReq tchangerefundorderstatusreq)
    {
      this();
      this.tchangerefundorderstatusreq = tchangerefundorderstatusreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeRefundOrderStatus_args(changeRefundOrderStatus_args other) {
      if (other.isSetTchangerefundorderstatusreq()) {
        this.tchangerefundorderstatusreq = new TChangeRefundOrderStatusReq(other.tchangerefundorderstatusreq);
      }
    }

    public changeRefundOrderStatus_args deepCopy() {
      return new changeRefundOrderStatus_args(this);
    }

    @Override
    public void clear() {
      this.tchangerefundorderstatusreq = null;
    }

    public TChangeRefundOrderStatusReq getTchangerefundorderstatusreq() {
      return this.tchangerefundorderstatusreq;
    }

    public changeRefundOrderStatus_args setTchangerefundorderstatusreq(TChangeRefundOrderStatusReq tchangerefundorderstatusreq) {
      this.tchangerefundorderstatusreq = tchangerefundorderstatusreq;
      return this;
    }

    public void unsetTchangerefundorderstatusreq() {
      this.tchangerefundorderstatusreq = null;
    }

    /** Returns true if field tchangerefundorderstatusreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTchangerefundorderstatusreq() {
      return this.tchangerefundorderstatusreq != null;
    }

    public void setTchangerefundorderstatusreqIsSet(boolean value) {
      if (!value) {
        this.tchangerefundorderstatusreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TCHANGEREFUNDORDERSTATUSREQ:
        if (value == null) {
          unsetTchangerefundorderstatusreq();
        } else {
          setTchangerefundorderstatusreq((TChangeRefundOrderStatusReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TCHANGEREFUNDORDERSTATUSREQ:
        return getTchangerefundorderstatusreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TCHANGEREFUNDORDERSTATUSREQ:
        return isSetTchangerefundorderstatusreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeRefundOrderStatus_args)
        return this.equals((changeRefundOrderStatus_args)that);
      return false;
    }

    public boolean equals(changeRefundOrderStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_tchangerefundorderstatusreq = true && this.isSetTchangerefundorderstatusreq();
      boolean that_present_tchangerefundorderstatusreq = true && that.isSetTchangerefundorderstatusreq();
      if (this_present_tchangerefundorderstatusreq || that_present_tchangerefundorderstatusreq) {
        if (!(this_present_tchangerefundorderstatusreq && that_present_tchangerefundorderstatusreq))
          return false;
        if (!this.tchangerefundorderstatusreq.equals(that.tchangerefundorderstatusreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tchangerefundorderstatusreq = true && (isSetTchangerefundorderstatusreq());
      list.add(present_tchangerefundorderstatusreq);
      if (present_tchangerefundorderstatusreq)
        list.add(tchangerefundorderstatusreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeRefundOrderStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTchangerefundorderstatusreq()).compareTo(other.isSetTchangerefundorderstatusreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTchangerefundorderstatusreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tchangerefundorderstatusreq, other.tchangerefundorderstatusreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeRefundOrderStatus_args(");
      boolean first = true;

      sb.append("tchangerefundorderstatusreq:");
      if (this.tchangerefundorderstatusreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tchangerefundorderstatusreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tchangerefundorderstatusreq != null) {
        tchangerefundorderstatusreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeRefundOrderStatus_argsStandardSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatus_argsStandardScheme getScheme() {
        return new changeRefundOrderStatus_argsStandardScheme();
      }
    }

    private static class changeRefundOrderStatus_argsStandardScheme extends StandardScheme<changeRefundOrderStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeRefundOrderStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TCHANGEREFUNDORDERSTATUSREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tchangerefundorderstatusreq = new TChangeRefundOrderStatusReq();
                struct.tchangerefundorderstatusreq.read(iprot);
                struct.setTchangerefundorderstatusreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeRefundOrderStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tchangerefundorderstatusreq != null) {
          oprot.writeFieldBegin(TCHANGEREFUNDORDERSTATUSREQ_FIELD_DESC);
          struct.tchangerefundorderstatusreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeRefundOrderStatus_argsTupleSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatus_argsTupleScheme getScheme() {
        return new changeRefundOrderStatus_argsTupleScheme();
      }
    }

    private static class changeRefundOrderStatus_argsTupleScheme extends TupleScheme<changeRefundOrderStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTchangerefundorderstatusreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTchangerefundorderstatusreq()) {
          struct.tchangerefundorderstatusreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tchangerefundorderstatusreq = new TChangeRefundOrderStatusReq();
          struct.tchangerefundorderstatusreq.read(iprot);
          struct.setTchangerefundorderstatusreqIsSet(true);
        }
      }
    }

  }

  public static class changeRefundOrderStatus_result implements org.apache.thrift.TBase<changeRefundOrderStatus_result, changeRefundOrderStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeRefundOrderStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeRefundOrderStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeRefundOrderStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeRefundOrderStatus_resultTupleSchemeFactory());
    }

    public TChangeRefundOrderStatusResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeRefundOrderStatusResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeRefundOrderStatus_result.class, metaDataMap);
    }

    public changeRefundOrderStatus_result() {
    }

    public changeRefundOrderStatus_result(
      TChangeRefundOrderStatusResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeRefundOrderStatus_result(changeRefundOrderStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new TChangeRefundOrderStatusResp(other.success);
      }
    }

    public changeRefundOrderStatus_result deepCopy() {
      return new changeRefundOrderStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TChangeRefundOrderStatusResp getSuccess() {
      return this.success;
    }

    public changeRefundOrderStatus_result setSuccess(TChangeRefundOrderStatusResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TChangeRefundOrderStatusResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeRefundOrderStatus_result)
        return this.equals((changeRefundOrderStatus_result)that);
      return false;
    }

    public boolean equals(changeRefundOrderStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeRefundOrderStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeRefundOrderStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeRefundOrderStatus_resultStandardSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatus_resultStandardScheme getScheme() {
        return new changeRefundOrderStatus_resultStandardScheme();
      }
    }

    private static class changeRefundOrderStatus_resultStandardScheme extends StandardScheme<changeRefundOrderStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeRefundOrderStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TChangeRefundOrderStatusResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeRefundOrderStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeRefundOrderStatus_resultTupleSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatus_resultTupleScheme getScheme() {
        return new changeRefundOrderStatus_resultTupleScheme();
      }
    }

    private static class changeRefundOrderStatus_resultTupleScheme extends TupleScheme<changeRefundOrderStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TChangeRefundOrderStatusResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeTicketStatus_args implements org.apache.thrift.TBase<changeTicketStatus_args, changeTicketStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketStatus_args");

    private static final org.apache.thrift.protocol.TField TCHANGETICKETSTATUSREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tchangeticketstatusreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketStatus_argsTupleSchemeFactory());
    }

    public TChangeTicketStatusReq tchangeticketstatusreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TCHANGETICKETSTATUSREQ((short)1, "tchangeticketstatusreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TCHANGETICKETSTATUSREQ
            return TCHANGETICKETSTATUSREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TCHANGETICKETSTATUSREQ, new org.apache.thrift.meta_data.FieldMetaData("tchangeticketstatusreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketStatusReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketStatus_args.class, metaDataMap);
    }

    public changeTicketStatus_args() {
    }

    public changeTicketStatus_args(
      TChangeTicketStatusReq tchangeticketstatusreq)
    {
      this();
      this.tchangeticketstatusreq = tchangeticketstatusreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketStatus_args(changeTicketStatus_args other) {
      if (other.isSetTchangeticketstatusreq()) {
        this.tchangeticketstatusreq = new TChangeTicketStatusReq(other.tchangeticketstatusreq);
      }
    }

    public changeTicketStatus_args deepCopy() {
      return new changeTicketStatus_args(this);
    }

    @Override
    public void clear() {
      this.tchangeticketstatusreq = null;
    }

    public TChangeTicketStatusReq getTchangeticketstatusreq() {
      return this.tchangeticketstatusreq;
    }

    public changeTicketStatus_args setTchangeticketstatusreq(TChangeTicketStatusReq tchangeticketstatusreq) {
      this.tchangeticketstatusreq = tchangeticketstatusreq;
      return this;
    }

    public void unsetTchangeticketstatusreq() {
      this.tchangeticketstatusreq = null;
    }

    /** Returns true if field tchangeticketstatusreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTchangeticketstatusreq() {
      return this.tchangeticketstatusreq != null;
    }

    public void setTchangeticketstatusreqIsSet(boolean value) {
      if (!value) {
        this.tchangeticketstatusreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TCHANGETICKETSTATUSREQ:
        if (value == null) {
          unsetTchangeticketstatusreq();
        } else {
          setTchangeticketstatusreq((TChangeTicketStatusReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TCHANGETICKETSTATUSREQ:
        return getTchangeticketstatusreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TCHANGETICKETSTATUSREQ:
        return isSetTchangeticketstatusreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketStatus_args)
        return this.equals((changeTicketStatus_args)that);
      return false;
    }

    public boolean equals(changeTicketStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_tchangeticketstatusreq = true && this.isSetTchangeticketstatusreq();
      boolean that_present_tchangeticketstatusreq = true && that.isSetTchangeticketstatusreq();
      if (this_present_tchangeticketstatusreq || that_present_tchangeticketstatusreq) {
        if (!(this_present_tchangeticketstatusreq && that_present_tchangeticketstatusreq))
          return false;
        if (!this.tchangeticketstatusreq.equals(that.tchangeticketstatusreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tchangeticketstatusreq = true && (isSetTchangeticketstatusreq());
      list.add(present_tchangeticketstatusreq);
      if (present_tchangeticketstatusreq)
        list.add(tchangeticketstatusreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTchangeticketstatusreq()).compareTo(other.isSetTchangeticketstatusreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTchangeticketstatusreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tchangeticketstatusreq, other.tchangeticketstatusreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketStatus_args(");
      boolean first = true;

      sb.append("tchangeticketstatusreq:");
      if (this.tchangeticketstatusreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tchangeticketstatusreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tchangeticketstatusreq != null) {
        tchangeticketstatusreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketStatus_argsStandardSchemeFactory implements SchemeFactory {
      public changeTicketStatus_argsStandardScheme getScheme() {
        return new changeTicketStatus_argsStandardScheme();
      }
    }

    private static class changeTicketStatus_argsStandardScheme extends StandardScheme<changeTicketStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TCHANGETICKETSTATUSREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tchangeticketstatusreq = new TChangeTicketStatusReq();
                struct.tchangeticketstatusreq.read(iprot);
                struct.setTchangeticketstatusreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tchangeticketstatusreq != null) {
          oprot.writeFieldBegin(TCHANGETICKETSTATUSREQ_FIELD_DESC);
          struct.tchangeticketstatusreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketStatus_argsTupleSchemeFactory implements SchemeFactory {
      public changeTicketStatus_argsTupleScheme getScheme() {
        return new changeTicketStatus_argsTupleScheme();
      }
    }

    private static class changeTicketStatus_argsTupleScheme extends TupleScheme<changeTicketStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTchangeticketstatusreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTchangeticketstatusreq()) {
          struct.tchangeticketstatusreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tchangeticketstatusreq = new TChangeTicketStatusReq();
          struct.tchangeticketstatusreq.read(iprot);
          struct.setTchangeticketstatusreqIsSet(true);
        }
      }
    }

  }

  public static class changeTicketStatus_result implements org.apache.thrift.TBase<changeTicketStatus_result, changeTicketStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketStatus_resultTupleSchemeFactory());
    }

    public TChangeTicketStatusResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketStatusResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketStatus_result.class, metaDataMap);
    }

    public changeTicketStatus_result() {
    }

    public changeTicketStatus_result(
      TChangeTicketStatusResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketStatus_result(changeTicketStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new TChangeTicketStatusResp(other.success);
      }
    }

    public changeTicketStatus_result deepCopy() {
      return new changeTicketStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TChangeTicketStatusResp getSuccess() {
      return this.success;
    }

    public changeTicketStatus_result setSuccess(TChangeTicketStatusResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TChangeTicketStatusResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketStatus_result)
        return this.equals((changeTicketStatus_result)that);
      return false;
    }

    public boolean equals(changeTicketStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketStatus_resultStandardSchemeFactory implements SchemeFactory {
      public changeTicketStatus_resultStandardScheme getScheme() {
        return new changeTicketStatus_resultStandardScheme();
      }
    }

    private static class changeTicketStatus_resultStandardScheme extends StandardScheme<changeTicketStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TChangeTicketStatusResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketStatus_resultTupleSchemeFactory implements SchemeFactory {
      public changeTicketStatus_resultTupleScheme getScheme() {
        return new changeTicketStatus_resultTupleScheme();
      }
    }

    private static class changeTicketStatus_resultTupleScheme extends TupleScheme<changeTicketStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TChangeTicketStatusResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeTicketRecStatus_args implements org.apache.thrift.TBase<changeTicketRecStatus_args, changeTicketRecStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketRecStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketRecStatus_args");

    private static final org.apache.thrift.protocol.TField TCHANGETICKETRECSTATUSREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tchangeticketrecstatusreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketRecStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketRecStatus_argsTupleSchemeFactory());
    }

    public TChangeTicketRecStatusReq tchangeticketrecstatusreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TCHANGETICKETRECSTATUSREQ((short)1, "tchangeticketrecstatusreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TCHANGETICKETRECSTATUSREQ
            return TCHANGETICKETRECSTATUSREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TCHANGETICKETRECSTATUSREQ, new org.apache.thrift.meta_data.FieldMetaData("tchangeticketrecstatusreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketRecStatusReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketRecStatus_args.class, metaDataMap);
    }

    public changeTicketRecStatus_args() {
    }

    public changeTicketRecStatus_args(
      TChangeTicketRecStatusReq tchangeticketrecstatusreq)
    {
      this();
      this.tchangeticketrecstatusreq = tchangeticketrecstatusreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketRecStatus_args(changeTicketRecStatus_args other) {
      if (other.isSetTchangeticketrecstatusreq()) {
        this.tchangeticketrecstatusreq = new TChangeTicketRecStatusReq(other.tchangeticketrecstatusreq);
      }
    }

    public changeTicketRecStatus_args deepCopy() {
      return new changeTicketRecStatus_args(this);
    }

    @Override
    public void clear() {
      this.tchangeticketrecstatusreq = null;
    }

    public TChangeTicketRecStatusReq getTchangeticketrecstatusreq() {
      return this.tchangeticketrecstatusreq;
    }

    public changeTicketRecStatus_args setTchangeticketrecstatusreq(TChangeTicketRecStatusReq tchangeticketrecstatusreq) {
      this.tchangeticketrecstatusreq = tchangeticketrecstatusreq;
      return this;
    }

    public void unsetTchangeticketrecstatusreq() {
      this.tchangeticketrecstatusreq = null;
    }

    /** Returns true if field tchangeticketrecstatusreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTchangeticketrecstatusreq() {
      return this.tchangeticketrecstatusreq != null;
    }

    public void setTchangeticketrecstatusreqIsSet(boolean value) {
      if (!value) {
        this.tchangeticketrecstatusreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TCHANGETICKETRECSTATUSREQ:
        if (value == null) {
          unsetTchangeticketrecstatusreq();
        } else {
          setTchangeticketrecstatusreq((TChangeTicketRecStatusReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TCHANGETICKETRECSTATUSREQ:
        return getTchangeticketrecstatusreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TCHANGETICKETRECSTATUSREQ:
        return isSetTchangeticketrecstatusreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketRecStatus_args)
        return this.equals((changeTicketRecStatus_args)that);
      return false;
    }

    public boolean equals(changeTicketRecStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_tchangeticketrecstatusreq = true && this.isSetTchangeticketrecstatusreq();
      boolean that_present_tchangeticketrecstatusreq = true && that.isSetTchangeticketrecstatusreq();
      if (this_present_tchangeticketrecstatusreq || that_present_tchangeticketrecstatusreq) {
        if (!(this_present_tchangeticketrecstatusreq && that_present_tchangeticketrecstatusreq))
          return false;
        if (!this.tchangeticketrecstatusreq.equals(that.tchangeticketrecstatusreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tchangeticketrecstatusreq = true && (isSetTchangeticketrecstatusreq());
      list.add(present_tchangeticketrecstatusreq);
      if (present_tchangeticketrecstatusreq)
        list.add(tchangeticketrecstatusreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketRecStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTchangeticketrecstatusreq()).compareTo(other.isSetTchangeticketrecstatusreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTchangeticketrecstatusreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tchangeticketrecstatusreq, other.tchangeticketrecstatusreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketRecStatus_args(");
      boolean first = true;

      sb.append("tchangeticketrecstatusreq:");
      if (this.tchangeticketrecstatusreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tchangeticketrecstatusreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tchangeticketrecstatusreq != null) {
        tchangeticketrecstatusreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketRecStatus_argsStandardSchemeFactory implements SchemeFactory {
      public changeTicketRecStatus_argsStandardScheme getScheme() {
        return new changeTicketRecStatus_argsStandardScheme();
      }
    }

    private static class changeTicketRecStatus_argsStandardScheme extends StandardScheme<changeTicketRecStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketRecStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TCHANGETICKETRECSTATUSREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tchangeticketrecstatusreq = new TChangeTicketRecStatusReq();
                struct.tchangeticketrecstatusreq.read(iprot);
                struct.setTchangeticketrecstatusreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketRecStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tchangeticketrecstatusreq != null) {
          oprot.writeFieldBegin(TCHANGETICKETRECSTATUSREQ_FIELD_DESC);
          struct.tchangeticketrecstatusreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketRecStatus_argsTupleSchemeFactory implements SchemeFactory {
      public changeTicketRecStatus_argsTupleScheme getScheme() {
        return new changeTicketRecStatus_argsTupleScheme();
      }
    }

    private static class changeTicketRecStatus_argsTupleScheme extends TupleScheme<changeTicketRecStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTchangeticketrecstatusreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTchangeticketrecstatusreq()) {
          struct.tchangeticketrecstatusreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tchangeticketrecstatusreq = new TChangeTicketRecStatusReq();
          struct.tchangeticketrecstatusreq.read(iprot);
          struct.setTchangeticketrecstatusreqIsSet(true);
        }
      }
    }

  }

  public static class changeTicketRecStatus_result implements org.apache.thrift.TBase<changeTicketRecStatus_result, changeTicketRecStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketRecStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketRecStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketRecStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketRecStatus_resultTupleSchemeFactory());
    }

    public TChangeTicketRecStatusResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketRecStatusResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketRecStatus_result.class, metaDataMap);
    }

    public changeTicketRecStatus_result() {
    }

    public changeTicketRecStatus_result(
      TChangeTicketRecStatusResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketRecStatus_result(changeTicketRecStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new TChangeTicketRecStatusResp(other.success);
      }
    }

    public changeTicketRecStatus_result deepCopy() {
      return new changeTicketRecStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TChangeTicketRecStatusResp getSuccess() {
      return this.success;
    }

    public changeTicketRecStatus_result setSuccess(TChangeTicketRecStatusResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TChangeTicketRecStatusResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketRecStatus_result)
        return this.equals((changeTicketRecStatus_result)that);
      return false;
    }

    public boolean equals(changeTicketRecStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketRecStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketRecStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketRecStatus_resultStandardSchemeFactory implements SchemeFactory {
      public changeTicketRecStatus_resultStandardScheme getScheme() {
        return new changeTicketRecStatus_resultStandardScheme();
      }
    }

    private static class changeTicketRecStatus_resultStandardScheme extends StandardScheme<changeTicketRecStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketRecStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TChangeTicketRecStatusResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketRecStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketRecStatus_resultTupleSchemeFactory implements SchemeFactory {
      public changeTicketRecStatus_resultTupleScheme getScheme() {
        return new changeTicketRecStatus_resultTupleScheme();
      }
    }

    private static class changeTicketRecStatus_resultTupleScheme extends TupleScheme<changeTicketRecStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TChangeTicketRecStatusResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generateTicketRecRandom_args implements org.apache.thrift.TBase<generateTicketRecRandom_args, generateTicketRecRandom_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateTicketRecRandom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateTicketRecRandom_args");

    private static final org.apache.thrift.protocol.TField TGENERATETICKETRECRANDOMREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tgenerateticketrecrandomreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateTicketRecRandom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateTicketRecRandom_argsTupleSchemeFactory());
    }

    public TGenerateTicketRecRandomReq tgenerateticketrecrandomreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TGENERATETICKETRECRANDOMREQ((short)1, "tgenerateticketrecrandomreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TGENERATETICKETRECRANDOMREQ
            return TGENERATETICKETRECRANDOMREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TGENERATETICKETRECRANDOMREQ, new org.apache.thrift.meta_data.FieldMetaData("tgenerateticketrecrandomreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGenerateTicketRecRandomReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateTicketRecRandom_args.class, metaDataMap);
    }

    public generateTicketRecRandom_args() {
    }

    public generateTicketRecRandom_args(
      TGenerateTicketRecRandomReq tgenerateticketrecrandomreq)
    {
      this();
      this.tgenerateticketrecrandomreq = tgenerateticketrecrandomreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateTicketRecRandom_args(generateTicketRecRandom_args other) {
      if (other.isSetTgenerateticketrecrandomreq()) {
        this.tgenerateticketrecrandomreq = new TGenerateTicketRecRandomReq(other.tgenerateticketrecrandomreq);
      }
    }

    public generateTicketRecRandom_args deepCopy() {
      return new generateTicketRecRandom_args(this);
    }

    @Override
    public void clear() {
      this.tgenerateticketrecrandomreq = null;
    }

    public TGenerateTicketRecRandomReq getTgenerateticketrecrandomreq() {
      return this.tgenerateticketrecrandomreq;
    }

    public generateTicketRecRandom_args setTgenerateticketrecrandomreq(TGenerateTicketRecRandomReq tgenerateticketrecrandomreq) {
      this.tgenerateticketrecrandomreq = tgenerateticketrecrandomreq;
      return this;
    }

    public void unsetTgenerateticketrecrandomreq() {
      this.tgenerateticketrecrandomreq = null;
    }

    /** Returns true if field tgenerateticketrecrandomreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTgenerateticketrecrandomreq() {
      return this.tgenerateticketrecrandomreq != null;
    }

    public void setTgenerateticketrecrandomreqIsSet(boolean value) {
      if (!value) {
        this.tgenerateticketrecrandomreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TGENERATETICKETRECRANDOMREQ:
        if (value == null) {
          unsetTgenerateticketrecrandomreq();
        } else {
          setTgenerateticketrecrandomreq((TGenerateTicketRecRandomReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TGENERATETICKETRECRANDOMREQ:
        return getTgenerateticketrecrandomreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TGENERATETICKETRECRANDOMREQ:
        return isSetTgenerateticketrecrandomreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateTicketRecRandom_args)
        return this.equals((generateTicketRecRandom_args)that);
      return false;
    }

    public boolean equals(generateTicketRecRandom_args that) {
      if (that == null)
        return false;

      boolean this_present_tgenerateticketrecrandomreq = true && this.isSetTgenerateticketrecrandomreq();
      boolean that_present_tgenerateticketrecrandomreq = true && that.isSetTgenerateticketrecrandomreq();
      if (this_present_tgenerateticketrecrandomreq || that_present_tgenerateticketrecrandomreq) {
        if (!(this_present_tgenerateticketrecrandomreq && that_present_tgenerateticketrecrandomreq))
          return false;
        if (!this.tgenerateticketrecrandomreq.equals(that.tgenerateticketrecrandomreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tgenerateticketrecrandomreq = true && (isSetTgenerateticketrecrandomreq());
      list.add(present_tgenerateticketrecrandomreq);
      if (present_tgenerateticketrecrandomreq)
        list.add(tgenerateticketrecrandomreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(generateTicketRecRandom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTgenerateticketrecrandomreq()).compareTo(other.isSetTgenerateticketrecrandomreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTgenerateticketrecrandomreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tgenerateticketrecrandomreq, other.tgenerateticketrecrandomreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateTicketRecRandom_args(");
      boolean first = true;

      sb.append("tgenerateticketrecrandomreq:");
      if (this.tgenerateticketrecrandomreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tgenerateticketrecrandomreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tgenerateticketrecrandomreq != null) {
        tgenerateticketrecrandomreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateTicketRecRandom_argsStandardSchemeFactory implements SchemeFactory {
      public generateTicketRecRandom_argsStandardScheme getScheme() {
        return new generateTicketRecRandom_argsStandardScheme();
      }
    }

    private static class generateTicketRecRandom_argsStandardScheme extends StandardScheme<generateTicketRecRandom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateTicketRecRandom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TGENERATETICKETRECRANDOMREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tgenerateticketrecrandomreq = new TGenerateTicketRecRandomReq();
                struct.tgenerateticketrecrandomreq.read(iprot);
                struct.setTgenerateticketrecrandomreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateTicketRecRandom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tgenerateticketrecrandomreq != null) {
          oprot.writeFieldBegin(TGENERATETICKETRECRANDOMREQ_FIELD_DESC);
          struct.tgenerateticketrecrandomreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateTicketRecRandom_argsTupleSchemeFactory implements SchemeFactory {
      public generateTicketRecRandom_argsTupleScheme getScheme() {
        return new generateTicketRecRandom_argsTupleScheme();
      }
    }

    private static class generateTicketRecRandom_argsTupleScheme extends TupleScheme<generateTicketRecRandom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateTicketRecRandom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTgenerateticketrecrandomreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTgenerateticketrecrandomreq()) {
          struct.tgenerateticketrecrandomreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateTicketRecRandom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tgenerateticketrecrandomreq = new TGenerateTicketRecRandomReq();
          struct.tgenerateticketrecrandomreq.read(iprot);
          struct.setTgenerateticketrecrandomreqIsSet(true);
        }
      }
    }

  }

  public static class generateTicketRecRandom_result implements org.apache.thrift.TBase<generateTicketRecRandom_result, generateTicketRecRandom_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateTicketRecRandom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateTicketRecRandom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateTicketRecRandom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateTicketRecRandom_resultTupleSchemeFactory());
    }

    public TGenerateTicketRecRandomResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGenerateTicketRecRandomResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateTicketRecRandom_result.class, metaDataMap);
    }

    public generateTicketRecRandom_result() {
    }

    public generateTicketRecRandom_result(
      TGenerateTicketRecRandomResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateTicketRecRandom_result(generateTicketRecRandom_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGenerateTicketRecRandomResp(other.success);
      }
    }

    public generateTicketRecRandom_result deepCopy() {
      return new generateTicketRecRandom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TGenerateTicketRecRandomResp getSuccess() {
      return this.success;
    }

    public generateTicketRecRandom_result setSuccess(TGenerateTicketRecRandomResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGenerateTicketRecRandomResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateTicketRecRandom_result)
        return this.equals((generateTicketRecRandom_result)that);
      return false;
    }

    public boolean equals(generateTicketRecRandom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(generateTicketRecRandom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateTicketRecRandom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateTicketRecRandom_resultStandardSchemeFactory implements SchemeFactory {
      public generateTicketRecRandom_resultStandardScheme getScheme() {
        return new generateTicketRecRandom_resultStandardScheme();
      }
    }

    private static class generateTicketRecRandom_resultStandardScheme extends StandardScheme<generateTicketRecRandom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateTicketRecRandom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGenerateTicketRecRandomResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateTicketRecRandom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateTicketRecRandom_resultTupleSchemeFactory implements SchemeFactory {
      public generateTicketRecRandom_resultTupleScheme getScheme() {
        return new generateTicketRecRandom_resultTupleScheme();
      }
    }

    private static class generateTicketRecRandom_resultTupleScheme extends TupleScheme<generateTicketRecRandom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateTicketRecRandom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateTicketRecRandom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TGenerateTicketRecRandomResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeTicketStatusByExOrderId_args implements org.apache.thrift.TBase<changeTicketStatusByExOrderId_args, changeTicketStatusByExOrderId_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketStatusByExOrderId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketStatusByExOrderId_args");

    private static final org.apache.thrift.protocol.TField TCHANGETICKETSTATUSBYEXORDERIDREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tchangeticketstatusbyexorderidreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketStatusByExOrderId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketStatusByExOrderId_argsTupleSchemeFactory());
    }

    public TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TCHANGETICKETSTATUSBYEXORDERIDREQ((short)1, "tchangeticketstatusbyexorderidreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TCHANGETICKETSTATUSBYEXORDERIDREQ
            return TCHANGETICKETSTATUSBYEXORDERIDREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TCHANGETICKETSTATUSBYEXORDERIDREQ, new org.apache.thrift.meta_data.FieldMetaData("tchangeticketstatusbyexorderidreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketStatusByExOrderIdReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketStatusByExOrderId_args.class, metaDataMap);
    }

    public changeTicketStatusByExOrderId_args() {
    }

    public changeTicketStatusByExOrderId_args(
      TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq)
    {
      this();
      this.tchangeticketstatusbyexorderidreq = tchangeticketstatusbyexorderidreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketStatusByExOrderId_args(changeTicketStatusByExOrderId_args other) {
      if (other.isSetTchangeticketstatusbyexorderidreq()) {
        this.tchangeticketstatusbyexorderidreq = new TChangeTicketStatusByExOrderIdReq(other.tchangeticketstatusbyexorderidreq);
      }
    }

    public changeTicketStatusByExOrderId_args deepCopy() {
      return new changeTicketStatusByExOrderId_args(this);
    }

    @Override
    public void clear() {
      this.tchangeticketstatusbyexorderidreq = null;
    }

    public TChangeTicketStatusByExOrderIdReq getTchangeticketstatusbyexorderidreq() {
      return this.tchangeticketstatusbyexorderidreq;
    }

    public changeTicketStatusByExOrderId_args setTchangeticketstatusbyexorderidreq(TChangeTicketStatusByExOrderIdReq tchangeticketstatusbyexorderidreq) {
      this.tchangeticketstatusbyexorderidreq = tchangeticketstatusbyexorderidreq;
      return this;
    }

    public void unsetTchangeticketstatusbyexorderidreq() {
      this.tchangeticketstatusbyexorderidreq = null;
    }

    /** Returns true if field tchangeticketstatusbyexorderidreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTchangeticketstatusbyexorderidreq() {
      return this.tchangeticketstatusbyexorderidreq != null;
    }

    public void setTchangeticketstatusbyexorderidreqIsSet(boolean value) {
      if (!value) {
        this.tchangeticketstatusbyexorderidreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TCHANGETICKETSTATUSBYEXORDERIDREQ:
        if (value == null) {
          unsetTchangeticketstatusbyexorderidreq();
        } else {
          setTchangeticketstatusbyexorderidreq((TChangeTicketStatusByExOrderIdReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TCHANGETICKETSTATUSBYEXORDERIDREQ:
        return getTchangeticketstatusbyexorderidreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TCHANGETICKETSTATUSBYEXORDERIDREQ:
        return isSetTchangeticketstatusbyexorderidreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketStatusByExOrderId_args)
        return this.equals((changeTicketStatusByExOrderId_args)that);
      return false;
    }

    public boolean equals(changeTicketStatusByExOrderId_args that) {
      if (that == null)
        return false;

      boolean this_present_tchangeticketstatusbyexorderidreq = true && this.isSetTchangeticketstatusbyexorderidreq();
      boolean that_present_tchangeticketstatusbyexorderidreq = true && that.isSetTchangeticketstatusbyexorderidreq();
      if (this_present_tchangeticketstatusbyexorderidreq || that_present_tchangeticketstatusbyexorderidreq) {
        if (!(this_present_tchangeticketstatusbyexorderidreq && that_present_tchangeticketstatusbyexorderidreq))
          return false;
        if (!this.tchangeticketstatusbyexorderidreq.equals(that.tchangeticketstatusbyexorderidreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tchangeticketstatusbyexorderidreq = true && (isSetTchangeticketstatusbyexorderidreq());
      list.add(present_tchangeticketstatusbyexorderidreq);
      if (present_tchangeticketstatusbyexorderidreq)
        list.add(tchangeticketstatusbyexorderidreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketStatusByExOrderId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTchangeticketstatusbyexorderidreq()).compareTo(other.isSetTchangeticketstatusbyexorderidreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTchangeticketstatusbyexorderidreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tchangeticketstatusbyexorderidreq, other.tchangeticketstatusbyexorderidreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketStatusByExOrderId_args(");
      boolean first = true;

      sb.append("tchangeticketstatusbyexorderidreq:");
      if (this.tchangeticketstatusbyexorderidreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tchangeticketstatusbyexorderidreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tchangeticketstatusbyexorderidreq != null) {
        tchangeticketstatusbyexorderidreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketStatusByExOrderId_argsStandardSchemeFactory implements SchemeFactory {
      public changeTicketStatusByExOrderId_argsStandardScheme getScheme() {
        return new changeTicketStatusByExOrderId_argsStandardScheme();
      }
    }

    private static class changeTicketStatusByExOrderId_argsStandardScheme extends StandardScheme<changeTicketStatusByExOrderId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TCHANGETICKETSTATUSBYEXORDERIDREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tchangeticketstatusbyexorderidreq = new TChangeTicketStatusByExOrderIdReq();
                struct.tchangeticketstatusbyexorderidreq.read(iprot);
                struct.setTchangeticketstatusbyexorderidreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tchangeticketstatusbyexorderidreq != null) {
          oprot.writeFieldBegin(TCHANGETICKETSTATUSBYEXORDERIDREQ_FIELD_DESC);
          struct.tchangeticketstatusbyexorderidreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketStatusByExOrderId_argsTupleSchemeFactory implements SchemeFactory {
      public changeTicketStatusByExOrderId_argsTupleScheme getScheme() {
        return new changeTicketStatusByExOrderId_argsTupleScheme();
      }
    }

    private static class changeTicketStatusByExOrderId_argsTupleScheme extends TupleScheme<changeTicketStatusByExOrderId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTchangeticketstatusbyexorderidreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTchangeticketstatusbyexorderidreq()) {
          struct.tchangeticketstatusbyexorderidreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tchangeticketstatusbyexorderidreq = new TChangeTicketStatusByExOrderIdReq();
          struct.tchangeticketstatusbyexorderidreq.read(iprot);
          struct.setTchangeticketstatusbyexorderidreqIsSet(true);
        }
      }
    }

  }

  public static class changeTicketStatusByExOrderId_result implements org.apache.thrift.TBase<changeTicketStatusByExOrderId_result, changeTicketStatusByExOrderId_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketStatusByExOrderId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketStatusByExOrderId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketStatusByExOrderId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketStatusByExOrderId_resultTupleSchemeFactory());
    }

    public TChangeTicketStatusByExOrderIdResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketStatusByExOrderIdResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketStatusByExOrderId_result.class, metaDataMap);
    }

    public changeTicketStatusByExOrderId_result() {
    }

    public changeTicketStatusByExOrderId_result(
      TChangeTicketStatusByExOrderIdResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketStatusByExOrderId_result(changeTicketStatusByExOrderId_result other) {
      if (other.isSetSuccess()) {
        this.success = new TChangeTicketStatusByExOrderIdResp(other.success);
      }
    }

    public changeTicketStatusByExOrderId_result deepCopy() {
      return new changeTicketStatusByExOrderId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TChangeTicketStatusByExOrderIdResp getSuccess() {
      return this.success;
    }

    public changeTicketStatusByExOrderId_result setSuccess(TChangeTicketStatusByExOrderIdResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TChangeTicketStatusByExOrderIdResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketStatusByExOrderId_result)
        return this.equals((changeTicketStatusByExOrderId_result)that);
      return false;
    }

    public boolean equals(changeTicketStatusByExOrderId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketStatusByExOrderId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketStatusByExOrderId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketStatusByExOrderId_resultStandardSchemeFactory implements SchemeFactory {
      public changeTicketStatusByExOrderId_resultStandardScheme getScheme() {
        return new changeTicketStatusByExOrderId_resultStandardScheme();
      }
    }

    private static class changeTicketStatusByExOrderId_resultStandardScheme extends StandardScheme<changeTicketStatusByExOrderId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TChangeTicketStatusByExOrderIdResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketStatusByExOrderId_resultTupleSchemeFactory implements SchemeFactory {
      public changeTicketStatusByExOrderId_resultTupleScheme getScheme() {
        return new changeTicketStatusByExOrderId_resultTupleScheme();
      }
    }

    private static class changeTicketStatusByExOrderId_resultTupleScheme extends TupleScheme<changeTicketStatusByExOrderId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TChangeTicketStatusByExOrderIdResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeRefundOrderStatusByExOrderId_args implements org.apache.thrift.TBase<changeRefundOrderStatusByExOrderId_args, changeRefundOrderStatusByExOrderId_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeRefundOrderStatusByExOrderId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeRefundOrderStatusByExOrderId_args");

    private static final org.apache.thrift.protocol.TField TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tchangerefundorderstatusbyexorderidreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeRefundOrderStatusByExOrderId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeRefundOrderStatusByExOrderId_argsTupleSchemeFactory());
    }

    public TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ((short)1, "tchangerefundorderstatusbyexorderidreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ
            return TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ, new org.apache.thrift.meta_data.FieldMetaData("tchangerefundorderstatusbyexorderidreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeRefundOrderStatusByExOrderIdReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeRefundOrderStatusByExOrderId_args.class, metaDataMap);
    }

    public changeRefundOrderStatusByExOrderId_args() {
    }

    public changeRefundOrderStatusByExOrderId_args(
      TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq)
    {
      this();
      this.tchangerefundorderstatusbyexorderidreq = tchangerefundorderstatusbyexorderidreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeRefundOrderStatusByExOrderId_args(changeRefundOrderStatusByExOrderId_args other) {
      if (other.isSetTchangerefundorderstatusbyexorderidreq()) {
        this.tchangerefundorderstatusbyexorderidreq = new TChangeRefundOrderStatusByExOrderIdReq(other.tchangerefundorderstatusbyexorderidreq);
      }
    }

    public changeRefundOrderStatusByExOrderId_args deepCopy() {
      return new changeRefundOrderStatusByExOrderId_args(this);
    }

    @Override
    public void clear() {
      this.tchangerefundorderstatusbyexorderidreq = null;
    }

    public TChangeRefundOrderStatusByExOrderIdReq getTchangerefundorderstatusbyexorderidreq() {
      return this.tchangerefundorderstatusbyexorderidreq;
    }

    public changeRefundOrderStatusByExOrderId_args setTchangerefundorderstatusbyexorderidreq(TChangeRefundOrderStatusByExOrderIdReq tchangerefundorderstatusbyexorderidreq) {
      this.tchangerefundorderstatusbyexorderidreq = tchangerefundorderstatusbyexorderidreq;
      return this;
    }

    public void unsetTchangerefundorderstatusbyexorderidreq() {
      this.tchangerefundorderstatusbyexorderidreq = null;
    }

    /** Returns true if field tchangerefundorderstatusbyexorderidreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTchangerefundorderstatusbyexorderidreq() {
      return this.tchangerefundorderstatusbyexorderidreq != null;
    }

    public void setTchangerefundorderstatusbyexorderidreqIsSet(boolean value) {
      if (!value) {
        this.tchangerefundorderstatusbyexorderidreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ:
        if (value == null) {
          unsetTchangerefundorderstatusbyexorderidreq();
        } else {
          setTchangerefundorderstatusbyexorderidreq((TChangeRefundOrderStatusByExOrderIdReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ:
        return getTchangerefundorderstatusbyexorderidreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ:
        return isSetTchangerefundorderstatusbyexorderidreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeRefundOrderStatusByExOrderId_args)
        return this.equals((changeRefundOrderStatusByExOrderId_args)that);
      return false;
    }

    public boolean equals(changeRefundOrderStatusByExOrderId_args that) {
      if (that == null)
        return false;

      boolean this_present_tchangerefundorderstatusbyexorderidreq = true && this.isSetTchangerefundorderstatusbyexorderidreq();
      boolean that_present_tchangerefundorderstatusbyexorderidreq = true && that.isSetTchangerefundorderstatusbyexorderidreq();
      if (this_present_tchangerefundorderstatusbyexorderidreq || that_present_tchangerefundorderstatusbyexorderidreq) {
        if (!(this_present_tchangerefundorderstatusbyexorderidreq && that_present_tchangerefundorderstatusbyexorderidreq))
          return false;
        if (!this.tchangerefundorderstatusbyexorderidreq.equals(that.tchangerefundorderstatusbyexorderidreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tchangerefundorderstatusbyexorderidreq = true && (isSetTchangerefundorderstatusbyexorderidreq());
      list.add(present_tchangerefundorderstatusbyexorderidreq);
      if (present_tchangerefundorderstatusbyexorderidreq)
        list.add(tchangerefundorderstatusbyexorderidreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeRefundOrderStatusByExOrderId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTchangerefundorderstatusbyexorderidreq()).compareTo(other.isSetTchangerefundorderstatusbyexorderidreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTchangerefundorderstatusbyexorderidreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tchangerefundorderstatusbyexorderidreq, other.tchangerefundorderstatusbyexorderidreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeRefundOrderStatusByExOrderId_args(");
      boolean first = true;

      sb.append("tchangerefundorderstatusbyexorderidreq:");
      if (this.tchangerefundorderstatusbyexorderidreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tchangerefundorderstatusbyexorderidreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tchangerefundorderstatusbyexorderidreq != null) {
        tchangerefundorderstatusbyexorderidreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeRefundOrderStatusByExOrderId_argsStandardSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatusByExOrderId_argsStandardScheme getScheme() {
        return new changeRefundOrderStatusByExOrderId_argsStandardScheme();
      }
    }

    private static class changeRefundOrderStatusByExOrderId_argsStandardScheme extends StandardScheme<changeRefundOrderStatusByExOrderId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeRefundOrderStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tchangerefundorderstatusbyexorderidreq = new TChangeRefundOrderStatusByExOrderIdReq();
                struct.tchangerefundorderstatusbyexorderidreq.read(iprot);
                struct.setTchangerefundorderstatusbyexorderidreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeRefundOrderStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tchangerefundorderstatusbyexorderidreq != null) {
          oprot.writeFieldBegin(TCHANGEREFUNDORDERSTATUSBYEXORDERIDREQ_FIELD_DESC);
          struct.tchangerefundorderstatusbyexorderidreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeRefundOrderStatusByExOrderId_argsTupleSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatusByExOrderId_argsTupleScheme getScheme() {
        return new changeRefundOrderStatusByExOrderId_argsTupleScheme();
      }
    }

    private static class changeRefundOrderStatusByExOrderId_argsTupleScheme extends TupleScheme<changeRefundOrderStatusByExOrderId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTchangerefundorderstatusbyexorderidreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTchangerefundorderstatusbyexorderidreq()) {
          struct.tchangerefundorderstatusbyexorderidreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tchangerefundorderstatusbyexorderidreq = new TChangeRefundOrderStatusByExOrderIdReq();
          struct.tchangerefundorderstatusbyexorderidreq.read(iprot);
          struct.setTchangerefundorderstatusbyexorderidreqIsSet(true);
        }
      }
    }

  }

  public static class changeRefundOrderStatusByExOrderId_result implements org.apache.thrift.TBase<changeRefundOrderStatusByExOrderId_result, changeRefundOrderStatusByExOrderId_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeRefundOrderStatusByExOrderId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeRefundOrderStatusByExOrderId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeRefundOrderStatusByExOrderId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeRefundOrderStatusByExOrderId_resultTupleSchemeFactory());
    }

    public TChangeRefundOrderStatusByExOrderIdResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeRefundOrderStatusByExOrderIdResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeRefundOrderStatusByExOrderId_result.class, metaDataMap);
    }

    public changeRefundOrderStatusByExOrderId_result() {
    }

    public changeRefundOrderStatusByExOrderId_result(
      TChangeRefundOrderStatusByExOrderIdResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeRefundOrderStatusByExOrderId_result(changeRefundOrderStatusByExOrderId_result other) {
      if (other.isSetSuccess()) {
        this.success = new TChangeRefundOrderStatusByExOrderIdResp(other.success);
      }
    }

    public changeRefundOrderStatusByExOrderId_result deepCopy() {
      return new changeRefundOrderStatusByExOrderId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TChangeRefundOrderStatusByExOrderIdResp getSuccess() {
      return this.success;
    }

    public changeRefundOrderStatusByExOrderId_result setSuccess(TChangeRefundOrderStatusByExOrderIdResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TChangeRefundOrderStatusByExOrderIdResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeRefundOrderStatusByExOrderId_result)
        return this.equals((changeRefundOrderStatusByExOrderId_result)that);
      return false;
    }

    public boolean equals(changeRefundOrderStatusByExOrderId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeRefundOrderStatusByExOrderId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeRefundOrderStatusByExOrderId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeRefundOrderStatusByExOrderId_resultStandardSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatusByExOrderId_resultStandardScheme getScheme() {
        return new changeRefundOrderStatusByExOrderId_resultStandardScheme();
      }
    }

    private static class changeRefundOrderStatusByExOrderId_resultStandardScheme extends StandardScheme<changeRefundOrderStatusByExOrderId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeRefundOrderStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TChangeRefundOrderStatusByExOrderIdResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeRefundOrderStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeRefundOrderStatusByExOrderId_resultTupleSchemeFactory implements SchemeFactory {
      public changeRefundOrderStatusByExOrderId_resultTupleScheme getScheme() {
        return new changeRefundOrderStatusByExOrderId_resultTupleScheme();
      }
    }

    private static class changeRefundOrderStatusByExOrderId_resultTupleScheme extends TupleScheme<changeRefundOrderStatusByExOrderId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeRefundOrderStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TChangeRefundOrderStatusByExOrderIdResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeTicketRecStatusByExOrderId_args implements org.apache.thrift.TBase<changeTicketRecStatusByExOrderId_args, changeTicketRecStatusByExOrderId_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketRecStatusByExOrderId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketRecStatusByExOrderId_args");

    private static final org.apache.thrift.protocol.TField TCHANGETICKETRECSTATUSBYEXORDERIDREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("tchangeticketrecstatusbyexorderidreq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketRecStatusByExOrderId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketRecStatusByExOrderId_argsTupleSchemeFactory());
    }

    public TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TCHANGETICKETRECSTATUSBYEXORDERIDREQ((short)1, "tchangeticketrecstatusbyexorderidreq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TCHANGETICKETRECSTATUSBYEXORDERIDREQ
            return TCHANGETICKETRECSTATUSBYEXORDERIDREQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TCHANGETICKETRECSTATUSBYEXORDERIDREQ, new org.apache.thrift.meta_data.FieldMetaData("tchangeticketrecstatusbyexorderidreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketRecStatusByExOrderIdReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketRecStatusByExOrderId_args.class, metaDataMap);
    }

    public changeTicketRecStatusByExOrderId_args() {
    }

    public changeTicketRecStatusByExOrderId_args(
      TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq)
    {
      this();
      this.tchangeticketrecstatusbyexorderidreq = tchangeticketrecstatusbyexorderidreq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketRecStatusByExOrderId_args(changeTicketRecStatusByExOrderId_args other) {
      if (other.isSetTchangeticketrecstatusbyexorderidreq()) {
        this.tchangeticketrecstatusbyexorderidreq = new TChangeTicketRecStatusByExOrderIdReq(other.tchangeticketrecstatusbyexorderidreq);
      }
    }

    public changeTicketRecStatusByExOrderId_args deepCopy() {
      return new changeTicketRecStatusByExOrderId_args(this);
    }

    @Override
    public void clear() {
      this.tchangeticketrecstatusbyexorderidreq = null;
    }

    public TChangeTicketRecStatusByExOrderIdReq getTchangeticketrecstatusbyexorderidreq() {
      return this.tchangeticketrecstatusbyexorderidreq;
    }

    public changeTicketRecStatusByExOrderId_args setTchangeticketrecstatusbyexorderidreq(TChangeTicketRecStatusByExOrderIdReq tchangeticketrecstatusbyexorderidreq) {
      this.tchangeticketrecstatusbyexorderidreq = tchangeticketrecstatusbyexorderidreq;
      return this;
    }

    public void unsetTchangeticketrecstatusbyexorderidreq() {
      this.tchangeticketrecstatusbyexorderidreq = null;
    }

    /** Returns true if field tchangeticketrecstatusbyexorderidreq is set (has been assigned a value) and false otherwise */
    public boolean isSetTchangeticketrecstatusbyexorderidreq() {
      return this.tchangeticketrecstatusbyexorderidreq != null;
    }

    public void setTchangeticketrecstatusbyexorderidreqIsSet(boolean value) {
      if (!value) {
        this.tchangeticketrecstatusbyexorderidreq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TCHANGETICKETRECSTATUSBYEXORDERIDREQ:
        if (value == null) {
          unsetTchangeticketrecstatusbyexorderidreq();
        } else {
          setTchangeticketrecstatusbyexorderidreq((TChangeTicketRecStatusByExOrderIdReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TCHANGETICKETRECSTATUSBYEXORDERIDREQ:
        return getTchangeticketrecstatusbyexorderidreq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TCHANGETICKETRECSTATUSBYEXORDERIDREQ:
        return isSetTchangeticketrecstatusbyexorderidreq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketRecStatusByExOrderId_args)
        return this.equals((changeTicketRecStatusByExOrderId_args)that);
      return false;
    }

    public boolean equals(changeTicketRecStatusByExOrderId_args that) {
      if (that == null)
        return false;

      boolean this_present_tchangeticketrecstatusbyexorderidreq = true && this.isSetTchangeticketrecstatusbyexorderidreq();
      boolean that_present_tchangeticketrecstatusbyexorderidreq = true && that.isSetTchangeticketrecstatusbyexorderidreq();
      if (this_present_tchangeticketrecstatusbyexorderidreq || that_present_tchangeticketrecstatusbyexorderidreq) {
        if (!(this_present_tchangeticketrecstatusbyexorderidreq && that_present_tchangeticketrecstatusbyexorderidreq))
          return false;
        if (!this.tchangeticketrecstatusbyexorderidreq.equals(that.tchangeticketrecstatusbyexorderidreq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tchangeticketrecstatusbyexorderidreq = true && (isSetTchangeticketrecstatusbyexorderidreq());
      list.add(present_tchangeticketrecstatusbyexorderidreq);
      if (present_tchangeticketrecstatusbyexorderidreq)
        list.add(tchangeticketrecstatusbyexorderidreq);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketRecStatusByExOrderId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTchangeticketrecstatusbyexorderidreq()).compareTo(other.isSetTchangeticketrecstatusbyexorderidreq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTchangeticketrecstatusbyexorderidreq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tchangeticketrecstatusbyexorderidreq, other.tchangeticketrecstatusbyexorderidreq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketRecStatusByExOrderId_args(");
      boolean first = true;

      sb.append("tchangeticketrecstatusbyexorderidreq:");
      if (this.tchangeticketrecstatusbyexorderidreq == null) {
        sb.append("null");
      } else {
        sb.append(this.tchangeticketrecstatusbyexorderidreq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tchangeticketrecstatusbyexorderidreq != null) {
        tchangeticketrecstatusbyexorderidreq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketRecStatusByExOrderId_argsStandardSchemeFactory implements SchemeFactory {
      public changeTicketRecStatusByExOrderId_argsStandardScheme getScheme() {
        return new changeTicketRecStatusByExOrderId_argsStandardScheme();
      }
    }

    private static class changeTicketRecStatusByExOrderId_argsStandardScheme extends StandardScheme<changeTicketRecStatusByExOrderId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketRecStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TCHANGETICKETRECSTATUSBYEXORDERIDREQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tchangeticketrecstatusbyexorderidreq = new TChangeTicketRecStatusByExOrderIdReq();
                struct.tchangeticketrecstatusbyexorderidreq.read(iprot);
                struct.setTchangeticketrecstatusbyexorderidreqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketRecStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tchangeticketrecstatusbyexorderidreq != null) {
          oprot.writeFieldBegin(TCHANGETICKETRECSTATUSBYEXORDERIDREQ_FIELD_DESC);
          struct.tchangeticketrecstatusbyexorderidreq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketRecStatusByExOrderId_argsTupleSchemeFactory implements SchemeFactory {
      public changeTicketRecStatusByExOrderId_argsTupleScheme getScheme() {
        return new changeTicketRecStatusByExOrderId_argsTupleScheme();
      }
    }

    private static class changeTicketRecStatusByExOrderId_argsTupleScheme extends TupleScheme<changeTicketRecStatusByExOrderId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTchangeticketrecstatusbyexorderidreq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTchangeticketrecstatusbyexorderidreq()) {
          struct.tchangeticketrecstatusbyexorderidreq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatusByExOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tchangeticketrecstatusbyexorderidreq = new TChangeTicketRecStatusByExOrderIdReq();
          struct.tchangeticketrecstatusbyexorderidreq.read(iprot);
          struct.setTchangeticketrecstatusbyexorderidreqIsSet(true);
        }
      }
    }

  }

  public static class changeTicketRecStatusByExOrderId_result implements org.apache.thrift.TBase<changeTicketRecStatusByExOrderId_result, changeTicketRecStatusByExOrderId_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicketRecStatusByExOrderId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicketRecStatusByExOrderId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTicketRecStatusByExOrderId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTicketRecStatusByExOrderId_resultTupleSchemeFactory());
    }

    public TChangeTicketRecStatusByExOrderIdResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TChangeTicketRecStatusByExOrderIdResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicketRecStatusByExOrderId_result.class, metaDataMap);
    }

    public changeTicketRecStatusByExOrderId_result() {
    }

    public changeTicketRecStatusByExOrderId_result(
      TChangeTicketRecStatusByExOrderIdResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicketRecStatusByExOrderId_result(changeTicketRecStatusByExOrderId_result other) {
      if (other.isSetSuccess()) {
        this.success = new TChangeTicketRecStatusByExOrderIdResp(other.success);
      }
    }

    public changeTicketRecStatusByExOrderId_result deepCopy() {
      return new changeTicketRecStatusByExOrderId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TChangeTicketRecStatusByExOrderIdResp getSuccess() {
      return this.success;
    }

    public changeTicketRecStatusByExOrderId_result setSuccess(TChangeTicketRecStatusByExOrderIdResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TChangeTicketRecStatusByExOrderIdResp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicketRecStatusByExOrderId_result)
        return this.equals((changeTicketRecStatusByExOrderId_result)that);
      return false;
    }

    public boolean equals(changeTicketRecStatusByExOrderId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeTicketRecStatusByExOrderId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTicketRecStatusByExOrderId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicketRecStatusByExOrderId_resultStandardSchemeFactory implements SchemeFactory {
      public changeTicketRecStatusByExOrderId_resultStandardScheme getScheme() {
        return new changeTicketRecStatusByExOrderId_resultStandardScheme();
      }
    }

    private static class changeTicketRecStatusByExOrderId_resultStandardScheme extends StandardScheme<changeTicketRecStatusByExOrderId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicketRecStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TChangeTicketRecStatusByExOrderIdResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicketRecStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicketRecStatusByExOrderId_resultTupleSchemeFactory implements SchemeFactory {
      public changeTicketRecStatusByExOrderId_resultTupleScheme getScheme() {
        return new changeTicketRecStatusByExOrderId_resultTupleScheme();
      }
    }

    private static class changeTicketRecStatusByExOrderId_resultTupleScheme extends TupleScheme<changeTicketRecStatusByExOrderId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicketRecStatusByExOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TChangeTicketRecStatusByExOrderIdResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
