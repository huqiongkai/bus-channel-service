/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单预订响应
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-31")
public class OrderBookResp implements org.apache.thrift.TBase<OrderBookResp, OrderBookResp._Fields>, java.io.Serializable, Cloneable, Comparable<OrderBookResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderBookResp");

  private static final org.apache.thrift.protocol.TField BUS_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("busError", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EX_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderBookRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderBookRespTupleSchemeFactory());
  }

  /**
   * 错误信息
   */
  public BusError busError; // required
  /**
   * 外部订单号
   */
  public String exOrderId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 错误信息
     */
    BUS_ERROR((short)1, "busError"),
    /**
     * 外部订单号
     */
    EX_ORDER_ID((short)2, "exOrderId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUS_ERROR
          return BUS_ERROR;
        case 2: // EX_ORDER_ID
          return EX_ORDER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUS_ERROR, new org.apache.thrift.meta_data.FieldMetaData("busError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusError.class)));
    tmpMap.put(_Fields.EX_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("exOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderBookResp.class, metaDataMap);
  }

  public OrderBookResp() {
  }

  public OrderBookResp(
    BusError busError,
    String exOrderId)
  {
    this();
    this.busError = busError;
    this.exOrderId = exOrderId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderBookResp(OrderBookResp other) {
    if (other.isSetBusError()) {
      this.busError = new BusError(other.busError);
    }
    if (other.isSetExOrderId()) {
      this.exOrderId = other.exOrderId;
    }
  }

  public OrderBookResp deepCopy() {
    return new OrderBookResp(this);
  }

  @Override
  public void clear() {
    this.busError = null;
    this.exOrderId = null;
  }

  /**
   * 错误信息
   */
  public BusError getBusError() {
    return this.busError;
  }

  /**
   * 错误信息
   */
  public OrderBookResp setBusError(BusError busError) {
    this.busError = busError;
    return this;
  }

  public void unsetBusError() {
    this.busError = null;
  }

  /** Returns true if field busError is set (has been assigned a value) and false otherwise */
  public boolean isSetBusError() {
    return this.busError != null;
  }

  public void setBusErrorIsSet(boolean value) {
    if (!value) {
      this.busError = null;
    }
  }

  /**
   * 外部订单号
   */
  public String getExOrderId() {
    return this.exOrderId;
  }

  /**
   * 外部订单号
   */
  public OrderBookResp setExOrderId(String exOrderId) {
    this.exOrderId = exOrderId;
    return this;
  }

  public void unsetExOrderId() {
    this.exOrderId = null;
  }

  /** Returns true if field exOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExOrderId() {
    return this.exOrderId != null;
  }

  public void setExOrderIdIsSet(boolean value) {
    if (!value) {
      this.exOrderId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUS_ERROR:
      if (value == null) {
        unsetBusError();
      } else {
        setBusError((BusError)value);
      }
      break;

    case EX_ORDER_ID:
      if (value == null) {
        unsetExOrderId();
      } else {
        setExOrderId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUS_ERROR:
      return getBusError();

    case EX_ORDER_ID:
      return getExOrderId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUS_ERROR:
      return isSetBusError();
    case EX_ORDER_ID:
      return isSetExOrderId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderBookResp)
      return this.equals((OrderBookResp)that);
    return false;
  }

  public boolean equals(OrderBookResp that) {
    if (that == null)
      return false;

    boolean this_present_busError = true && this.isSetBusError();
    boolean that_present_busError = true && that.isSetBusError();
    if (this_present_busError || that_present_busError) {
      if (!(this_present_busError && that_present_busError))
        return false;
      if (!this.busError.equals(that.busError))
        return false;
    }

    boolean this_present_exOrderId = true && this.isSetExOrderId();
    boolean that_present_exOrderId = true && that.isSetExOrderId();
    if (this_present_exOrderId || that_present_exOrderId) {
      if (!(this_present_exOrderId && that_present_exOrderId))
        return false;
      if (!this.exOrderId.equals(that.exOrderId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_busError = true && (isSetBusError());
    list.add(present_busError);
    if (present_busError)
      list.add(busError);

    boolean present_exOrderId = true && (isSetExOrderId());
    list.add(present_exOrderId);
    if (present_exOrderId)
      list.add(exOrderId);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderBookResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBusError()).compareTo(other.isSetBusError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busError, other.busError);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExOrderId()).compareTo(other.isSetExOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOrderId, other.exOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderBookResp(");
    boolean first = true;

    sb.append("busError:");
    if (this.busError == null) {
      sb.append("null");
    } else {
      sb.append(this.busError);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exOrderId:");
    if (this.exOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.exOrderId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (busError != null) {
      busError.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderBookRespStandardSchemeFactory implements SchemeFactory {
    public OrderBookRespStandardScheme getScheme() {
      return new OrderBookRespStandardScheme();
    }
  }

  private static class OrderBookRespStandardScheme extends StandardScheme<OrderBookResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderBookResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUS_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.busError = new BusError();
              struct.busError.read(iprot);
              struct.setBusErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EX_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exOrderId = iprot.readString();
              struct.setExOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderBookResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.busError != null) {
        oprot.writeFieldBegin(BUS_ERROR_FIELD_DESC);
        struct.busError.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exOrderId != null) {
        oprot.writeFieldBegin(EX_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.exOrderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderBookRespTupleSchemeFactory implements SchemeFactory {
    public OrderBookRespTupleScheme getScheme() {
      return new OrderBookRespTupleScheme();
    }
  }

  private static class OrderBookRespTupleScheme extends TupleScheme<OrderBookResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderBookResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBusError()) {
        optionals.set(0);
      }
      if (struct.isSetExOrderId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBusError()) {
        struct.busError.write(oprot);
      }
      if (struct.isSetExOrderId()) {
        oprot.writeString(struct.exOrderId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderBookResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.busError = new BusError();
        struct.busError.read(iprot);
        struct.setBusErrorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exOrderId = iprot.readString();
        struct.setExOrderIdIsSet(true);
      }
    }
  }

}

