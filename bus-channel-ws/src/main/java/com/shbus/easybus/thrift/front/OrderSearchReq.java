/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单查询请求 如需轮询 建议刷新频率为10分钟 分页调用
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-31")
public class OrderSearchReq implements org.apache.thrift.TBase<OrderSearchReq, OrderSearchReq._Fields>, java.io.Serializable, Cloneable, Comparable<OrderSearchReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderSearchReq");

  private static final org.apache.thrift.protocol.TField AUTH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("authVO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EX_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_REC_RANDOM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecRandomCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_REC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TICKET_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TICKET_CONFIRM_DATE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketConfirmDateBegin", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TICKET_CONFIRM_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketConfirmDateEnd", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TICKET_REC_DATE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecDateBegin", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TICKET_REC_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecDateEnd", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PSG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("psgName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PSG_CERTIFICATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("psgCertificateType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PSG_CERTIFICATE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("psgCertificateNo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PSG_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("psgMobile", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IS_TEST_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isTestOrder", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TICKET_CREATE_DATE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketCreateDateBegin", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField TICKET_CREATE_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketCreateDateEnd", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderSearchReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderSearchReqTupleSchemeFactory());
  }

  /**
   * 身份验证
   */
  public AuthVO authVO; // required
  /**
   * 外部订单号
   */
  public String exOrderId; // optional
  /**
   * 取票码
   */
  public String ticketRecRandomCode; // optional
  /**
   * 取票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
   */
  public String ticketRecStatus; // optional
  /**
   * 出票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
   */
  public String ticketStatus; // optional
  /**
   * 出票时间  （查询时间范围-开始  yyyyMMdd）
   */
  public String ticketConfirmDateBegin; // optional
  /**
   * 出票时间  （查询时间范围-结束 yyyyMMdd）
   */
  public String ticketConfirmDateEnd; // optional
  /**
   * 取票时间  （查询时间范围-开始 yyyyMMdd）
   */
  public String ticketRecDateBegin; // optional
  /**
   * 取票时间  （查询时间范围-结束 yyyyMMdd）
   */
  public String ticketRecDateEnd; // optional
  /**
   * 客人姓名
   */
  public String psgName; // optional
  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public CertificateType psgCertificateType; // optional
  /**
   * 证件号
   */
  public String psgCertificateNo; // optional
  /**
   * 手机号
   */
  public String psgMobile; // optional
  /**
   * 第几页  每页默认10个 第一页从1开始
   */
  public int pageIndex; // required
  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public String isTestOrder; // required
  /**
   * 创建时间  （查询时间范围-开始  yyyyMMdd）
   */
  public String ticketCreateDateBegin; // optional
  /**
   * 创建时间  （查询时间范围-结束 yyyyMMdd）
   */
  public String ticketCreateDateEnd; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 身份验证
     */
    AUTH_VO((short)1, "authVO"),
    /**
     * 外部订单号
     */
    EX_ORDER_ID((short)2, "exOrderId"),
    /**
     * 取票码
     */
    TICKET_REC_RANDOM_CODE((short)3, "ticketRecRandomCode"),
    /**
     * 取票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
     */
    TICKET_REC_STATUS((short)4, "ticketRecStatus"),
    /**
     * 出票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
     */
    TICKET_STATUS((short)5, "ticketStatus"),
    /**
     * 出票时间  （查询时间范围-开始  yyyyMMdd）
     */
    TICKET_CONFIRM_DATE_BEGIN((short)6, "ticketConfirmDateBegin"),
    /**
     * 出票时间  （查询时间范围-结束 yyyyMMdd）
     */
    TICKET_CONFIRM_DATE_END((short)7, "ticketConfirmDateEnd"),
    /**
     * 取票时间  （查询时间范围-开始 yyyyMMdd）
     */
    TICKET_REC_DATE_BEGIN((short)8, "ticketRecDateBegin"),
    /**
     * 取票时间  （查询时间范围-结束 yyyyMMdd）
     */
    TICKET_REC_DATE_END((short)9, "ticketRecDateEnd"),
    /**
     * 客人姓名
     */
    PSG_NAME((short)10, "psgName"),
    /**
     * 证件类型
     * 
     * @see CertificateType
     */
    PSG_CERTIFICATE_TYPE((short)11, "psgCertificateType"),
    /**
     * 证件号
     */
    PSG_CERTIFICATE_NO((short)12, "psgCertificateNo"),
    /**
     * 手机号
     */
    PSG_MOBILE((short)13, "psgMobile"),
    /**
     * 第几页  每页默认10个 第一页从1开始
     */
    PAGE_INDEX((short)14, "pageIndex"),
    /**
     * 是否测试订单   Y:测试订单  N:非测试订单
     */
    IS_TEST_ORDER((short)15, "isTestOrder"),
    /**
     * 创建时间  （查询时间范围-开始  yyyyMMdd）
     */
    TICKET_CREATE_DATE_BEGIN((short)16, "ticketCreateDateBegin"),
    /**
     * 创建时间  （查询时间范围-结束 yyyyMMdd）
     */
    TICKET_CREATE_DATE_END((short)17, "ticketCreateDateEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_VO
          return AUTH_VO;
        case 2: // EX_ORDER_ID
          return EX_ORDER_ID;
        case 3: // TICKET_REC_RANDOM_CODE
          return TICKET_REC_RANDOM_CODE;
        case 4: // TICKET_REC_STATUS
          return TICKET_REC_STATUS;
        case 5: // TICKET_STATUS
          return TICKET_STATUS;
        case 6: // TICKET_CONFIRM_DATE_BEGIN
          return TICKET_CONFIRM_DATE_BEGIN;
        case 7: // TICKET_CONFIRM_DATE_END
          return TICKET_CONFIRM_DATE_END;
        case 8: // TICKET_REC_DATE_BEGIN
          return TICKET_REC_DATE_BEGIN;
        case 9: // TICKET_REC_DATE_END
          return TICKET_REC_DATE_END;
        case 10: // PSG_NAME
          return PSG_NAME;
        case 11: // PSG_CERTIFICATE_TYPE
          return PSG_CERTIFICATE_TYPE;
        case 12: // PSG_CERTIFICATE_NO
          return PSG_CERTIFICATE_NO;
        case 13: // PSG_MOBILE
          return PSG_MOBILE;
        case 14: // PAGE_INDEX
          return PAGE_INDEX;
        case 15: // IS_TEST_ORDER
          return IS_TEST_ORDER;
        case 16: // TICKET_CREATE_DATE_BEGIN
          return TICKET_CREATE_DATE_BEGIN;
        case 17: // TICKET_CREATE_DATE_END
          return TICKET_CREATE_DATE_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGEINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EX_ORDER_ID,_Fields.TICKET_REC_RANDOM_CODE,_Fields.TICKET_REC_STATUS,_Fields.TICKET_STATUS,_Fields.TICKET_CONFIRM_DATE_BEGIN,_Fields.TICKET_CONFIRM_DATE_END,_Fields.TICKET_REC_DATE_BEGIN,_Fields.TICKET_REC_DATE_END,_Fields.PSG_NAME,_Fields.PSG_CERTIFICATE_TYPE,_Fields.PSG_CERTIFICATE_NO,_Fields.PSG_MOBILE,_Fields.TICKET_CREATE_DATE_BEGIN,_Fields.TICKET_CREATE_DATE_END};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_VO, new org.apache.thrift.meta_data.FieldMetaData("authVO", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthVO.class)));
    tmpMap.put(_Fields.EX_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("exOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_RANDOM_CODE, new org.apache.thrift.meta_data.FieldMetaData("ticketRecRandomCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ticketRecStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ticketStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_CONFIRM_DATE_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("ticketConfirmDateBegin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_CONFIRM_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("ticketConfirmDateEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_DATE_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("ticketRecDateBegin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("ticketRecDateEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_NAME, new org.apache.thrift.meta_data.FieldMetaData("psgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_CERTIFICATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("psgCertificateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CertificateType.class)));
    tmpMap.put(_Fields.PSG_CERTIFICATE_NO, new org.apache.thrift.meta_data.FieldMetaData("psgCertificateNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("psgMobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TEST_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isTestOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_CREATE_DATE_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("ticketCreateDateBegin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_CREATE_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("ticketCreateDateEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderSearchReq.class, metaDataMap);
  }

  public OrderSearchReq() {
    this.pageIndex = 1;

    this.isTestOrder = "N";

  }

  public OrderSearchReq(
    AuthVO authVO,
    int pageIndex,
    String isTestOrder)
  {
    this();
    this.authVO = authVO;
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    this.isTestOrder = isTestOrder;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderSearchReq(OrderSearchReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAuthVO()) {
      this.authVO = new AuthVO(other.authVO);
    }
    if (other.isSetExOrderId()) {
      this.exOrderId = other.exOrderId;
    }
    if (other.isSetTicketRecRandomCode()) {
      this.ticketRecRandomCode = other.ticketRecRandomCode;
    }
    if (other.isSetTicketRecStatus()) {
      this.ticketRecStatus = other.ticketRecStatus;
    }
    if (other.isSetTicketStatus()) {
      this.ticketStatus = other.ticketStatus;
    }
    if (other.isSetTicketConfirmDateBegin()) {
      this.ticketConfirmDateBegin = other.ticketConfirmDateBegin;
    }
    if (other.isSetTicketConfirmDateEnd()) {
      this.ticketConfirmDateEnd = other.ticketConfirmDateEnd;
    }
    if (other.isSetTicketRecDateBegin()) {
      this.ticketRecDateBegin = other.ticketRecDateBegin;
    }
    if (other.isSetTicketRecDateEnd()) {
      this.ticketRecDateEnd = other.ticketRecDateEnd;
    }
    if (other.isSetPsgName()) {
      this.psgName = other.psgName;
    }
    if (other.isSetPsgCertificateType()) {
      this.psgCertificateType = other.psgCertificateType;
    }
    if (other.isSetPsgCertificateNo()) {
      this.psgCertificateNo = other.psgCertificateNo;
    }
    if (other.isSetPsgMobile()) {
      this.psgMobile = other.psgMobile;
    }
    this.pageIndex = other.pageIndex;
    if (other.isSetIsTestOrder()) {
      this.isTestOrder = other.isTestOrder;
    }
    if (other.isSetTicketCreateDateBegin()) {
      this.ticketCreateDateBegin = other.ticketCreateDateBegin;
    }
    if (other.isSetTicketCreateDateEnd()) {
      this.ticketCreateDateEnd = other.ticketCreateDateEnd;
    }
  }

  public OrderSearchReq deepCopy() {
    return new OrderSearchReq(this);
  }

  @Override
  public void clear() {
    this.authVO = null;
    this.exOrderId = null;
    this.ticketRecRandomCode = null;
    this.ticketRecStatus = null;
    this.ticketStatus = null;
    this.ticketConfirmDateBegin = null;
    this.ticketConfirmDateEnd = null;
    this.ticketRecDateBegin = null;
    this.ticketRecDateEnd = null;
    this.psgName = null;
    this.psgCertificateType = null;
    this.psgCertificateNo = null;
    this.psgMobile = null;
    this.pageIndex = 1;

    this.isTestOrder = "N";

    this.ticketCreateDateBegin = null;
    this.ticketCreateDateEnd = null;
  }

  /**
   * 身份验证
   */
  public AuthVO getAuthVO() {
    return this.authVO;
  }

  /**
   * 身份验证
   */
  public OrderSearchReq setAuthVO(AuthVO authVO) {
    this.authVO = authVO;
    return this;
  }

  public void unsetAuthVO() {
    this.authVO = null;
  }

  /** Returns true if field authVO is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthVO() {
    return this.authVO != null;
  }

  public void setAuthVOIsSet(boolean value) {
    if (!value) {
      this.authVO = null;
    }
  }

  /**
   * 外部订单号
   */
  public String getExOrderId() {
    return this.exOrderId;
  }

  /**
   * 外部订单号
   */
  public OrderSearchReq setExOrderId(String exOrderId) {
    this.exOrderId = exOrderId;
    return this;
  }

  public void unsetExOrderId() {
    this.exOrderId = null;
  }

  /** Returns true if field exOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExOrderId() {
    return this.exOrderId != null;
  }

  public void setExOrderIdIsSet(boolean value) {
    if (!value) {
      this.exOrderId = null;
    }
  }

  /**
   * 取票码
   */
  public String getTicketRecRandomCode() {
    return this.ticketRecRandomCode;
  }

  /**
   * 取票码
   */
  public OrderSearchReq setTicketRecRandomCode(String ticketRecRandomCode) {
    this.ticketRecRandomCode = ticketRecRandomCode;
    return this;
  }

  public void unsetTicketRecRandomCode() {
    this.ticketRecRandomCode = null;
  }

  /** Returns true if field ticketRecRandomCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecRandomCode() {
    return this.ticketRecRandomCode != null;
  }

  public void setTicketRecRandomCodeIsSet(boolean value) {
    if (!value) {
      this.ticketRecRandomCode = null;
    }
  }

  /**
   * 取票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
   */
  public String getTicketRecStatus() {
    return this.ticketRecStatus;
  }

  /**
   * 取票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
   */
  public OrderSearchReq setTicketRecStatus(String ticketRecStatus) {
    this.ticketRecStatus = ticketRecStatus;
    return this;
  }

  public void unsetTicketRecStatus() {
    this.ticketRecStatus = null;
  }

  /** Returns true if field ticketRecStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecStatus() {
    return this.ticketRecStatus != null;
  }

  public void setTicketRecStatusIsSet(boolean value) {
    if (!value) {
      this.ticketRecStatus = null;
    }
  }

  /**
   * 出票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
   */
  public String getTicketStatus() {
    return this.ticketStatus;
  }

  /**
   * 出票状态 NONE:无申请 ,APP:处理中,FAIL:失败,SUC:成功;
   */
  public OrderSearchReq setTicketStatus(String ticketStatus) {
    this.ticketStatus = ticketStatus;
    return this;
  }

  public void unsetTicketStatus() {
    this.ticketStatus = null;
  }

  /** Returns true if field ticketStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketStatus() {
    return this.ticketStatus != null;
  }

  public void setTicketStatusIsSet(boolean value) {
    if (!value) {
      this.ticketStatus = null;
    }
  }

  /**
   * 出票时间  （查询时间范围-开始  yyyyMMdd）
   */
  public String getTicketConfirmDateBegin() {
    return this.ticketConfirmDateBegin;
  }

  /**
   * 出票时间  （查询时间范围-开始  yyyyMMdd）
   */
  public OrderSearchReq setTicketConfirmDateBegin(String ticketConfirmDateBegin) {
    this.ticketConfirmDateBegin = ticketConfirmDateBegin;
    return this;
  }

  public void unsetTicketConfirmDateBegin() {
    this.ticketConfirmDateBegin = null;
  }

  /** Returns true if field ticketConfirmDateBegin is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketConfirmDateBegin() {
    return this.ticketConfirmDateBegin != null;
  }

  public void setTicketConfirmDateBeginIsSet(boolean value) {
    if (!value) {
      this.ticketConfirmDateBegin = null;
    }
  }

  /**
   * 出票时间  （查询时间范围-结束 yyyyMMdd）
   */
  public String getTicketConfirmDateEnd() {
    return this.ticketConfirmDateEnd;
  }

  /**
   * 出票时间  （查询时间范围-结束 yyyyMMdd）
   */
  public OrderSearchReq setTicketConfirmDateEnd(String ticketConfirmDateEnd) {
    this.ticketConfirmDateEnd = ticketConfirmDateEnd;
    return this;
  }

  public void unsetTicketConfirmDateEnd() {
    this.ticketConfirmDateEnd = null;
  }

  /** Returns true if field ticketConfirmDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketConfirmDateEnd() {
    return this.ticketConfirmDateEnd != null;
  }

  public void setTicketConfirmDateEndIsSet(boolean value) {
    if (!value) {
      this.ticketConfirmDateEnd = null;
    }
  }

  /**
   * 取票时间  （查询时间范围-开始 yyyyMMdd）
   */
  public String getTicketRecDateBegin() {
    return this.ticketRecDateBegin;
  }

  /**
   * 取票时间  （查询时间范围-开始 yyyyMMdd）
   */
  public OrderSearchReq setTicketRecDateBegin(String ticketRecDateBegin) {
    this.ticketRecDateBegin = ticketRecDateBegin;
    return this;
  }

  public void unsetTicketRecDateBegin() {
    this.ticketRecDateBegin = null;
  }

  /** Returns true if field ticketRecDateBegin is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecDateBegin() {
    return this.ticketRecDateBegin != null;
  }

  public void setTicketRecDateBeginIsSet(boolean value) {
    if (!value) {
      this.ticketRecDateBegin = null;
    }
  }

  /**
   * 取票时间  （查询时间范围-结束 yyyyMMdd）
   */
  public String getTicketRecDateEnd() {
    return this.ticketRecDateEnd;
  }

  /**
   * 取票时间  （查询时间范围-结束 yyyyMMdd）
   */
  public OrderSearchReq setTicketRecDateEnd(String ticketRecDateEnd) {
    this.ticketRecDateEnd = ticketRecDateEnd;
    return this;
  }

  public void unsetTicketRecDateEnd() {
    this.ticketRecDateEnd = null;
  }

  /** Returns true if field ticketRecDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecDateEnd() {
    return this.ticketRecDateEnd != null;
  }

  public void setTicketRecDateEndIsSet(boolean value) {
    if (!value) {
      this.ticketRecDateEnd = null;
    }
  }

  /**
   * 客人姓名
   */
  public String getPsgName() {
    return this.psgName;
  }

  /**
   * 客人姓名
   */
  public OrderSearchReq setPsgName(String psgName) {
    this.psgName = psgName;
    return this;
  }

  public void unsetPsgName() {
    this.psgName = null;
  }

  /** Returns true if field psgName is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgName() {
    return this.psgName != null;
  }

  public void setPsgNameIsSet(boolean value) {
    if (!value) {
      this.psgName = null;
    }
  }

  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public CertificateType getPsgCertificateType() {
    return this.psgCertificateType;
  }

  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public OrderSearchReq setPsgCertificateType(CertificateType psgCertificateType) {
    this.psgCertificateType = psgCertificateType;
    return this;
  }

  public void unsetPsgCertificateType() {
    this.psgCertificateType = null;
  }

  /** Returns true if field psgCertificateType is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgCertificateType() {
    return this.psgCertificateType != null;
  }

  public void setPsgCertificateTypeIsSet(boolean value) {
    if (!value) {
      this.psgCertificateType = null;
    }
  }

  /**
   * 证件号
   */
  public String getPsgCertificateNo() {
    return this.psgCertificateNo;
  }

  /**
   * 证件号
   */
  public OrderSearchReq setPsgCertificateNo(String psgCertificateNo) {
    this.psgCertificateNo = psgCertificateNo;
    return this;
  }

  public void unsetPsgCertificateNo() {
    this.psgCertificateNo = null;
  }

  /** Returns true if field psgCertificateNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgCertificateNo() {
    return this.psgCertificateNo != null;
  }

  public void setPsgCertificateNoIsSet(boolean value) {
    if (!value) {
      this.psgCertificateNo = null;
    }
  }

  /**
   * 手机号
   */
  public String getPsgMobile() {
    return this.psgMobile;
  }

  /**
   * 手机号
   */
  public OrderSearchReq setPsgMobile(String psgMobile) {
    this.psgMobile = psgMobile;
    return this;
  }

  public void unsetPsgMobile() {
    this.psgMobile = null;
  }

  /** Returns true if field psgMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgMobile() {
    return this.psgMobile != null;
  }

  public void setPsgMobileIsSet(boolean value) {
    if (!value) {
      this.psgMobile = null;
    }
  }

  /**
   * 第几页  每页默认10个 第一页从1开始
   */
  public int getPageIndex() {
    return this.pageIndex;
  }

  /**
   * 第几页  每页默认10个 第一页从1开始
   */
  public OrderSearchReq setPageIndex(int pageIndex) {
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    return this;
  }

  public void unsetPageIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  public void setPageIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
  }

  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public String getIsTestOrder() {
    return this.isTestOrder;
  }

  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public OrderSearchReq setIsTestOrder(String isTestOrder) {
    this.isTestOrder = isTestOrder;
    return this;
  }

  public void unsetIsTestOrder() {
    this.isTestOrder = null;
  }

  /** Returns true if field isTestOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTestOrder() {
    return this.isTestOrder != null;
  }

  public void setIsTestOrderIsSet(boolean value) {
    if (!value) {
      this.isTestOrder = null;
    }
  }

  /**
   * 创建时间  （查询时间范围-开始  yyyyMMdd）
   */
  public String getTicketCreateDateBegin() {
    return this.ticketCreateDateBegin;
  }

  /**
   * 创建时间  （查询时间范围-开始  yyyyMMdd）
   */
  public OrderSearchReq setTicketCreateDateBegin(String ticketCreateDateBegin) {
    this.ticketCreateDateBegin = ticketCreateDateBegin;
    return this;
  }

  public void unsetTicketCreateDateBegin() {
    this.ticketCreateDateBegin = null;
  }

  /** Returns true if field ticketCreateDateBegin is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketCreateDateBegin() {
    return this.ticketCreateDateBegin != null;
  }

  public void setTicketCreateDateBeginIsSet(boolean value) {
    if (!value) {
      this.ticketCreateDateBegin = null;
    }
  }

  /**
   * 创建时间  （查询时间范围-结束 yyyyMMdd）
   */
  public String getTicketCreateDateEnd() {
    return this.ticketCreateDateEnd;
  }

  /**
   * 创建时间  （查询时间范围-结束 yyyyMMdd）
   */
  public OrderSearchReq setTicketCreateDateEnd(String ticketCreateDateEnd) {
    this.ticketCreateDateEnd = ticketCreateDateEnd;
    return this;
  }

  public void unsetTicketCreateDateEnd() {
    this.ticketCreateDateEnd = null;
  }

  /** Returns true if field ticketCreateDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketCreateDateEnd() {
    return this.ticketCreateDateEnd != null;
  }

  public void setTicketCreateDateEndIsSet(boolean value) {
    if (!value) {
      this.ticketCreateDateEnd = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUTH_VO:
      if (value == null) {
        unsetAuthVO();
      } else {
        setAuthVO((AuthVO)value);
      }
      break;

    case EX_ORDER_ID:
      if (value == null) {
        unsetExOrderId();
      } else {
        setExOrderId((String)value);
      }
      break;

    case TICKET_REC_RANDOM_CODE:
      if (value == null) {
        unsetTicketRecRandomCode();
      } else {
        setTicketRecRandomCode((String)value);
      }
      break;

    case TICKET_REC_STATUS:
      if (value == null) {
        unsetTicketRecStatus();
      } else {
        setTicketRecStatus((String)value);
      }
      break;

    case TICKET_STATUS:
      if (value == null) {
        unsetTicketStatus();
      } else {
        setTicketStatus((String)value);
      }
      break;

    case TICKET_CONFIRM_DATE_BEGIN:
      if (value == null) {
        unsetTicketConfirmDateBegin();
      } else {
        setTicketConfirmDateBegin((String)value);
      }
      break;

    case TICKET_CONFIRM_DATE_END:
      if (value == null) {
        unsetTicketConfirmDateEnd();
      } else {
        setTicketConfirmDateEnd((String)value);
      }
      break;

    case TICKET_REC_DATE_BEGIN:
      if (value == null) {
        unsetTicketRecDateBegin();
      } else {
        setTicketRecDateBegin((String)value);
      }
      break;

    case TICKET_REC_DATE_END:
      if (value == null) {
        unsetTicketRecDateEnd();
      } else {
        setTicketRecDateEnd((String)value);
      }
      break;

    case PSG_NAME:
      if (value == null) {
        unsetPsgName();
      } else {
        setPsgName((String)value);
      }
      break;

    case PSG_CERTIFICATE_TYPE:
      if (value == null) {
        unsetPsgCertificateType();
      } else {
        setPsgCertificateType((CertificateType)value);
      }
      break;

    case PSG_CERTIFICATE_NO:
      if (value == null) {
        unsetPsgCertificateNo();
      } else {
        setPsgCertificateNo((String)value);
      }
      break;

    case PSG_MOBILE:
      if (value == null) {
        unsetPsgMobile();
      } else {
        setPsgMobile((String)value);
      }
      break;

    case PAGE_INDEX:
      if (value == null) {
        unsetPageIndex();
      } else {
        setPageIndex((Integer)value);
      }
      break;

    case IS_TEST_ORDER:
      if (value == null) {
        unsetIsTestOrder();
      } else {
        setIsTestOrder((String)value);
      }
      break;

    case TICKET_CREATE_DATE_BEGIN:
      if (value == null) {
        unsetTicketCreateDateBegin();
      } else {
        setTicketCreateDateBegin((String)value);
      }
      break;

    case TICKET_CREATE_DATE_END:
      if (value == null) {
        unsetTicketCreateDateEnd();
      } else {
        setTicketCreateDateEnd((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_VO:
      return getAuthVO();

    case EX_ORDER_ID:
      return getExOrderId();

    case TICKET_REC_RANDOM_CODE:
      return getTicketRecRandomCode();

    case TICKET_REC_STATUS:
      return getTicketRecStatus();

    case TICKET_STATUS:
      return getTicketStatus();

    case TICKET_CONFIRM_DATE_BEGIN:
      return getTicketConfirmDateBegin();

    case TICKET_CONFIRM_DATE_END:
      return getTicketConfirmDateEnd();

    case TICKET_REC_DATE_BEGIN:
      return getTicketRecDateBegin();

    case TICKET_REC_DATE_END:
      return getTicketRecDateEnd();

    case PSG_NAME:
      return getPsgName();

    case PSG_CERTIFICATE_TYPE:
      return getPsgCertificateType();

    case PSG_CERTIFICATE_NO:
      return getPsgCertificateNo();

    case PSG_MOBILE:
      return getPsgMobile();

    case PAGE_INDEX:
      return getPageIndex();

    case IS_TEST_ORDER:
      return getIsTestOrder();

    case TICKET_CREATE_DATE_BEGIN:
      return getTicketCreateDateBegin();

    case TICKET_CREATE_DATE_END:
      return getTicketCreateDateEnd();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUTH_VO:
      return isSetAuthVO();
    case EX_ORDER_ID:
      return isSetExOrderId();
    case TICKET_REC_RANDOM_CODE:
      return isSetTicketRecRandomCode();
    case TICKET_REC_STATUS:
      return isSetTicketRecStatus();
    case TICKET_STATUS:
      return isSetTicketStatus();
    case TICKET_CONFIRM_DATE_BEGIN:
      return isSetTicketConfirmDateBegin();
    case TICKET_CONFIRM_DATE_END:
      return isSetTicketConfirmDateEnd();
    case TICKET_REC_DATE_BEGIN:
      return isSetTicketRecDateBegin();
    case TICKET_REC_DATE_END:
      return isSetTicketRecDateEnd();
    case PSG_NAME:
      return isSetPsgName();
    case PSG_CERTIFICATE_TYPE:
      return isSetPsgCertificateType();
    case PSG_CERTIFICATE_NO:
      return isSetPsgCertificateNo();
    case PSG_MOBILE:
      return isSetPsgMobile();
    case PAGE_INDEX:
      return isSetPageIndex();
    case IS_TEST_ORDER:
      return isSetIsTestOrder();
    case TICKET_CREATE_DATE_BEGIN:
      return isSetTicketCreateDateBegin();
    case TICKET_CREATE_DATE_END:
      return isSetTicketCreateDateEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderSearchReq)
      return this.equals((OrderSearchReq)that);
    return false;
  }

  public boolean equals(OrderSearchReq that) {
    if (that == null)
      return false;

    boolean this_present_authVO = true && this.isSetAuthVO();
    boolean that_present_authVO = true && that.isSetAuthVO();
    if (this_present_authVO || that_present_authVO) {
      if (!(this_present_authVO && that_present_authVO))
        return false;
      if (!this.authVO.equals(that.authVO))
        return false;
    }

    boolean this_present_exOrderId = true && this.isSetExOrderId();
    boolean that_present_exOrderId = true && that.isSetExOrderId();
    if (this_present_exOrderId || that_present_exOrderId) {
      if (!(this_present_exOrderId && that_present_exOrderId))
        return false;
      if (!this.exOrderId.equals(that.exOrderId))
        return false;
    }

    boolean this_present_ticketRecRandomCode = true && this.isSetTicketRecRandomCode();
    boolean that_present_ticketRecRandomCode = true && that.isSetTicketRecRandomCode();
    if (this_present_ticketRecRandomCode || that_present_ticketRecRandomCode) {
      if (!(this_present_ticketRecRandomCode && that_present_ticketRecRandomCode))
        return false;
      if (!this.ticketRecRandomCode.equals(that.ticketRecRandomCode))
        return false;
    }

    boolean this_present_ticketRecStatus = true && this.isSetTicketRecStatus();
    boolean that_present_ticketRecStatus = true && that.isSetTicketRecStatus();
    if (this_present_ticketRecStatus || that_present_ticketRecStatus) {
      if (!(this_present_ticketRecStatus && that_present_ticketRecStatus))
        return false;
      if (!this.ticketRecStatus.equals(that.ticketRecStatus))
        return false;
    }

    boolean this_present_ticketStatus = true && this.isSetTicketStatus();
    boolean that_present_ticketStatus = true && that.isSetTicketStatus();
    if (this_present_ticketStatus || that_present_ticketStatus) {
      if (!(this_present_ticketStatus && that_present_ticketStatus))
        return false;
      if (!this.ticketStatus.equals(that.ticketStatus))
        return false;
    }

    boolean this_present_ticketConfirmDateBegin = true && this.isSetTicketConfirmDateBegin();
    boolean that_present_ticketConfirmDateBegin = true && that.isSetTicketConfirmDateBegin();
    if (this_present_ticketConfirmDateBegin || that_present_ticketConfirmDateBegin) {
      if (!(this_present_ticketConfirmDateBegin && that_present_ticketConfirmDateBegin))
        return false;
      if (!this.ticketConfirmDateBegin.equals(that.ticketConfirmDateBegin))
        return false;
    }

    boolean this_present_ticketConfirmDateEnd = true && this.isSetTicketConfirmDateEnd();
    boolean that_present_ticketConfirmDateEnd = true && that.isSetTicketConfirmDateEnd();
    if (this_present_ticketConfirmDateEnd || that_present_ticketConfirmDateEnd) {
      if (!(this_present_ticketConfirmDateEnd && that_present_ticketConfirmDateEnd))
        return false;
      if (!this.ticketConfirmDateEnd.equals(that.ticketConfirmDateEnd))
        return false;
    }

    boolean this_present_ticketRecDateBegin = true && this.isSetTicketRecDateBegin();
    boolean that_present_ticketRecDateBegin = true && that.isSetTicketRecDateBegin();
    if (this_present_ticketRecDateBegin || that_present_ticketRecDateBegin) {
      if (!(this_present_ticketRecDateBegin && that_present_ticketRecDateBegin))
        return false;
      if (!this.ticketRecDateBegin.equals(that.ticketRecDateBegin))
        return false;
    }

    boolean this_present_ticketRecDateEnd = true && this.isSetTicketRecDateEnd();
    boolean that_present_ticketRecDateEnd = true && that.isSetTicketRecDateEnd();
    if (this_present_ticketRecDateEnd || that_present_ticketRecDateEnd) {
      if (!(this_present_ticketRecDateEnd && that_present_ticketRecDateEnd))
        return false;
      if (!this.ticketRecDateEnd.equals(that.ticketRecDateEnd))
        return false;
    }

    boolean this_present_psgName = true && this.isSetPsgName();
    boolean that_present_psgName = true && that.isSetPsgName();
    if (this_present_psgName || that_present_psgName) {
      if (!(this_present_psgName && that_present_psgName))
        return false;
      if (!this.psgName.equals(that.psgName))
        return false;
    }

    boolean this_present_psgCertificateType = true && this.isSetPsgCertificateType();
    boolean that_present_psgCertificateType = true && that.isSetPsgCertificateType();
    if (this_present_psgCertificateType || that_present_psgCertificateType) {
      if (!(this_present_psgCertificateType && that_present_psgCertificateType))
        return false;
      if (!this.psgCertificateType.equals(that.psgCertificateType))
        return false;
    }

    boolean this_present_psgCertificateNo = true && this.isSetPsgCertificateNo();
    boolean that_present_psgCertificateNo = true && that.isSetPsgCertificateNo();
    if (this_present_psgCertificateNo || that_present_psgCertificateNo) {
      if (!(this_present_psgCertificateNo && that_present_psgCertificateNo))
        return false;
      if (!this.psgCertificateNo.equals(that.psgCertificateNo))
        return false;
    }

    boolean this_present_psgMobile = true && this.isSetPsgMobile();
    boolean that_present_psgMobile = true && that.isSetPsgMobile();
    if (this_present_psgMobile || that_present_psgMobile) {
      if (!(this_present_psgMobile && that_present_psgMobile))
        return false;
      if (!this.psgMobile.equals(that.psgMobile))
        return false;
    }

    boolean this_present_pageIndex = true;
    boolean that_present_pageIndex = true;
    if (this_present_pageIndex || that_present_pageIndex) {
      if (!(this_present_pageIndex && that_present_pageIndex))
        return false;
      if (this.pageIndex != that.pageIndex)
        return false;
    }

    boolean this_present_isTestOrder = true && this.isSetIsTestOrder();
    boolean that_present_isTestOrder = true && that.isSetIsTestOrder();
    if (this_present_isTestOrder || that_present_isTestOrder) {
      if (!(this_present_isTestOrder && that_present_isTestOrder))
        return false;
      if (!this.isTestOrder.equals(that.isTestOrder))
        return false;
    }

    boolean this_present_ticketCreateDateBegin = true && this.isSetTicketCreateDateBegin();
    boolean that_present_ticketCreateDateBegin = true && that.isSetTicketCreateDateBegin();
    if (this_present_ticketCreateDateBegin || that_present_ticketCreateDateBegin) {
      if (!(this_present_ticketCreateDateBegin && that_present_ticketCreateDateBegin))
        return false;
      if (!this.ticketCreateDateBegin.equals(that.ticketCreateDateBegin))
        return false;
    }

    boolean this_present_ticketCreateDateEnd = true && this.isSetTicketCreateDateEnd();
    boolean that_present_ticketCreateDateEnd = true && that.isSetTicketCreateDateEnd();
    if (this_present_ticketCreateDateEnd || that_present_ticketCreateDateEnd) {
      if (!(this_present_ticketCreateDateEnd && that_present_ticketCreateDateEnd))
        return false;
      if (!this.ticketCreateDateEnd.equals(that.ticketCreateDateEnd))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_authVO = true && (isSetAuthVO());
    list.add(present_authVO);
    if (present_authVO)
      list.add(authVO);

    boolean present_exOrderId = true && (isSetExOrderId());
    list.add(present_exOrderId);
    if (present_exOrderId)
      list.add(exOrderId);

    boolean present_ticketRecRandomCode = true && (isSetTicketRecRandomCode());
    list.add(present_ticketRecRandomCode);
    if (present_ticketRecRandomCode)
      list.add(ticketRecRandomCode);

    boolean present_ticketRecStatus = true && (isSetTicketRecStatus());
    list.add(present_ticketRecStatus);
    if (present_ticketRecStatus)
      list.add(ticketRecStatus);

    boolean present_ticketStatus = true && (isSetTicketStatus());
    list.add(present_ticketStatus);
    if (present_ticketStatus)
      list.add(ticketStatus);

    boolean present_ticketConfirmDateBegin = true && (isSetTicketConfirmDateBegin());
    list.add(present_ticketConfirmDateBegin);
    if (present_ticketConfirmDateBegin)
      list.add(ticketConfirmDateBegin);

    boolean present_ticketConfirmDateEnd = true && (isSetTicketConfirmDateEnd());
    list.add(present_ticketConfirmDateEnd);
    if (present_ticketConfirmDateEnd)
      list.add(ticketConfirmDateEnd);

    boolean present_ticketRecDateBegin = true && (isSetTicketRecDateBegin());
    list.add(present_ticketRecDateBegin);
    if (present_ticketRecDateBegin)
      list.add(ticketRecDateBegin);

    boolean present_ticketRecDateEnd = true && (isSetTicketRecDateEnd());
    list.add(present_ticketRecDateEnd);
    if (present_ticketRecDateEnd)
      list.add(ticketRecDateEnd);

    boolean present_psgName = true && (isSetPsgName());
    list.add(present_psgName);
    if (present_psgName)
      list.add(psgName);

    boolean present_psgCertificateType = true && (isSetPsgCertificateType());
    list.add(present_psgCertificateType);
    if (present_psgCertificateType)
      list.add(psgCertificateType.getValue());

    boolean present_psgCertificateNo = true && (isSetPsgCertificateNo());
    list.add(present_psgCertificateNo);
    if (present_psgCertificateNo)
      list.add(psgCertificateNo);

    boolean present_psgMobile = true && (isSetPsgMobile());
    list.add(present_psgMobile);
    if (present_psgMobile)
      list.add(psgMobile);

    boolean present_pageIndex = true;
    list.add(present_pageIndex);
    if (present_pageIndex)
      list.add(pageIndex);

    boolean present_isTestOrder = true && (isSetIsTestOrder());
    list.add(present_isTestOrder);
    if (present_isTestOrder)
      list.add(isTestOrder);

    boolean present_ticketCreateDateBegin = true && (isSetTicketCreateDateBegin());
    list.add(present_ticketCreateDateBegin);
    if (present_ticketCreateDateBegin)
      list.add(ticketCreateDateBegin);

    boolean present_ticketCreateDateEnd = true && (isSetTicketCreateDateEnd());
    list.add(present_ticketCreateDateEnd);
    if (present_ticketCreateDateEnd)
      list.add(ticketCreateDateEnd);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderSearchReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAuthVO()).compareTo(other.isSetAuthVO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthVO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authVO, other.authVO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExOrderId()).compareTo(other.isSetExOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOrderId, other.exOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecRandomCode()).compareTo(other.isSetTicketRecRandomCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecRandomCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecRandomCode, other.ticketRecRandomCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecStatus()).compareTo(other.isSetTicketRecStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecStatus, other.ticketRecStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketStatus()).compareTo(other.isSetTicketStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketStatus, other.ticketStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketConfirmDateBegin()).compareTo(other.isSetTicketConfirmDateBegin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketConfirmDateBegin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketConfirmDateBegin, other.ticketConfirmDateBegin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketConfirmDateEnd()).compareTo(other.isSetTicketConfirmDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketConfirmDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketConfirmDateEnd, other.ticketConfirmDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecDateBegin()).compareTo(other.isSetTicketRecDateBegin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecDateBegin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecDateBegin, other.ticketRecDateBegin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecDateEnd()).compareTo(other.isSetTicketRecDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecDateEnd, other.ticketRecDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgName()).compareTo(other.isSetPsgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgName, other.psgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgCertificateType()).compareTo(other.isSetPsgCertificateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgCertificateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgCertificateType, other.psgCertificateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgCertificateNo()).compareTo(other.isSetPsgCertificateNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgCertificateNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgCertificateNo, other.psgCertificateNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgMobile()).compareTo(other.isSetPsgMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgMobile, other.psgMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTestOrder()).compareTo(other.isSetIsTestOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTestOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTestOrder, other.isTestOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketCreateDateBegin()).compareTo(other.isSetTicketCreateDateBegin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketCreateDateBegin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketCreateDateBegin, other.ticketCreateDateBegin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketCreateDateEnd()).compareTo(other.isSetTicketCreateDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketCreateDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketCreateDateEnd, other.ticketCreateDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderSearchReq(");
    boolean first = true;

    sb.append("authVO:");
    if (this.authVO == null) {
      sb.append("null");
    } else {
      sb.append(this.authVO);
    }
    first = false;
    if (isSetExOrderId()) {
      if (!first) sb.append(", ");
      sb.append("exOrderId:");
      if (this.exOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.exOrderId);
      }
      first = false;
    }
    if (isSetTicketRecRandomCode()) {
      if (!first) sb.append(", ");
      sb.append("ticketRecRandomCode:");
      if (this.ticketRecRandomCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketRecRandomCode);
      }
      first = false;
    }
    if (isSetTicketRecStatus()) {
      if (!first) sb.append(", ");
      sb.append("ticketRecStatus:");
      if (this.ticketRecStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketRecStatus);
      }
      first = false;
    }
    if (isSetTicketStatus()) {
      if (!first) sb.append(", ");
      sb.append("ticketStatus:");
      if (this.ticketStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketStatus);
      }
      first = false;
    }
    if (isSetTicketConfirmDateBegin()) {
      if (!first) sb.append(", ");
      sb.append("ticketConfirmDateBegin:");
      if (this.ticketConfirmDateBegin == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketConfirmDateBegin);
      }
      first = false;
    }
    if (isSetTicketConfirmDateEnd()) {
      if (!first) sb.append(", ");
      sb.append("ticketConfirmDateEnd:");
      if (this.ticketConfirmDateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketConfirmDateEnd);
      }
      first = false;
    }
    if (isSetTicketRecDateBegin()) {
      if (!first) sb.append(", ");
      sb.append("ticketRecDateBegin:");
      if (this.ticketRecDateBegin == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketRecDateBegin);
      }
      first = false;
    }
    if (isSetTicketRecDateEnd()) {
      if (!first) sb.append(", ");
      sb.append("ticketRecDateEnd:");
      if (this.ticketRecDateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketRecDateEnd);
      }
      first = false;
    }
    if (isSetPsgName()) {
      if (!first) sb.append(", ");
      sb.append("psgName:");
      if (this.psgName == null) {
        sb.append("null");
      } else {
        sb.append(this.psgName);
      }
      first = false;
    }
    if (isSetPsgCertificateType()) {
      if (!first) sb.append(", ");
      sb.append("psgCertificateType:");
      if (this.psgCertificateType == null) {
        sb.append("null");
      } else {
        sb.append(this.psgCertificateType);
      }
      first = false;
    }
    if (isSetPsgCertificateNo()) {
      if (!first) sb.append(", ");
      sb.append("psgCertificateNo:");
      if (this.psgCertificateNo == null) {
        sb.append("null");
      } else {
        sb.append(this.psgCertificateNo);
      }
      first = false;
    }
    if (isSetPsgMobile()) {
      if (!first) sb.append(", ");
      sb.append("psgMobile:");
      if (this.psgMobile == null) {
        sb.append("null");
      } else {
        sb.append(this.psgMobile);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("pageIndex:");
    sb.append(this.pageIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTestOrder:");
    if (this.isTestOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.isTestOrder);
    }
    first = false;
    if (isSetTicketCreateDateBegin()) {
      if (!first) sb.append(", ");
      sb.append("ticketCreateDateBegin:");
      if (this.ticketCreateDateBegin == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketCreateDateBegin);
      }
      first = false;
    }
    if (isSetTicketCreateDateEnd()) {
      if (!first) sb.append(", ");
      sb.append("ticketCreateDateEnd:");
      if (this.ticketCreateDateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketCreateDateEnd);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (authVO == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authVO' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pageIndex' because it's a primitive and you chose the non-beans generator.
    if (isTestOrder == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isTestOrder' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (authVO != null) {
      authVO.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderSearchReqStandardSchemeFactory implements SchemeFactory {
    public OrderSearchReqStandardScheme getScheme() {
      return new OrderSearchReqStandardScheme();
    }
  }

  private static class OrderSearchReqStandardScheme extends StandardScheme<OrderSearchReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderSearchReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.authVO = new AuthVO();
              struct.authVO.read(iprot);
              struct.setAuthVOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EX_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exOrderId = iprot.readString();
              struct.setExOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_REC_RANDOM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecRandomCode = iprot.readString();
              struct.setTicketRecRandomCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_REC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecStatus = iprot.readString();
              struct.setTicketRecStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TICKET_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketStatus = iprot.readString();
              struct.setTicketStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TICKET_CONFIRM_DATE_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketConfirmDateBegin = iprot.readString();
              struct.setTicketConfirmDateBeginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TICKET_CONFIRM_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketConfirmDateEnd = iprot.readString();
              struct.setTicketConfirmDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TICKET_REC_DATE_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecDateBegin = iprot.readString();
              struct.setTicketRecDateBeginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TICKET_REC_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecDateEnd = iprot.readString();
              struct.setTicketRecDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PSG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgName = iprot.readString();
              struct.setPsgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PSG_CERTIFICATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.psgCertificateType = com.shbus.easybus.thrift.front.CertificateType.findByValue(iprot.readI32());
              struct.setPsgCertificateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PSG_CERTIFICATE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgCertificateNo = iprot.readString();
              struct.setPsgCertificateNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PSG_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgMobile = iprot.readString();
              struct.setPsgMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageIndex = iprot.readI32();
              struct.setPageIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_TEST_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isTestOrder = iprot.readString();
              struct.setIsTestOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TICKET_CREATE_DATE_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketCreateDateBegin = iprot.readString();
              struct.setTicketCreateDateBeginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TICKET_CREATE_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketCreateDateEnd = iprot.readString();
              struct.setTicketCreateDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPageIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pageIndex' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderSearchReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.authVO != null) {
        oprot.writeFieldBegin(AUTH_VO_FIELD_DESC);
        struct.authVO.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exOrderId != null) {
        if (struct.isSetExOrderId()) {
          oprot.writeFieldBegin(EX_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.exOrderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketRecRandomCode != null) {
        if (struct.isSetTicketRecRandomCode()) {
          oprot.writeFieldBegin(TICKET_REC_RANDOM_CODE_FIELD_DESC);
          oprot.writeString(struct.ticketRecRandomCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketRecStatus != null) {
        if (struct.isSetTicketRecStatus()) {
          oprot.writeFieldBegin(TICKET_REC_STATUS_FIELD_DESC);
          oprot.writeString(struct.ticketRecStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketStatus != null) {
        if (struct.isSetTicketStatus()) {
          oprot.writeFieldBegin(TICKET_STATUS_FIELD_DESC);
          oprot.writeString(struct.ticketStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketConfirmDateBegin != null) {
        if (struct.isSetTicketConfirmDateBegin()) {
          oprot.writeFieldBegin(TICKET_CONFIRM_DATE_BEGIN_FIELD_DESC);
          oprot.writeString(struct.ticketConfirmDateBegin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketConfirmDateEnd != null) {
        if (struct.isSetTicketConfirmDateEnd()) {
          oprot.writeFieldBegin(TICKET_CONFIRM_DATE_END_FIELD_DESC);
          oprot.writeString(struct.ticketConfirmDateEnd);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketRecDateBegin != null) {
        if (struct.isSetTicketRecDateBegin()) {
          oprot.writeFieldBegin(TICKET_REC_DATE_BEGIN_FIELD_DESC);
          oprot.writeString(struct.ticketRecDateBegin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketRecDateEnd != null) {
        if (struct.isSetTicketRecDateEnd()) {
          oprot.writeFieldBegin(TICKET_REC_DATE_END_FIELD_DESC);
          oprot.writeString(struct.ticketRecDateEnd);
          oprot.writeFieldEnd();
        }
      }
      if (struct.psgName != null) {
        if (struct.isSetPsgName()) {
          oprot.writeFieldBegin(PSG_NAME_FIELD_DESC);
          oprot.writeString(struct.psgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.psgCertificateType != null) {
        if (struct.isSetPsgCertificateType()) {
          oprot.writeFieldBegin(PSG_CERTIFICATE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.psgCertificateType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.psgCertificateNo != null) {
        if (struct.isSetPsgCertificateNo()) {
          oprot.writeFieldBegin(PSG_CERTIFICATE_NO_FIELD_DESC);
          oprot.writeString(struct.psgCertificateNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.psgMobile != null) {
        if (struct.isSetPsgMobile()) {
          oprot.writeFieldBegin(PSG_MOBILE_FIELD_DESC);
          oprot.writeString(struct.psgMobile);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.pageIndex);
      oprot.writeFieldEnd();
      if (struct.isTestOrder != null) {
        oprot.writeFieldBegin(IS_TEST_ORDER_FIELD_DESC);
        oprot.writeString(struct.isTestOrder);
        oprot.writeFieldEnd();
      }
      if (struct.ticketCreateDateBegin != null) {
        if (struct.isSetTicketCreateDateBegin()) {
          oprot.writeFieldBegin(TICKET_CREATE_DATE_BEGIN_FIELD_DESC);
          oprot.writeString(struct.ticketCreateDateBegin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketCreateDateEnd != null) {
        if (struct.isSetTicketCreateDateEnd()) {
          oprot.writeFieldBegin(TICKET_CREATE_DATE_END_FIELD_DESC);
          oprot.writeString(struct.ticketCreateDateEnd);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderSearchReqTupleSchemeFactory implements SchemeFactory {
    public OrderSearchReqTupleScheme getScheme() {
      return new OrderSearchReqTupleScheme();
    }
  }

  private static class OrderSearchReqTupleScheme extends TupleScheme<OrderSearchReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderSearchReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.authVO.write(oprot);
      oprot.writeI32(struct.pageIndex);
      oprot.writeString(struct.isTestOrder);
      BitSet optionals = new BitSet();
      if (struct.isSetExOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetTicketRecRandomCode()) {
        optionals.set(1);
      }
      if (struct.isSetTicketRecStatus()) {
        optionals.set(2);
      }
      if (struct.isSetTicketStatus()) {
        optionals.set(3);
      }
      if (struct.isSetTicketConfirmDateBegin()) {
        optionals.set(4);
      }
      if (struct.isSetTicketConfirmDateEnd()) {
        optionals.set(5);
      }
      if (struct.isSetTicketRecDateBegin()) {
        optionals.set(6);
      }
      if (struct.isSetTicketRecDateEnd()) {
        optionals.set(7);
      }
      if (struct.isSetPsgName()) {
        optionals.set(8);
      }
      if (struct.isSetPsgCertificateType()) {
        optionals.set(9);
      }
      if (struct.isSetPsgCertificateNo()) {
        optionals.set(10);
      }
      if (struct.isSetPsgMobile()) {
        optionals.set(11);
      }
      if (struct.isSetTicketCreateDateBegin()) {
        optionals.set(12);
      }
      if (struct.isSetTicketCreateDateEnd()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetExOrderId()) {
        oprot.writeString(struct.exOrderId);
      }
      if (struct.isSetTicketRecRandomCode()) {
        oprot.writeString(struct.ticketRecRandomCode);
      }
      if (struct.isSetTicketRecStatus()) {
        oprot.writeString(struct.ticketRecStatus);
      }
      if (struct.isSetTicketStatus()) {
        oprot.writeString(struct.ticketStatus);
      }
      if (struct.isSetTicketConfirmDateBegin()) {
        oprot.writeString(struct.ticketConfirmDateBegin);
      }
      if (struct.isSetTicketConfirmDateEnd()) {
        oprot.writeString(struct.ticketConfirmDateEnd);
      }
      if (struct.isSetTicketRecDateBegin()) {
        oprot.writeString(struct.ticketRecDateBegin);
      }
      if (struct.isSetTicketRecDateEnd()) {
        oprot.writeString(struct.ticketRecDateEnd);
      }
      if (struct.isSetPsgName()) {
        oprot.writeString(struct.psgName);
      }
      if (struct.isSetPsgCertificateType()) {
        oprot.writeI32(struct.psgCertificateType.getValue());
      }
      if (struct.isSetPsgCertificateNo()) {
        oprot.writeString(struct.psgCertificateNo);
      }
      if (struct.isSetPsgMobile()) {
        oprot.writeString(struct.psgMobile);
      }
      if (struct.isSetTicketCreateDateBegin()) {
        oprot.writeString(struct.ticketCreateDateBegin);
      }
      if (struct.isSetTicketCreateDateEnd()) {
        oprot.writeString(struct.ticketCreateDateEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderSearchReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.authVO = new AuthVO();
      struct.authVO.read(iprot);
      struct.setAuthVOIsSet(true);
      struct.pageIndex = iprot.readI32();
      struct.setPageIndexIsSet(true);
      struct.isTestOrder = iprot.readString();
      struct.setIsTestOrderIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.exOrderId = iprot.readString();
        struct.setExOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ticketRecRandomCode = iprot.readString();
        struct.setTicketRecRandomCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ticketRecStatus = iprot.readString();
        struct.setTicketRecStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ticketStatus = iprot.readString();
        struct.setTicketStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ticketConfirmDateBegin = iprot.readString();
        struct.setTicketConfirmDateBeginIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ticketConfirmDateEnd = iprot.readString();
        struct.setTicketConfirmDateEndIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ticketRecDateBegin = iprot.readString();
        struct.setTicketRecDateBeginIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ticketRecDateEnd = iprot.readString();
        struct.setTicketRecDateEndIsSet(true);
      }
      if (incoming.get(8)) {
        struct.psgName = iprot.readString();
        struct.setPsgNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.psgCertificateType = com.shbus.easybus.thrift.front.CertificateType.findByValue(iprot.readI32());
        struct.setPsgCertificateTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.psgCertificateNo = iprot.readString();
        struct.setPsgCertificateNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.psgMobile = iprot.readString();
        struct.setPsgMobileIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ticketCreateDateBegin = iprot.readString();
        struct.setTicketCreateDateBeginIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ticketCreateDateEnd = iprot.readString();
        struct.setTicketCreateDateEndIsSet(true);
      }
    }
  }

}

