/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单预订请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-24")
public class OrderBookReq implements org.apache.thrift.TBase<OrderBookReq, OrderBookReq._Fields>, java.io.Serializable, Cloneable, Comparable<OrderBookReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderBookReq");

  private static final org.apache.thrift.protocol.TField AUTH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("authVO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RT_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rtOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PLEAVE_DTYYYY_MMDD_HHMMSS_FIELD_DESC = new org.apache.thrift.protocol.TField("pleaveDtyyyyMMddHHmmss", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TICKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketPrice", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EX_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exOrderId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TO_STATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toStationId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PSG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("psgList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField IS_TEST_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isTestOrder", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderBookReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderBookReqTupleSchemeFactory());
  }

  /**
   * 身份验证
   */
  public AuthVO authVO; // required
  /**
   * 车次id
   */
  public String rtOrderId; // required
  /**
   * 总价
   */
  public int totalPrice; // required
  /**
   * 车票数量
   */
  public int ticketCount; // required
  /**
   * 出发时间 yyyyMMddHHmmss
   */
  public String pleaveDtyyyyMMddHHmmss; // required
  /**
   * 单价
   */
  public int ticketPrice; // required
  /**
   * 外部 订单号 请保证唯一
   */
  public String exOrderId; // required
  /**
   * 出发车站编号
   */
  public String unitId; // required
  /**
   * 到达车站编号
   */
  public String toStationId; // required
  /**
   * 订单客人信息
   */
  public List<PsgInfo> psgList; // required
  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public String isTestOrder; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 身份验证
     */
    AUTH_VO((short)1, "authVO"),
    /**
     * 车次id
     */
    RT_ORDER_ID((short)2, "rtOrderId"),
    /**
     * 总价
     */
    TOTAL_PRICE((short)3, "totalPrice"),
    /**
     * 车票数量
     */
    TICKET_COUNT((short)4, "ticketCount"),
    /**
     * 出发时间 yyyyMMddHHmmss
     */
    PLEAVE_DTYYYY_MMDD_HHMMSS((short)5, "pleaveDtyyyyMMddHHmmss"),
    /**
     * 单价
     */
    TICKET_PRICE((short)6, "ticketPrice"),
    /**
     * 外部 订单号 请保证唯一
     */
    EX_ORDER_ID((short)7, "exOrderId"),
    /**
     * 出发车站编号
     */
    UNIT_ID((short)8, "unitId"),
    /**
     * 到达车站编号
     */
    TO_STATION_ID((short)9, "toStationId"),
    /**
     * 订单客人信息
     */
    PSG_LIST((short)10, "psgList"),
    /**
     * 是否测试订单   Y:测试订单  N:非测试订单
     */
    IS_TEST_ORDER((short)11, "isTestOrder");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_VO
          return AUTH_VO;
        case 2: // RT_ORDER_ID
          return RT_ORDER_ID;
        case 3: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 4: // TICKET_COUNT
          return TICKET_COUNT;
        case 5: // PLEAVE_DTYYYY_MMDD_HHMMSS
          return PLEAVE_DTYYYY_MMDD_HHMMSS;
        case 6: // TICKET_PRICE
          return TICKET_PRICE;
        case 7: // EX_ORDER_ID
          return EX_ORDER_ID;
        case 8: // UNIT_ID
          return UNIT_ID;
        case 9: // TO_STATION_ID
          return TO_STATION_ID;
        case 10: // PSG_LIST
          return PSG_LIST;
        case 11: // IS_TEST_ORDER
          return IS_TEST_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPRICE_ISSET_ID = 0;
  private static final int __TICKETCOUNT_ISSET_ID = 1;
  private static final int __TICKETPRICE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_VO, new org.apache.thrift.meta_data.FieldMetaData("authVO", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthVO.class)));
    tmpMap.put(_Fields.RT_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("rtOrderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TICKET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ticketCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLEAVE_DTYYYY_MMDD_HHMMSS, new org.apache.thrift.meta_data.FieldMetaData("pleaveDtyyyyMMddHHmmss", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ticketPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EX_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("exOrderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_STATION_ID, new org.apache.thrift.meta_data.FieldMetaData("toStationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_LIST, new org.apache.thrift.meta_data.FieldMetaData("psgList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PsgInfo.class))));
    tmpMap.put(_Fields.IS_TEST_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isTestOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderBookReq.class, metaDataMap);
  }

  public OrderBookReq() {
    this.isTestOrder = "Y";

  }

  public OrderBookReq(
    AuthVO authVO,
    String rtOrderId,
    int totalPrice,
    int ticketCount,
    String pleaveDtyyyyMMddHHmmss,
    int ticketPrice,
    String exOrderId,
    String unitId,
    String toStationId,
    List<PsgInfo> psgList,
    String isTestOrder)
  {
    this();
    this.authVO = authVO;
    this.rtOrderId = rtOrderId;
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.ticketCount = ticketCount;
    setTicketCountIsSet(true);
    this.pleaveDtyyyyMMddHHmmss = pleaveDtyyyyMMddHHmmss;
    this.ticketPrice = ticketPrice;
    setTicketPriceIsSet(true);
    this.exOrderId = exOrderId;
    this.unitId = unitId;
    this.toStationId = toStationId;
    this.psgList = psgList;
    this.isTestOrder = isTestOrder;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderBookReq(OrderBookReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAuthVO()) {
      this.authVO = new AuthVO(other.authVO);
    }
    if (other.isSetRtOrderId()) {
      this.rtOrderId = other.rtOrderId;
    }
    this.totalPrice = other.totalPrice;
    this.ticketCount = other.ticketCount;
    if (other.isSetPleaveDtyyyyMMddHHmmss()) {
      this.pleaveDtyyyyMMddHHmmss = other.pleaveDtyyyyMMddHHmmss;
    }
    this.ticketPrice = other.ticketPrice;
    if (other.isSetExOrderId()) {
      this.exOrderId = other.exOrderId;
    }
    if (other.isSetUnitId()) {
      this.unitId = other.unitId;
    }
    if (other.isSetToStationId()) {
      this.toStationId = other.toStationId;
    }
    if (other.isSetPsgList()) {
      List<PsgInfo> __this__psgList = new ArrayList<PsgInfo>(other.psgList.size());
      for (PsgInfo other_element : other.psgList) {
        __this__psgList.add(new PsgInfo(other_element));
      }
      this.psgList = __this__psgList;
    }
    if (other.isSetIsTestOrder()) {
      this.isTestOrder = other.isTestOrder;
    }
  }

  public OrderBookReq deepCopy() {
    return new OrderBookReq(this);
  }

  @Override
  public void clear() {
    this.authVO = null;
    this.rtOrderId = null;
    setTotalPriceIsSet(false);
    this.totalPrice = 0;
    setTicketCountIsSet(false);
    this.ticketCount = 0;
    this.pleaveDtyyyyMMddHHmmss = null;
    setTicketPriceIsSet(false);
    this.ticketPrice = 0;
    this.exOrderId = null;
    this.unitId = null;
    this.toStationId = null;
    this.psgList = null;
    this.isTestOrder = "Y";

  }

  /**
   * 身份验证
   */
  public AuthVO getAuthVO() {
    return this.authVO;
  }

  /**
   * 身份验证
   */
  public OrderBookReq setAuthVO(AuthVO authVO) {
    this.authVO = authVO;
    return this;
  }

  public void unsetAuthVO() {
    this.authVO = null;
  }

  /** Returns true if field authVO is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthVO() {
    return this.authVO != null;
  }

  public void setAuthVOIsSet(boolean value) {
    if (!value) {
      this.authVO = null;
    }
  }

  /**
   * 车次id
   */
  public String getRtOrderId() {
    return this.rtOrderId;
  }

  /**
   * 车次id
   */
  public OrderBookReq setRtOrderId(String rtOrderId) {
    this.rtOrderId = rtOrderId;
    return this;
  }

  public void unsetRtOrderId() {
    this.rtOrderId = null;
  }

  /** Returns true if field rtOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetRtOrderId() {
    return this.rtOrderId != null;
  }

  public void setRtOrderIdIsSet(boolean value) {
    if (!value) {
      this.rtOrderId = null;
    }
  }

  /**
   * 总价
   */
  public int getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 总价
   */
  public OrderBookReq setTotalPrice(int totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 车票数量
   */
  public int getTicketCount() {
    return this.ticketCount;
  }

  /**
   * 车票数量
   */
  public OrderBookReq setTicketCount(int ticketCount) {
    this.ticketCount = ticketCount;
    setTicketCountIsSet(true);
    return this;
  }

  public void unsetTicketCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID);
  }

  /** Returns true if field ticketCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID);
  }

  public void setTicketCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID, value);
  }

  /**
   * 出发时间 yyyyMMddHHmmss
   */
  public String getPleaveDtyyyyMMddHHmmss() {
    return this.pleaveDtyyyyMMddHHmmss;
  }

  /**
   * 出发时间 yyyyMMddHHmmss
   */
  public OrderBookReq setPleaveDtyyyyMMddHHmmss(String pleaveDtyyyyMMddHHmmss) {
    this.pleaveDtyyyyMMddHHmmss = pleaveDtyyyyMMddHHmmss;
    return this;
  }

  public void unsetPleaveDtyyyyMMddHHmmss() {
    this.pleaveDtyyyyMMddHHmmss = null;
  }

  /** Returns true if field pleaveDtyyyyMMddHHmmss is set (has been assigned a value) and false otherwise */
  public boolean isSetPleaveDtyyyyMMddHHmmss() {
    return this.pleaveDtyyyyMMddHHmmss != null;
  }

  public void setPleaveDtyyyyMMddHHmmssIsSet(boolean value) {
    if (!value) {
      this.pleaveDtyyyyMMddHHmmss = null;
    }
  }

  /**
   * 单价
   */
  public int getTicketPrice() {
    return this.ticketPrice;
  }

  /**
   * 单价
   */
  public OrderBookReq setTicketPrice(int ticketPrice) {
    this.ticketPrice = ticketPrice;
    setTicketPriceIsSet(true);
    return this;
  }

  public void unsetTicketPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETPRICE_ISSET_ID);
  }

  /** Returns true if field ticketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKETPRICE_ISSET_ID);
  }

  public void setTicketPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETPRICE_ISSET_ID, value);
  }

  /**
   * 外部 订单号 请保证唯一
   */
  public String getExOrderId() {
    return this.exOrderId;
  }

  /**
   * 外部 订单号 请保证唯一
   */
  public OrderBookReq setExOrderId(String exOrderId) {
    this.exOrderId = exOrderId;
    return this;
  }

  public void unsetExOrderId() {
    this.exOrderId = null;
  }

  /** Returns true if field exOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExOrderId() {
    return this.exOrderId != null;
  }

  public void setExOrderIdIsSet(boolean value) {
    if (!value) {
      this.exOrderId = null;
    }
  }

  /**
   * 出发车站编号
   */
  public String getUnitId() {
    return this.unitId;
  }

  /**
   * 出发车站编号
   */
  public OrderBookReq setUnitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  public void unsetUnitId() {
    this.unitId = null;
  }

  /** Returns true if field unitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitId() {
    return this.unitId != null;
  }

  public void setUnitIdIsSet(boolean value) {
    if (!value) {
      this.unitId = null;
    }
  }

  /**
   * 到达车站编号
   */
  public String getToStationId() {
    return this.toStationId;
  }

  /**
   * 到达车站编号
   */
  public OrderBookReq setToStationId(String toStationId) {
    this.toStationId = toStationId;
    return this;
  }

  public void unsetToStationId() {
    this.toStationId = null;
  }

  /** Returns true if field toStationId is set (has been assigned a value) and false otherwise */
  public boolean isSetToStationId() {
    return this.toStationId != null;
  }

  public void setToStationIdIsSet(boolean value) {
    if (!value) {
      this.toStationId = null;
    }
  }

  public int getPsgListSize() {
    return (this.psgList == null) ? 0 : this.psgList.size();
  }

  public java.util.Iterator<PsgInfo> getPsgListIterator() {
    return (this.psgList == null) ? null : this.psgList.iterator();
  }

  public void addToPsgList(PsgInfo elem) {
    if (this.psgList == null) {
      this.psgList = new ArrayList<PsgInfo>();
    }
    this.psgList.add(elem);
  }

  /**
   * 订单客人信息
   */
  public List<PsgInfo> getPsgList() {
    return this.psgList;
  }

  /**
   * 订单客人信息
   */
  public OrderBookReq setPsgList(List<PsgInfo> psgList) {
    this.psgList = psgList;
    return this;
  }

  public void unsetPsgList() {
    this.psgList = null;
  }

  /** Returns true if field psgList is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgList() {
    return this.psgList != null;
  }

  public void setPsgListIsSet(boolean value) {
    if (!value) {
      this.psgList = null;
    }
  }

  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public String getIsTestOrder() {
    return this.isTestOrder;
  }

  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public OrderBookReq setIsTestOrder(String isTestOrder) {
    this.isTestOrder = isTestOrder;
    return this;
  }

  public void unsetIsTestOrder() {
    this.isTestOrder = null;
  }

  /** Returns true if field isTestOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTestOrder() {
    return this.isTestOrder != null;
  }

  public void setIsTestOrderIsSet(boolean value) {
    if (!value) {
      this.isTestOrder = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUTH_VO:
      if (value == null) {
        unsetAuthVO();
      } else {
        setAuthVO((AuthVO)value);
      }
      break;

    case RT_ORDER_ID:
      if (value == null) {
        unsetRtOrderId();
      } else {
        setRtOrderId((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Integer)value);
      }
      break;

    case TICKET_COUNT:
      if (value == null) {
        unsetTicketCount();
      } else {
        setTicketCount((Integer)value);
      }
      break;

    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      if (value == null) {
        unsetPleaveDtyyyyMMddHHmmss();
      } else {
        setPleaveDtyyyyMMddHHmmss((String)value);
      }
      break;

    case TICKET_PRICE:
      if (value == null) {
        unsetTicketPrice();
      } else {
        setTicketPrice((Integer)value);
      }
      break;

    case EX_ORDER_ID:
      if (value == null) {
        unsetExOrderId();
      } else {
        setExOrderId((String)value);
      }
      break;

    case UNIT_ID:
      if (value == null) {
        unsetUnitId();
      } else {
        setUnitId((String)value);
      }
      break;

    case TO_STATION_ID:
      if (value == null) {
        unsetToStationId();
      } else {
        setToStationId((String)value);
      }
      break;

    case PSG_LIST:
      if (value == null) {
        unsetPsgList();
      } else {
        setPsgList((List<PsgInfo>)value);
      }
      break;

    case IS_TEST_ORDER:
      if (value == null) {
        unsetIsTestOrder();
      } else {
        setIsTestOrder((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_VO:
      return getAuthVO();

    case RT_ORDER_ID:
      return getRtOrderId();

    case TOTAL_PRICE:
      return getTotalPrice();

    case TICKET_COUNT:
      return getTicketCount();

    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      return getPleaveDtyyyyMMddHHmmss();

    case TICKET_PRICE:
      return getTicketPrice();

    case EX_ORDER_ID:
      return getExOrderId();

    case UNIT_ID:
      return getUnitId();

    case TO_STATION_ID:
      return getToStationId();

    case PSG_LIST:
      return getPsgList();

    case IS_TEST_ORDER:
      return getIsTestOrder();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUTH_VO:
      return isSetAuthVO();
    case RT_ORDER_ID:
      return isSetRtOrderId();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case TICKET_COUNT:
      return isSetTicketCount();
    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      return isSetPleaveDtyyyyMMddHHmmss();
    case TICKET_PRICE:
      return isSetTicketPrice();
    case EX_ORDER_ID:
      return isSetExOrderId();
    case UNIT_ID:
      return isSetUnitId();
    case TO_STATION_ID:
      return isSetToStationId();
    case PSG_LIST:
      return isSetPsgList();
    case IS_TEST_ORDER:
      return isSetIsTestOrder();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderBookReq)
      return this.equals((OrderBookReq)that);
    return false;
  }

  public boolean equals(OrderBookReq that) {
    if (that == null)
      return false;

    boolean this_present_authVO = true && this.isSetAuthVO();
    boolean that_present_authVO = true && that.isSetAuthVO();
    if (this_present_authVO || that_present_authVO) {
      if (!(this_present_authVO && that_present_authVO))
        return false;
      if (!this.authVO.equals(that.authVO))
        return false;
    }

    boolean this_present_rtOrderId = true && this.isSetRtOrderId();
    boolean that_present_rtOrderId = true && that.isSetRtOrderId();
    if (this_present_rtOrderId || that_present_rtOrderId) {
      if (!(this_present_rtOrderId && that_present_rtOrderId))
        return false;
      if (!this.rtOrderId.equals(that.rtOrderId))
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_ticketCount = true;
    boolean that_present_ticketCount = true;
    if (this_present_ticketCount || that_present_ticketCount) {
      if (!(this_present_ticketCount && that_present_ticketCount))
        return false;
      if (this.ticketCount != that.ticketCount)
        return false;
    }

    boolean this_present_pleaveDtyyyyMMddHHmmss = true && this.isSetPleaveDtyyyyMMddHHmmss();
    boolean that_present_pleaveDtyyyyMMddHHmmss = true && that.isSetPleaveDtyyyyMMddHHmmss();
    if (this_present_pleaveDtyyyyMMddHHmmss || that_present_pleaveDtyyyyMMddHHmmss) {
      if (!(this_present_pleaveDtyyyyMMddHHmmss && that_present_pleaveDtyyyyMMddHHmmss))
        return false;
      if (!this.pleaveDtyyyyMMddHHmmss.equals(that.pleaveDtyyyyMMddHHmmss))
        return false;
    }

    boolean this_present_ticketPrice = true;
    boolean that_present_ticketPrice = true;
    if (this_present_ticketPrice || that_present_ticketPrice) {
      if (!(this_present_ticketPrice && that_present_ticketPrice))
        return false;
      if (this.ticketPrice != that.ticketPrice)
        return false;
    }

    boolean this_present_exOrderId = true && this.isSetExOrderId();
    boolean that_present_exOrderId = true && that.isSetExOrderId();
    if (this_present_exOrderId || that_present_exOrderId) {
      if (!(this_present_exOrderId && that_present_exOrderId))
        return false;
      if (!this.exOrderId.equals(that.exOrderId))
        return false;
    }

    boolean this_present_unitId = true && this.isSetUnitId();
    boolean that_present_unitId = true && that.isSetUnitId();
    if (this_present_unitId || that_present_unitId) {
      if (!(this_present_unitId && that_present_unitId))
        return false;
      if (!this.unitId.equals(that.unitId))
        return false;
    }

    boolean this_present_toStationId = true && this.isSetToStationId();
    boolean that_present_toStationId = true && that.isSetToStationId();
    if (this_present_toStationId || that_present_toStationId) {
      if (!(this_present_toStationId && that_present_toStationId))
        return false;
      if (!this.toStationId.equals(that.toStationId))
        return false;
    }

    boolean this_present_psgList = true && this.isSetPsgList();
    boolean that_present_psgList = true && that.isSetPsgList();
    if (this_present_psgList || that_present_psgList) {
      if (!(this_present_psgList && that_present_psgList))
        return false;
      if (!this.psgList.equals(that.psgList))
        return false;
    }

    boolean this_present_isTestOrder = true && this.isSetIsTestOrder();
    boolean that_present_isTestOrder = true && that.isSetIsTestOrder();
    if (this_present_isTestOrder || that_present_isTestOrder) {
      if (!(this_present_isTestOrder && that_present_isTestOrder))
        return false;
      if (!this.isTestOrder.equals(that.isTestOrder))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_authVO = true && (isSetAuthVO());
    list.add(present_authVO);
    if (present_authVO)
      list.add(authVO);

    boolean present_rtOrderId = true && (isSetRtOrderId());
    list.add(present_rtOrderId);
    if (present_rtOrderId)
      list.add(rtOrderId);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_ticketCount = true;
    list.add(present_ticketCount);
    if (present_ticketCount)
      list.add(ticketCount);

    boolean present_pleaveDtyyyyMMddHHmmss = true && (isSetPleaveDtyyyyMMddHHmmss());
    list.add(present_pleaveDtyyyyMMddHHmmss);
    if (present_pleaveDtyyyyMMddHHmmss)
      list.add(pleaveDtyyyyMMddHHmmss);

    boolean present_ticketPrice = true;
    list.add(present_ticketPrice);
    if (present_ticketPrice)
      list.add(ticketPrice);

    boolean present_exOrderId = true && (isSetExOrderId());
    list.add(present_exOrderId);
    if (present_exOrderId)
      list.add(exOrderId);

    boolean present_unitId = true && (isSetUnitId());
    list.add(present_unitId);
    if (present_unitId)
      list.add(unitId);

    boolean present_toStationId = true && (isSetToStationId());
    list.add(present_toStationId);
    if (present_toStationId)
      list.add(toStationId);

    boolean present_psgList = true && (isSetPsgList());
    list.add(present_psgList);
    if (present_psgList)
      list.add(psgList);

    boolean present_isTestOrder = true && (isSetIsTestOrder());
    list.add(present_isTestOrder);
    if (present_isTestOrder)
      list.add(isTestOrder);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderBookReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAuthVO()).compareTo(other.isSetAuthVO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthVO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authVO, other.authVO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtOrderId()).compareTo(other.isSetRtOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtOrderId, other.rtOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketCount()).compareTo(other.isSetTicketCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketCount, other.ticketCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPleaveDtyyyyMMddHHmmss()).compareTo(other.isSetPleaveDtyyyyMMddHHmmss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPleaveDtyyyyMMddHHmmss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pleaveDtyyyyMMddHHmmss, other.pleaveDtyyyyMMddHHmmss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketPrice()).compareTo(other.isSetTicketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketPrice, other.ticketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExOrderId()).compareTo(other.isSetExOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOrderId, other.exOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitId()).compareTo(other.isSetUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitId, other.unitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStationId()).compareTo(other.isSetToStationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStationId, other.toStationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgList()).compareTo(other.isSetPsgList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgList, other.psgList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTestOrder()).compareTo(other.isSetIsTestOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTestOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTestOrder, other.isTestOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderBookReq(");
    boolean first = true;

    sb.append("authVO:");
    if (this.authVO == null) {
      sb.append("null");
    } else {
      sb.append(this.authVO);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rtOrderId:");
    if (this.rtOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.rtOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketCount:");
    sb.append(this.ticketCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pleaveDtyyyyMMddHHmmss:");
    if (this.pleaveDtyyyyMMddHHmmss == null) {
      sb.append("null");
    } else {
      sb.append(this.pleaveDtyyyyMMddHHmmss);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketPrice:");
    sb.append(this.ticketPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exOrderId:");
    if (this.exOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.exOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitId:");
    if (this.unitId == null) {
      sb.append("null");
    } else {
      sb.append(this.unitId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStationId:");
    if (this.toStationId == null) {
      sb.append("null");
    } else {
      sb.append(this.toStationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgList:");
    if (this.psgList == null) {
      sb.append("null");
    } else {
      sb.append(this.psgList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTestOrder:");
    if (this.isTestOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.isTestOrder);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (authVO == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authVO' was not present! Struct: " + toString());
    }
    if (rtOrderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rtOrderId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'totalPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ticketCount' because it's a primitive and you chose the non-beans generator.
    if (pleaveDtyyyyMMddHHmmss == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pleaveDtyyyyMMddHHmmss' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ticketPrice' because it's a primitive and you chose the non-beans generator.
    if (exOrderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exOrderId' was not present! Struct: " + toString());
    }
    if (unitId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unitId' was not present! Struct: " + toString());
    }
    if (toStationId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toStationId' was not present! Struct: " + toString());
    }
    if (psgList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'psgList' was not present! Struct: " + toString());
    }
    if (isTestOrder == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isTestOrder' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (authVO != null) {
      authVO.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderBookReqStandardSchemeFactory implements SchemeFactory {
    public OrderBookReqStandardScheme getScheme() {
      return new OrderBookReqStandardScheme();
    }
  }

  private static class OrderBookReqStandardScheme extends StandardScheme<OrderBookReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderBookReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.authVO = new AuthVO();
              struct.authVO.read(iprot);
              struct.setAuthVOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RT_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtOrderId = iprot.readString();
              struct.setRtOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPrice = iprot.readI32();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticketCount = iprot.readI32();
              struct.setTicketCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLEAVE_DTYYYY_MMDD_HHMMSS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pleaveDtyyyyMMddHHmmss = iprot.readString();
              struct.setPleaveDtyyyyMMddHHmmssIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TICKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticketPrice = iprot.readI32();
              struct.setTicketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EX_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exOrderId = iprot.readString();
              struct.setExOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitId = iprot.readString();
              struct.setUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TO_STATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toStationId = iprot.readString();
              struct.setToStationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PSG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.psgList = new ArrayList<PsgInfo>(_list32.size);
                PsgInfo _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new PsgInfo();
                  _elem33.read(iprot);
                  struct.psgList.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setPsgListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_TEST_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isTestOrder = iprot.readString();
              struct.setIsTestOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTicketCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTicketPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketPrice' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderBookReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.authVO != null) {
        oprot.writeFieldBegin(AUTH_VO_FIELD_DESC);
        struct.authVO.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rtOrderId != null) {
        oprot.writeFieldBegin(RT_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.rtOrderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeI32(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TICKET_COUNT_FIELD_DESC);
      oprot.writeI32(struct.ticketCount);
      oprot.writeFieldEnd();
      if (struct.pleaveDtyyyyMMddHHmmss != null) {
        oprot.writeFieldBegin(PLEAVE_DTYYYY_MMDD_HHMMSS_FIELD_DESC);
        oprot.writeString(struct.pleaveDtyyyyMMddHHmmss);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKET_PRICE_FIELD_DESC);
      oprot.writeI32(struct.ticketPrice);
      oprot.writeFieldEnd();
      if (struct.exOrderId != null) {
        oprot.writeFieldBegin(EX_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.exOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.unitId != null) {
        oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
        oprot.writeString(struct.unitId);
        oprot.writeFieldEnd();
      }
      if (struct.toStationId != null) {
        oprot.writeFieldBegin(TO_STATION_ID_FIELD_DESC);
        oprot.writeString(struct.toStationId);
        oprot.writeFieldEnd();
      }
      if (struct.psgList != null) {
        oprot.writeFieldBegin(PSG_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.psgList.size()));
          for (PsgInfo _iter35 : struct.psgList)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isTestOrder != null) {
        oprot.writeFieldBegin(IS_TEST_ORDER_FIELD_DESC);
        oprot.writeString(struct.isTestOrder);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderBookReqTupleSchemeFactory implements SchemeFactory {
    public OrderBookReqTupleScheme getScheme() {
      return new OrderBookReqTupleScheme();
    }
  }

  private static class OrderBookReqTupleScheme extends TupleScheme<OrderBookReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderBookReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.authVO.write(oprot);
      oprot.writeString(struct.rtOrderId);
      oprot.writeI32(struct.totalPrice);
      oprot.writeI32(struct.ticketCount);
      oprot.writeString(struct.pleaveDtyyyyMMddHHmmss);
      oprot.writeI32(struct.ticketPrice);
      oprot.writeString(struct.exOrderId);
      oprot.writeString(struct.unitId);
      oprot.writeString(struct.toStationId);
      {
        oprot.writeI32(struct.psgList.size());
        for (PsgInfo _iter36 : struct.psgList)
        {
          _iter36.write(oprot);
        }
      }
      oprot.writeString(struct.isTestOrder);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderBookReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.authVO = new AuthVO();
      struct.authVO.read(iprot);
      struct.setAuthVOIsSet(true);
      struct.rtOrderId = iprot.readString();
      struct.setRtOrderIdIsSet(true);
      struct.totalPrice = iprot.readI32();
      struct.setTotalPriceIsSet(true);
      struct.ticketCount = iprot.readI32();
      struct.setTicketCountIsSet(true);
      struct.pleaveDtyyyyMMddHHmmss = iprot.readString();
      struct.setPleaveDtyyyyMMddHHmmssIsSet(true);
      struct.ticketPrice = iprot.readI32();
      struct.setTicketPriceIsSet(true);
      struct.exOrderId = iprot.readString();
      struct.setExOrderIdIsSet(true);
      struct.unitId = iprot.readString();
      struct.setUnitIdIsSet(true);
      struct.toStationId = iprot.readString();
      struct.setToStationIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.psgList = new ArrayList<PsgInfo>(_list37.size);
        PsgInfo _elem38;
        for (int _i39 = 0; _i39 < _list37.size; ++_i39)
        {
          _elem38 = new PsgInfo();
          _elem38.read(iprot);
          struct.psgList.add(_elem38);
        }
      }
      struct.setPsgListIsSet(true);
      struct.isTestOrder = iprot.readString();
      struct.setIsTestOrderIsSet(true);
    }
  }

}

