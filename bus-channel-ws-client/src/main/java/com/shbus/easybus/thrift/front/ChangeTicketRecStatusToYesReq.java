/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-24")
public class ChangeTicketRecStatusToYesReq implements org.apache.thrift.TBase<ChangeTicketRecStatusToYesReq, ChangeTicketRecStatusToYesReq._Fields>, java.io.Serializable, Cloneable, Comparable<ChangeTicketRecStatusToYesReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChangeTicketRecStatusToYesReq");

  private static final org.apache.thrift.protocol.TField AUTH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("authVO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EX_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChangeTicketRecStatusToYesReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChangeTicketRecStatusToYesReqTupleSchemeFactory());
  }

  /**
   * 身份验证
   */
  public AuthVO authVO; // required
  /**
   * 外部订单号
   */
  public String exOrderId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 身份验证
     */
    AUTH_VO((short)1, "authVO"),
    /**
     * 外部订单号
     */
    EX_ORDER_ID((short)2, "exOrderId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_VO
          return AUTH_VO;
        case 2: // EX_ORDER_ID
          return EX_ORDER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_VO, new org.apache.thrift.meta_data.FieldMetaData("authVO", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthVO.class)));
    tmpMap.put(_Fields.EX_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("exOrderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChangeTicketRecStatusToYesReq.class, metaDataMap);
  }

  public ChangeTicketRecStatusToYesReq() {
  }

  public ChangeTicketRecStatusToYesReq(
    AuthVO authVO,
    String exOrderId)
  {
    this();
    this.authVO = authVO;
    this.exOrderId = exOrderId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChangeTicketRecStatusToYesReq(ChangeTicketRecStatusToYesReq other) {
    if (other.isSetAuthVO()) {
      this.authVO = new AuthVO(other.authVO);
    }
    if (other.isSetExOrderId()) {
      this.exOrderId = other.exOrderId;
    }
  }

  public ChangeTicketRecStatusToYesReq deepCopy() {
    return new ChangeTicketRecStatusToYesReq(this);
  }

  @Override
  public void clear() {
    this.authVO = null;
    this.exOrderId = null;
  }

  /**
   * 身份验证
   */
  public AuthVO getAuthVO() {
    return this.authVO;
  }

  /**
   * 身份验证
   */
  public ChangeTicketRecStatusToYesReq setAuthVO(AuthVO authVO) {
    this.authVO = authVO;
    return this;
  }

  public void unsetAuthVO() {
    this.authVO = null;
  }

  /** Returns true if field authVO is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthVO() {
    return this.authVO != null;
  }

  public void setAuthVOIsSet(boolean value) {
    if (!value) {
      this.authVO = null;
    }
  }

  /**
   * 外部订单号
   */
  public String getExOrderId() {
    return this.exOrderId;
  }

  /**
   * 外部订单号
   */
  public ChangeTicketRecStatusToYesReq setExOrderId(String exOrderId) {
    this.exOrderId = exOrderId;
    return this;
  }

  public void unsetExOrderId() {
    this.exOrderId = null;
  }

  /** Returns true if field exOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExOrderId() {
    return this.exOrderId != null;
  }

  public void setExOrderIdIsSet(boolean value) {
    if (!value) {
      this.exOrderId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUTH_VO:
      if (value == null) {
        unsetAuthVO();
      } else {
        setAuthVO((AuthVO)value);
      }
      break;

    case EX_ORDER_ID:
      if (value == null) {
        unsetExOrderId();
      } else {
        setExOrderId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_VO:
      return getAuthVO();

    case EX_ORDER_ID:
      return getExOrderId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUTH_VO:
      return isSetAuthVO();
    case EX_ORDER_ID:
      return isSetExOrderId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChangeTicketRecStatusToYesReq)
      return this.equals((ChangeTicketRecStatusToYesReq)that);
    return false;
  }

  public boolean equals(ChangeTicketRecStatusToYesReq that) {
    if (that == null)
      return false;

    boolean this_present_authVO = true && this.isSetAuthVO();
    boolean that_present_authVO = true && that.isSetAuthVO();
    if (this_present_authVO || that_present_authVO) {
      if (!(this_present_authVO && that_present_authVO))
        return false;
      if (!this.authVO.equals(that.authVO))
        return false;
    }

    boolean this_present_exOrderId = true && this.isSetExOrderId();
    boolean that_present_exOrderId = true && that.isSetExOrderId();
    if (this_present_exOrderId || that_present_exOrderId) {
      if (!(this_present_exOrderId && that_present_exOrderId))
        return false;
      if (!this.exOrderId.equals(that.exOrderId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_authVO = true && (isSetAuthVO());
    list.add(present_authVO);
    if (present_authVO)
      list.add(authVO);

    boolean present_exOrderId = true && (isSetExOrderId());
    list.add(present_exOrderId);
    if (present_exOrderId)
      list.add(exOrderId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChangeTicketRecStatusToYesReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAuthVO()).compareTo(other.isSetAuthVO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthVO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authVO, other.authVO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExOrderId()).compareTo(other.isSetExOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOrderId, other.exOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChangeTicketRecStatusToYesReq(");
    boolean first = true;

    sb.append("authVO:");
    if (this.authVO == null) {
      sb.append("null");
    } else {
      sb.append(this.authVO);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exOrderId:");
    if (this.exOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.exOrderId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (authVO == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authVO' was not present! Struct: " + toString());
    }
    if (exOrderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exOrderId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (authVO != null) {
      authVO.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChangeTicketRecStatusToYesReqStandardSchemeFactory implements SchemeFactory {
    public ChangeTicketRecStatusToYesReqStandardScheme getScheme() {
      return new ChangeTicketRecStatusToYesReqStandardScheme();
    }
  }

  private static class ChangeTicketRecStatusToYesReqStandardScheme extends StandardScheme<ChangeTicketRecStatusToYesReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChangeTicketRecStatusToYesReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.authVO = new AuthVO();
              struct.authVO.read(iprot);
              struct.setAuthVOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EX_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exOrderId = iprot.readString();
              struct.setExOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChangeTicketRecStatusToYesReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.authVO != null) {
        oprot.writeFieldBegin(AUTH_VO_FIELD_DESC);
        struct.authVO.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exOrderId != null) {
        oprot.writeFieldBegin(EX_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.exOrderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChangeTicketRecStatusToYesReqTupleSchemeFactory implements SchemeFactory {
    public ChangeTicketRecStatusToYesReqTupleScheme getScheme() {
      return new ChangeTicketRecStatusToYesReqTupleScheme();
    }
  }

  private static class ChangeTicketRecStatusToYesReqTupleScheme extends TupleScheme<ChangeTicketRecStatusToYesReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChangeTicketRecStatusToYesReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.authVO.write(oprot);
      oprot.writeString(struct.exOrderId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChangeTicketRecStatusToYesReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.authVO = new AuthVO();
      struct.authVO.read(iprot);
      struct.setAuthVOIsSet(true);
      struct.exOrderId = iprot.readString();
      struct.setExOrderIdIsSet(true);
    }
  }

}

