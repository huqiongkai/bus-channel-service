/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 预定时客人信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-24")
public class PsgInfo implements org.apache.thrift.TBase<PsgInfo, PsgInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PsgInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PsgInfo");

  private static final org.apache.thrift.protocol.TField PSG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("psgName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PSG_CERTIFICATE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("psgCertificateNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PSG_CERTIFICATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("psgCertificateType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PsgInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PsgInfoTupleSchemeFactory());
  }

  /**
   * 客人姓名
   */
  public String psgName; // required
  /**
   * 证件号
   */
  public String psgCertificateNo; // required
  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public CertificateType psgCertificateType; // required
  /**
   * 订单客人手机号
   */
  public String mobile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客人姓名
     */
    PSG_NAME((short)1, "psgName"),
    /**
     * 证件号
     */
    PSG_CERTIFICATE_NO((short)2, "psgCertificateNo"),
    /**
     * 证件类型
     * 
     * @see CertificateType
     */
    PSG_CERTIFICATE_TYPE((short)3, "psgCertificateType"),
    /**
     * 订单客人手机号
     */
    MOBILE((short)4, "mobile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PSG_NAME
          return PSG_NAME;
        case 2: // PSG_CERTIFICATE_NO
          return PSG_CERTIFICATE_NO;
        case 3: // PSG_CERTIFICATE_TYPE
          return PSG_CERTIFICATE_TYPE;
        case 4: // MOBILE
          return MOBILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PSG_NAME, new org.apache.thrift.meta_data.FieldMetaData("psgName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_CERTIFICATE_NO, new org.apache.thrift.meta_data.FieldMetaData("psgCertificateNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_CERTIFICATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("psgCertificateType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CertificateType.class)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PsgInfo.class, metaDataMap);
  }

  public PsgInfo() {
  }

  public PsgInfo(
    String psgName,
    String psgCertificateNo,
    CertificateType psgCertificateType,
    String mobile)
  {
    this();
    this.psgName = psgName;
    this.psgCertificateNo = psgCertificateNo;
    this.psgCertificateType = psgCertificateType;
    this.mobile = mobile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PsgInfo(PsgInfo other) {
    if (other.isSetPsgName()) {
      this.psgName = other.psgName;
    }
    if (other.isSetPsgCertificateNo()) {
      this.psgCertificateNo = other.psgCertificateNo;
    }
    if (other.isSetPsgCertificateType()) {
      this.psgCertificateType = other.psgCertificateType;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
  }

  public PsgInfo deepCopy() {
    return new PsgInfo(this);
  }

  @Override
  public void clear() {
    this.psgName = null;
    this.psgCertificateNo = null;
    this.psgCertificateType = null;
    this.mobile = null;
  }

  /**
   * 客人姓名
   */
  public String getPsgName() {
    return this.psgName;
  }

  /**
   * 客人姓名
   */
  public PsgInfo setPsgName(String psgName) {
    this.psgName = psgName;
    return this;
  }

  public void unsetPsgName() {
    this.psgName = null;
  }

  /** Returns true if field psgName is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgName() {
    return this.psgName != null;
  }

  public void setPsgNameIsSet(boolean value) {
    if (!value) {
      this.psgName = null;
    }
  }

  /**
   * 证件号
   */
  public String getPsgCertificateNo() {
    return this.psgCertificateNo;
  }

  /**
   * 证件号
   */
  public PsgInfo setPsgCertificateNo(String psgCertificateNo) {
    this.psgCertificateNo = psgCertificateNo;
    return this;
  }

  public void unsetPsgCertificateNo() {
    this.psgCertificateNo = null;
  }

  /** Returns true if field psgCertificateNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgCertificateNo() {
    return this.psgCertificateNo != null;
  }

  public void setPsgCertificateNoIsSet(boolean value) {
    if (!value) {
      this.psgCertificateNo = null;
    }
  }

  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public CertificateType getPsgCertificateType() {
    return this.psgCertificateType;
  }

  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public PsgInfo setPsgCertificateType(CertificateType psgCertificateType) {
    this.psgCertificateType = psgCertificateType;
    return this;
  }

  public void unsetPsgCertificateType() {
    this.psgCertificateType = null;
  }

  /** Returns true if field psgCertificateType is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgCertificateType() {
    return this.psgCertificateType != null;
  }

  public void setPsgCertificateTypeIsSet(boolean value) {
    if (!value) {
      this.psgCertificateType = null;
    }
  }

  /**
   * 订单客人手机号
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 订单客人手机号
   */
  public PsgInfo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PSG_NAME:
      if (value == null) {
        unsetPsgName();
      } else {
        setPsgName((String)value);
      }
      break;

    case PSG_CERTIFICATE_NO:
      if (value == null) {
        unsetPsgCertificateNo();
      } else {
        setPsgCertificateNo((String)value);
      }
      break;

    case PSG_CERTIFICATE_TYPE:
      if (value == null) {
        unsetPsgCertificateType();
      } else {
        setPsgCertificateType((CertificateType)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PSG_NAME:
      return getPsgName();

    case PSG_CERTIFICATE_NO:
      return getPsgCertificateNo();

    case PSG_CERTIFICATE_TYPE:
      return getPsgCertificateType();

    case MOBILE:
      return getMobile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PSG_NAME:
      return isSetPsgName();
    case PSG_CERTIFICATE_NO:
      return isSetPsgCertificateNo();
    case PSG_CERTIFICATE_TYPE:
      return isSetPsgCertificateType();
    case MOBILE:
      return isSetMobile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PsgInfo)
      return this.equals((PsgInfo)that);
    return false;
  }

  public boolean equals(PsgInfo that) {
    if (that == null)
      return false;

    boolean this_present_psgName = true && this.isSetPsgName();
    boolean that_present_psgName = true && that.isSetPsgName();
    if (this_present_psgName || that_present_psgName) {
      if (!(this_present_psgName && that_present_psgName))
        return false;
      if (!this.psgName.equals(that.psgName))
        return false;
    }

    boolean this_present_psgCertificateNo = true && this.isSetPsgCertificateNo();
    boolean that_present_psgCertificateNo = true && that.isSetPsgCertificateNo();
    if (this_present_psgCertificateNo || that_present_psgCertificateNo) {
      if (!(this_present_psgCertificateNo && that_present_psgCertificateNo))
        return false;
      if (!this.psgCertificateNo.equals(that.psgCertificateNo))
        return false;
    }

    boolean this_present_psgCertificateType = true && this.isSetPsgCertificateType();
    boolean that_present_psgCertificateType = true && that.isSetPsgCertificateType();
    if (this_present_psgCertificateType || that_present_psgCertificateType) {
      if (!(this_present_psgCertificateType && that_present_psgCertificateType))
        return false;
      if (!this.psgCertificateType.equals(that.psgCertificateType))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_psgName = true && (isSetPsgName());
    list.add(present_psgName);
    if (present_psgName)
      list.add(psgName);

    boolean present_psgCertificateNo = true && (isSetPsgCertificateNo());
    list.add(present_psgCertificateNo);
    if (present_psgCertificateNo)
      list.add(psgCertificateNo);

    boolean present_psgCertificateType = true && (isSetPsgCertificateType());
    list.add(present_psgCertificateType);
    if (present_psgCertificateType)
      list.add(psgCertificateType.getValue());

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    return list.hashCode();
  }

  @Override
  public int compareTo(PsgInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPsgName()).compareTo(other.isSetPsgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgName, other.psgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgCertificateNo()).compareTo(other.isSetPsgCertificateNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgCertificateNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgCertificateNo, other.psgCertificateNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgCertificateType()).compareTo(other.isSetPsgCertificateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgCertificateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgCertificateType, other.psgCertificateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PsgInfo(");
    boolean first = true;

    sb.append("psgName:");
    if (this.psgName == null) {
      sb.append("null");
    } else {
      sb.append(this.psgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgCertificateNo:");
    if (this.psgCertificateNo == null) {
      sb.append("null");
    } else {
      sb.append(this.psgCertificateNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgCertificateType:");
    if (this.psgCertificateType == null) {
      sb.append("null");
    } else {
      sb.append(this.psgCertificateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (psgName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'psgName' was not present! Struct: " + toString());
    }
    if (psgCertificateNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'psgCertificateNo' was not present! Struct: " + toString());
    }
    if (psgCertificateType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'psgCertificateType' was not present! Struct: " + toString());
    }
    if (mobile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mobile' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PsgInfoStandardSchemeFactory implements SchemeFactory {
    public PsgInfoStandardScheme getScheme() {
      return new PsgInfoStandardScheme();
    }
  }

  private static class PsgInfoStandardScheme extends StandardScheme<PsgInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PsgInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PSG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgName = iprot.readString();
              struct.setPsgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PSG_CERTIFICATE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgCertificateNo = iprot.readString();
              struct.setPsgCertificateNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PSG_CERTIFICATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.psgCertificateType = com.shbus.easybus.thrift.front.CertificateType.findByValue(iprot.readI32());
              struct.setPsgCertificateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PsgInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.psgName != null) {
        oprot.writeFieldBegin(PSG_NAME_FIELD_DESC);
        oprot.writeString(struct.psgName);
        oprot.writeFieldEnd();
      }
      if (struct.psgCertificateNo != null) {
        oprot.writeFieldBegin(PSG_CERTIFICATE_NO_FIELD_DESC);
        oprot.writeString(struct.psgCertificateNo);
        oprot.writeFieldEnd();
      }
      if (struct.psgCertificateType != null) {
        oprot.writeFieldBegin(PSG_CERTIFICATE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.psgCertificateType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PsgInfoTupleSchemeFactory implements SchemeFactory {
    public PsgInfoTupleScheme getScheme() {
      return new PsgInfoTupleScheme();
    }
  }

  private static class PsgInfoTupleScheme extends TupleScheme<PsgInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PsgInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.psgName);
      oprot.writeString(struct.psgCertificateNo);
      oprot.writeI32(struct.psgCertificateType.getValue());
      oprot.writeString(struct.mobile);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PsgInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.psgName = iprot.readString();
      struct.setPsgNameIsSet(true);
      struct.psgCertificateNo = iprot.readString();
      struct.setPsgCertificateNoIsSet(true);
      struct.psgCertificateType = com.shbus.easybus.thrift.front.CertificateType.findByValue(iprot.readI32());
      struct.setPsgCertificateTypeIsSet(true);
      struct.mobile = iprot.readString();
      struct.setMobileIsSet(true);
    }
  }

}

