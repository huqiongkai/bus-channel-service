/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 车次打包信息VO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-24")
public class BusPkgVO implements org.apache.thrift.TBase<BusPkgVO, BusPkgVO._Fields>, java.io.Serializable, Cloneable, Comparable<BusPkgVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusPkgVO");

  private static final org.apache.thrift.protocol.TField PKG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pkgName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PKG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("pkgDesc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EX_BUS_PKG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exBusPkgId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BUS_PKG_INFO_ELE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("busPkgInfoEleList", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField BUS_PKG_INFO_BUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("busPkgInfoBusList", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusPkgVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusPkgVOTupleSchemeFactory());
  }

  /**
   * 套餐名称
   */
  public String pkgName; // required
  /**
   * 套餐描述
   */
  public String pkgDesc; // required
  /**
   * 打包规则模板id
   */
  public long exBusPkgId; // required
  /**
   * 打包非车票规则
   */
  public Set<BusPkgInfoEleVO> busPkgInfoEleList; // required
  /**
   * 打包车票规则
   */
  public Set<BusPkgInfoBusVO> busPkgInfoBusList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 套餐名称
     */
    PKG_NAME((short)1, "pkgName"),
    /**
     * 套餐描述
     */
    PKG_DESC((short)2, "pkgDesc"),
    /**
     * 打包规则模板id
     */
    EX_BUS_PKG_ID((short)3, "exBusPkgId"),
    /**
     * 打包非车票规则
     */
    BUS_PKG_INFO_ELE_LIST((short)4, "busPkgInfoEleList"),
    /**
     * 打包车票规则
     */
    BUS_PKG_INFO_BUS_LIST((short)5, "busPkgInfoBusList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PKG_NAME
          return PKG_NAME;
        case 2: // PKG_DESC
          return PKG_DESC;
        case 3: // EX_BUS_PKG_ID
          return EX_BUS_PKG_ID;
        case 4: // BUS_PKG_INFO_ELE_LIST
          return BUS_PKG_INFO_ELE_LIST;
        case 5: // BUS_PKG_INFO_BUS_LIST
          return BUS_PKG_INFO_BUS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXBUSPKGID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PKG_NAME, new org.apache.thrift.meta_data.FieldMetaData("pkgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PKG_DESC, new org.apache.thrift.meta_data.FieldMetaData("pkgDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX_BUS_PKG_ID, new org.apache.thrift.meta_data.FieldMetaData("exBusPkgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUS_PKG_INFO_ELE_LIST, new org.apache.thrift.meta_data.FieldMetaData("busPkgInfoEleList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusPkgInfoEleVO.class))));
    tmpMap.put(_Fields.BUS_PKG_INFO_BUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("busPkgInfoBusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusPkgInfoBusVO.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusPkgVO.class, metaDataMap);
  }

  public BusPkgVO() {
  }

  public BusPkgVO(
    String pkgName,
    String pkgDesc,
    long exBusPkgId,
    Set<BusPkgInfoEleVO> busPkgInfoEleList,
    Set<BusPkgInfoBusVO> busPkgInfoBusList)
  {
    this();
    this.pkgName = pkgName;
    this.pkgDesc = pkgDesc;
    this.exBusPkgId = exBusPkgId;
    setExBusPkgIdIsSet(true);
    this.busPkgInfoEleList = busPkgInfoEleList;
    this.busPkgInfoBusList = busPkgInfoBusList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusPkgVO(BusPkgVO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPkgName()) {
      this.pkgName = other.pkgName;
    }
    if (other.isSetPkgDesc()) {
      this.pkgDesc = other.pkgDesc;
    }
    this.exBusPkgId = other.exBusPkgId;
    if (other.isSetBusPkgInfoEleList()) {
      Set<BusPkgInfoEleVO> __this__busPkgInfoEleList = new HashSet<BusPkgInfoEleVO>(other.busPkgInfoEleList.size());
      for (BusPkgInfoEleVO other_element : other.busPkgInfoEleList) {
        __this__busPkgInfoEleList.add(new BusPkgInfoEleVO(other_element));
      }
      this.busPkgInfoEleList = __this__busPkgInfoEleList;
    }
    if (other.isSetBusPkgInfoBusList()) {
      Set<BusPkgInfoBusVO> __this__busPkgInfoBusList = new HashSet<BusPkgInfoBusVO>(other.busPkgInfoBusList.size());
      for (BusPkgInfoBusVO other_element : other.busPkgInfoBusList) {
        __this__busPkgInfoBusList.add(new BusPkgInfoBusVO(other_element));
      }
      this.busPkgInfoBusList = __this__busPkgInfoBusList;
    }
  }

  public BusPkgVO deepCopy() {
    return new BusPkgVO(this);
  }

  @Override
  public void clear() {
    this.pkgName = null;
    this.pkgDesc = null;
    setExBusPkgIdIsSet(false);
    this.exBusPkgId = 0;
    this.busPkgInfoEleList = null;
    this.busPkgInfoBusList = null;
  }

  /**
   * 套餐名称
   */
  public String getPkgName() {
    return this.pkgName;
  }

  /**
   * 套餐名称
   */
  public BusPkgVO setPkgName(String pkgName) {
    this.pkgName = pkgName;
    return this;
  }

  public void unsetPkgName() {
    this.pkgName = null;
  }

  /** Returns true if field pkgName is set (has been assigned a value) and false otherwise */
  public boolean isSetPkgName() {
    return this.pkgName != null;
  }

  public void setPkgNameIsSet(boolean value) {
    if (!value) {
      this.pkgName = null;
    }
  }

  /**
   * 套餐描述
   */
  public String getPkgDesc() {
    return this.pkgDesc;
  }

  /**
   * 套餐描述
   */
  public BusPkgVO setPkgDesc(String pkgDesc) {
    this.pkgDesc = pkgDesc;
    return this;
  }

  public void unsetPkgDesc() {
    this.pkgDesc = null;
  }

  /** Returns true if field pkgDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetPkgDesc() {
    return this.pkgDesc != null;
  }

  public void setPkgDescIsSet(boolean value) {
    if (!value) {
      this.pkgDesc = null;
    }
  }

  /**
   * 打包规则模板id
   */
  public long getExBusPkgId() {
    return this.exBusPkgId;
  }

  /**
   * 打包规则模板id
   */
  public BusPkgVO setExBusPkgId(long exBusPkgId) {
    this.exBusPkgId = exBusPkgId;
    setExBusPkgIdIsSet(true);
    return this;
  }

  public void unsetExBusPkgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXBUSPKGID_ISSET_ID);
  }

  /** Returns true if field exBusPkgId is set (has been assigned a value) and false otherwise */
  public boolean isSetExBusPkgId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXBUSPKGID_ISSET_ID);
  }

  public void setExBusPkgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXBUSPKGID_ISSET_ID, value);
  }

  public int getBusPkgInfoEleListSize() {
    return (this.busPkgInfoEleList == null) ? 0 : this.busPkgInfoEleList.size();
  }

  public java.util.Iterator<BusPkgInfoEleVO> getBusPkgInfoEleListIterator() {
    return (this.busPkgInfoEleList == null) ? null : this.busPkgInfoEleList.iterator();
  }

  public void addToBusPkgInfoEleList(BusPkgInfoEleVO elem) {
    if (this.busPkgInfoEleList == null) {
      this.busPkgInfoEleList = new HashSet<BusPkgInfoEleVO>();
    }
    this.busPkgInfoEleList.add(elem);
  }

  /**
   * 打包非车票规则
   */
  public Set<BusPkgInfoEleVO> getBusPkgInfoEleList() {
    return this.busPkgInfoEleList;
  }

  /**
   * 打包非车票规则
   */
  public BusPkgVO setBusPkgInfoEleList(Set<BusPkgInfoEleVO> busPkgInfoEleList) {
    this.busPkgInfoEleList = busPkgInfoEleList;
    return this;
  }

  public void unsetBusPkgInfoEleList() {
    this.busPkgInfoEleList = null;
  }

  /** Returns true if field busPkgInfoEleList is set (has been assigned a value) and false otherwise */
  public boolean isSetBusPkgInfoEleList() {
    return this.busPkgInfoEleList != null;
  }

  public void setBusPkgInfoEleListIsSet(boolean value) {
    if (!value) {
      this.busPkgInfoEleList = null;
    }
  }

  public int getBusPkgInfoBusListSize() {
    return (this.busPkgInfoBusList == null) ? 0 : this.busPkgInfoBusList.size();
  }

  public java.util.Iterator<BusPkgInfoBusVO> getBusPkgInfoBusListIterator() {
    return (this.busPkgInfoBusList == null) ? null : this.busPkgInfoBusList.iterator();
  }

  public void addToBusPkgInfoBusList(BusPkgInfoBusVO elem) {
    if (this.busPkgInfoBusList == null) {
      this.busPkgInfoBusList = new HashSet<BusPkgInfoBusVO>();
    }
    this.busPkgInfoBusList.add(elem);
  }

  /**
   * 打包车票规则
   */
  public Set<BusPkgInfoBusVO> getBusPkgInfoBusList() {
    return this.busPkgInfoBusList;
  }

  /**
   * 打包车票规则
   */
  public BusPkgVO setBusPkgInfoBusList(Set<BusPkgInfoBusVO> busPkgInfoBusList) {
    this.busPkgInfoBusList = busPkgInfoBusList;
    return this;
  }

  public void unsetBusPkgInfoBusList() {
    this.busPkgInfoBusList = null;
  }

  /** Returns true if field busPkgInfoBusList is set (has been assigned a value) and false otherwise */
  public boolean isSetBusPkgInfoBusList() {
    return this.busPkgInfoBusList != null;
  }

  public void setBusPkgInfoBusListIsSet(boolean value) {
    if (!value) {
      this.busPkgInfoBusList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PKG_NAME:
      if (value == null) {
        unsetPkgName();
      } else {
        setPkgName((String)value);
      }
      break;

    case PKG_DESC:
      if (value == null) {
        unsetPkgDesc();
      } else {
        setPkgDesc((String)value);
      }
      break;

    case EX_BUS_PKG_ID:
      if (value == null) {
        unsetExBusPkgId();
      } else {
        setExBusPkgId((Long)value);
      }
      break;

    case BUS_PKG_INFO_ELE_LIST:
      if (value == null) {
        unsetBusPkgInfoEleList();
      } else {
        setBusPkgInfoEleList((Set<BusPkgInfoEleVO>)value);
      }
      break;

    case BUS_PKG_INFO_BUS_LIST:
      if (value == null) {
        unsetBusPkgInfoBusList();
      } else {
        setBusPkgInfoBusList((Set<BusPkgInfoBusVO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PKG_NAME:
      return getPkgName();

    case PKG_DESC:
      return getPkgDesc();

    case EX_BUS_PKG_ID:
      return getExBusPkgId();

    case BUS_PKG_INFO_ELE_LIST:
      return getBusPkgInfoEleList();

    case BUS_PKG_INFO_BUS_LIST:
      return getBusPkgInfoBusList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PKG_NAME:
      return isSetPkgName();
    case PKG_DESC:
      return isSetPkgDesc();
    case EX_BUS_PKG_ID:
      return isSetExBusPkgId();
    case BUS_PKG_INFO_ELE_LIST:
      return isSetBusPkgInfoEleList();
    case BUS_PKG_INFO_BUS_LIST:
      return isSetBusPkgInfoBusList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusPkgVO)
      return this.equals((BusPkgVO)that);
    return false;
  }

  public boolean equals(BusPkgVO that) {
    if (that == null)
      return false;

    boolean this_present_pkgName = true && this.isSetPkgName();
    boolean that_present_pkgName = true && that.isSetPkgName();
    if (this_present_pkgName || that_present_pkgName) {
      if (!(this_present_pkgName && that_present_pkgName))
        return false;
      if (!this.pkgName.equals(that.pkgName))
        return false;
    }

    boolean this_present_pkgDesc = true && this.isSetPkgDesc();
    boolean that_present_pkgDesc = true && that.isSetPkgDesc();
    if (this_present_pkgDesc || that_present_pkgDesc) {
      if (!(this_present_pkgDesc && that_present_pkgDesc))
        return false;
      if (!this.pkgDesc.equals(that.pkgDesc))
        return false;
    }

    boolean this_present_exBusPkgId = true;
    boolean that_present_exBusPkgId = true;
    if (this_present_exBusPkgId || that_present_exBusPkgId) {
      if (!(this_present_exBusPkgId && that_present_exBusPkgId))
        return false;
      if (this.exBusPkgId != that.exBusPkgId)
        return false;
    }

    boolean this_present_busPkgInfoEleList = true && this.isSetBusPkgInfoEleList();
    boolean that_present_busPkgInfoEleList = true && that.isSetBusPkgInfoEleList();
    if (this_present_busPkgInfoEleList || that_present_busPkgInfoEleList) {
      if (!(this_present_busPkgInfoEleList && that_present_busPkgInfoEleList))
        return false;
      if (!this.busPkgInfoEleList.equals(that.busPkgInfoEleList))
        return false;
    }

    boolean this_present_busPkgInfoBusList = true && this.isSetBusPkgInfoBusList();
    boolean that_present_busPkgInfoBusList = true && that.isSetBusPkgInfoBusList();
    if (this_present_busPkgInfoBusList || that_present_busPkgInfoBusList) {
      if (!(this_present_busPkgInfoBusList && that_present_busPkgInfoBusList))
        return false;
      if (!this.busPkgInfoBusList.equals(that.busPkgInfoBusList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pkgName = true && (isSetPkgName());
    list.add(present_pkgName);
    if (present_pkgName)
      list.add(pkgName);

    boolean present_pkgDesc = true && (isSetPkgDesc());
    list.add(present_pkgDesc);
    if (present_pkgDesc)
      list.add(pkgDesc);

    boolean present_exBusPkgId = true;
    list.add(present_exBusPkgId);
    if (present_exBusPkgId)
      list.add(exBusPkgId);

    boolean present_busPkgInfoEleList = true && (isSetBusPkgInfoEleList());
    list.add(present_busPkgInfoEleList);
    if (present_busPkgInfoEleList)
      list.add(busPkgInfoEleList);

    boolean present_busPkgInfoBusList = true && (isSetBusPkgInfoBusList());
    list.add(present_busPkgInfoBusList);
    if (present_busPkgInfoBusList)
      list.add(busPkgInfoBusList);

    return list.hashCode();
  }

  @Override
  public int compareTo(BusPkgVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPkgName()).compareTo(other.isSetPkgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkgName, other.pkgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPkgDesc()).compareTo(other.isSetPkgDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkgDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkgDesc, other.pkgDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExBusPkgId()).compareTo(other.isSetExBusPkgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExBusPkgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exBusPkgId, other.exBusPkgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusPkgInfoEleList()).compareTo(other.isSetBusPkgInfoEleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusPkgInfoEleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busPkgInfoEleList, other.busPkgInfoEleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusPkgInfoBusList()).compareTo(other.isSetBusPkgInfoBusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusPkgInfoBusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busPkgInfoBusList, other.busPkgInfoBusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusPkgVO(");
    boolean first = true;

    sb.append("pkgName:");
    if (this.pkgName == null) {
      sb.append("null");
    } else {
      sb.append(this.pkgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pkgDesc:");
    if (this.pkgDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.pkgDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exBusPkgId:");
    sb.append(this.exBusPkgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("busPkgInfoEleList:");
    if (this.busPkgInfoEleList == null) {
      sb.append("null");
    } else {
      sb.append(this.busPkgInfoEleList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busPkgInfoBusList:");
    if (this.busPkgInfoBusList == null) {
      sb.append("null");
    } else {
      sb.append(this.busPkgInfoBusList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusPkgVOStandardSchemeFactory implements SchemeFactory {
    public BusPkgVOStandardScheme getScheme() {
      return new BusPkgVOStandardScheme();
    }
  }

  private static class BusPkgVOStandardScheme extends StandardScheme<BusPkgVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusPkgVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PKG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pkgName = iprot.readString();
              struct.setPkgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PKG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pkgDesc = iprot.readString();
              struct.setPkgDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EX_BUS_PKG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exBusPkgId = iprot.readI64();
              struct.setExBusPkgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUS_PKG_INFO_ELE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.busPkgInfoEleList = new HashSet<BusPkgInfoEleVO>(2*_set0.size);
                BusPkgInfoEleVO _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new BusPkgInfoEleVO();
                  _elem1.read(iprot);
                  struct.busPkgInfoEleList.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setBusPkgInfoEleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUS_PKG_INFO_BUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.busPkgInfoBusList = new HashSet<BusPkgInfoBusVO>(2*_set3.size);
                BusPkgInfoBusVO _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = new BusPkgInfoBusVO();
                  _elem4.read(iprot);
                  struct.busPkgInfoBusList.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setBusPkgInfoBusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusPkgVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pkgName != null) {
        oprot.writeFieldBegin(PKG_NAME_FIELD_DESC);
        oprot.writeString(struct.pkgName);
        oprot.writeFieldEnd();
      }
      if (struct.pkgDesc != null) {
        oprot.writeFieldBegin(PKG_DESC_FIELD_DESC);
        oprot.writeString(struct.pkgDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EX_BUS_PKG_ID_FIELD_DESC);
      oprot.writeI64(struct.exBusPkgId);
      oprot.writeFieldEnd();
      if (struct.busPkgInfoEleList != null) {
        oprot.writeFieldBegin(BUS_PKG_INFO_ELE_LIST_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.busPkgInfoEleList.size()));
          for (BusPkgInfoEleVO _iter6 : struct.busPkgInfoEleList)
          {
            _iter6.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.busPkgInfoBusList != null) {
        oprot.writeFieldBegin(BUS_PKG_INFO_BUS_LIST_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.busPkgInfoBusList.size()));
          for (BusPkgInfoBusVO _iter7 : struct.busPkgInfoBusList)
          {
            _iter7.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusPkgVOTupleSchemeFactory implements SchemeFactory {
    public BusPkgVOTupleScheme getScheme() {
      return new BusPkgVOTupleScheme();
    }
  }

  private static class BusPkgVOTupleScheme extends TupleScheme<BusPkgVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusPkgVO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPkgName()) {
        optionals.set(0);
      }
      if (struct.isSetPkgDesc()) {
        optionals.set(1);
      }
      if (struct.isSetExBusPkgId()) {
        optionals.set(2);
      }
      if (struct.isSetBusPkgInfoEleList()) {
        optionals.set(3);
      }
      if (struct.isSetBusPkgInfoBusList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPkgName()) {
        oprot.writeString(struct.pkgName);
      }
      if (struct.isSetPkgDesc()) {
        oprot.writeString(struct.pkgDesc);
      }
      if (struct.isSetExBusPkgId()) {
        oprot.writeI64(struct.exBusPkgId);
      }
      if (struct.isSetBusPkgInfoEleList()) {
        {
          oprot.writeI32(struct.busPkgInfoEleList.size());
          for (BusPkgInfoEleVO _iter8 : struct.busPkgInfoEleList)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetBusPkgInfoBusList()) {
        {
          oprot.writeI32(struct.busPkgInfoBusList.size());
          for (BusPkgInfoBusVO _iter9 : struct.busPkgInfoBusList)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusPkgVO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pkgName = iprot.readString();
        struct.setPkgNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pkgDesc = iprot.readString();
        struct.setPkgDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exBusPkgId = iprot.readI64();
        struct.setExBusPkgIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set10 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.busPkgInfoEleList = new HashSet<BusPkgInfoEleVO>(2*_set10.size);
          BusPkgInfoEleVO _elem11;
          for (int _i12 = 0; _i12 < _set10.size; ++_i12)
          {
            _elem11 = new BusPkgInfoEleVO();
            _elem11.read(iprot);
            struct.busPkgInfoEleList.add(_elem11);
          }
        }
        struct.setBusPkgInfoEleListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.busPkgInfoBusList = new HashSet<BusPkgInfoBusVO>(2*_set13.size);
          BusPkgInfoBusVO _elem14;
          for (int _i15 = 0; _i15 < _set13.size; ++_i15)
          {
            _elem14 = new BusPkgInfoBusVO();
            _elem14.read(iprot);
            struct.busPkgInfoBusList.add(_elem14);
          }
        }
        struct.setBusPkgInfoBusListIsSet(true);
      }
    }
  }

}

