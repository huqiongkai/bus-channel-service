/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.thrift.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 中国行政区域信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-24")
public class SysChinaRegion implements org.apache.thrift.TBase<SysChinaRegion, SysChinaRegion._Fields>, java.io.Serializable, Cloneable, Comparable<SysChinaRegion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysChinaRegion");

  private static final org.apache.thrift.protocol.TField REGION_CODE6_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCode6", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REGION_CODE3_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCode3", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REGION_CNNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCnname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_PINYIN_FIELD_DESC = new org.apache.thrift.protocol.TField("regionPinyin", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARENT_PROVINCE_CNNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parentProvinceCnname", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_PROVINCE_PINYIN_FIELD_DESC = new org.apache.thrift.protocol.TField("parentProvincePinyin", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARENT_PROVINCE_CODE6_FIELD_DESC = new org.apache.thrift.protocol.TField("parentProvinceCode6", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_CITY_CNNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCityCnname", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PARENT_CITY_PINYIN_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCityPinyin", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARENT_CITY_CODE6_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCityCode6", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PARENT_CITY_CODE3_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCityCode3", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysChinaRegionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysChinaRegionTupleSchemeFactory());
  }

  /**
   * 区域6字码
   */
  public String regionCode6; // required
  /**
   * 区域三字码
   */
  public String regionCode3; // required
  /**
   * 区域中文名称
   */
  public String regionCnname; // required
  /**
   * 所在区域拼音
   */
  public String regionPinyin; // required
  /**
   * 所在省份中文名称
   */
  public String parentProvinceCnname; // required
  /**
   * 所在省份拼音
   */
  public String parentProvincePinyin; // required
  /**
   * 所在省份6字代码
   */
  public String parentProvinceCode6; // required
  /**
   * 所在城市中文名称
   */
  public String parentCityCnname; // required
  /**
   * 所在城市拼音
   */
  public String parentCityPinyin; // required
  /**
   * 所在城市行政区划6字码（字母 开头的属于自定义的代码）
   */
  public String parentCityCode6; // required
  /**
   * 所在城市三字码
   */
  public String parentCityCode3; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 区域6字码
     */
    REGION_CODE6((short)1, "regionCode6"),
    /**
     * 区域三字码
     */
    REGION_CODE3((short)2, "regionCode3"),
    /**
     * 区域中文名称
     */
    REGION_CNNAME((short)3, "regionCnname"),
    /**
     * 所在区域拼音
     */
    REGION_PINYIN((short)4, "regionPinyin"),
    /**
     * 所在省份中文名称
     */
    PARENT_PROVINCE_CNNAME((short)5, "parentProvinceCnname"),
    /**
     * 所在省份拼音
     */
    PARENT_PROVINCE_PINYIN((short)6, "parentProvincePinyin"),
    /**
     * 所在省份6字代码
     */
    PARENT_PROVINCE_CODE6((short)7, "parentProvinceCode6"),
    /**
     * 所在城市中文名称
     */
    PARENT_CITY_CNNAME((short)8, "parentCityCnname"),
    /**
     * 所在城市拼音
     */
    PARENT_CITY_PINYIN((short)9, "parentCityPinyin"),
    /**
     * 所在城市行政区划6字码（字母 开头的属于自定义的代码）
     */
    PARENT_CITY_CODE6((short)10, "parentCityCode6"),
    /**
     * 所在城市三字码
     */
    PARENT_CITY_CODE3((short)11, "parentCityCode3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REGION_CODE6
          return REGION_CODE6;
        case 2: // REGION_CODE3
          return REGION_CODE3;
        case 3: // REGION_CNNAME
          return REGION_CNNAME;
        case 4: // REGION_PINYIN
          return REGION_PINYIN;
        case 5: // PARENT_PROVINCE_CNNAME
          return PARENT_PROVINCE_CNNAME;
        case 6: // PARENT_PROVINCE_PINYIN
          return PARENT_PROVINCE_PINYIN;
        case 7: // PARENT_PROVINCE_CODE6
          return PARENT_PROVINCE_CODE6;
        case 8: // PARENT_CITY_CNNAME
          return PARENT_CITY_CNNAME;
        case 9: // PARENT_CITY_PINYIN
          return PARENT_CITY_PINYIN;
        case 10: // PARENT_CITY_CODE6
          return PARENT_CITY_CODE6;
        case 11: // PARENT_CITY_CODE3
          return PARENT_CITY_CODE3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REGION_CODE6, new org.apache.thrift.meta_data.FieldMetaData("regionCode6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_CODE3, new org.apache.thrift.meta_data.FieldMetaData("regionCode3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_CNNAME, new org.apache.thrift.meta_data.FieldMetaData("regionCnname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_PINYIN, new org.apache.thrift.meta_data.FieldMetaData("regionPinyin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_PROVINCE_CNNAME, new org.apache.thrift.meta_data.FieldMetaData("parentProvinceCnname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_PROVINCE_PINYIN, new org.apache.thrift.meta_data.FieldMetaData("parentProvincePinyin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_PROVINCE_CODE6, new org.apache.thrift.meta_data.FieldMetaData("parentProvinceCode6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_CITY_CNNAME, new org.apache.thrift.meta_data.FieldMetaData("parentCityCnname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_CITY_PINYIN, new org.apache.thrift.meta_data.FieldMetaData("parentCityPinyin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_CITY_CODE6, new org.apache.thrift.meta_data.FieldMetaData("parentCityCode6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_CITY_CODE3, new org.apache.thrift.meta_data.FieldMetaData("parentCityCode3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysChinaRegion.class, metaDataMap);
  }

  public SysChinaRegion() {
  }

  public SysChinaRegion(
    String regionCode6,
    String regionCode3,
    String regionCnname,
    String regionPinyin,
    String parentProvinceCnname,
    String parentProvincePinyin,
    String parentProvinceCode6,
    String parentCityCnname,
    String parentCityPinyin,
    String parentCityCode6,
    String parentCityCode3)
  {
    this();
    this.regionCode6 = regionCode6;
    this.regionCode3 = regionCode3;
    this.regionCnname = regionCnname;
    this.regionPinyin = regionPinyin;
    this.parentProvinceCnname = parentProvinceCnname;
    this.parentProvincePinyin = parentProvincePinyin;
    this.parentProvinceCode6 = parentProvinceCode6;
    this.parentCityCnname = parentCityCnname;
    this.parentCityPinyin = parentCityPinyin;
    this.parentCityCode6 = parentCityCode6;
    this.parentCityCode3 = parentCityCode3;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysChinaRegion(SysChinaRegion other) {
    if (other.isSetRegionCode6()) {
      this.regionCode6 = other.regionCode6;
    }
    if (other.isSetRegionCode3()) {
      this.regionCode3 = other.regionCode3;
    }
    if (other.isSetRegionCnname()) {
      this.regionCnname = other.regionCnname;
    }
    if (other.isSetRegionPinyin()) {
      this.regionPinyin = other.regionPinyin;
    }
    if (other.isSetParentProvinceCnname()) {
      this.parentProvinceCnname = other.parentProvinceCnname;
    }
    if (other.isSetParentProvincePinyin()) {
      this.parentProvincePinyin = other.parentProvincePinyin;
    }
    if (other.isSetParentProvinceCode6()) {
      this.parentProvinceCode6 = other.parentProvinceCode6;
    }
    if (other.isSetParentCityCnname()) {
      this.parentCityCnname = other.parentCityCnname;
    }
    if (other.isSetParentCityPinyin()) {
      this.parentCityPinyin = other.parentCityPinyin;
    }
    if (other.isSetParentCityCode6()) {
      this.parentCityCode6 = other.parentCityCode6;
    }
    if (other.isSetParentCityCode3()) {
      this.parentCityCode3 = other.parentCityCode3;
    }
  }

  public SysChinaRegion deepCopy() {
    return new SysChinaRegion(this);
  }

  @Override
  public void clear() {
    this.regionCode6 = null;
    this.regionCode3 = null;
    this.regionCnname = null;
    this.regionPinyin = null;
    this.parentProvinceCnname = null;
    this.parentProvincePinyin = null;
    this.parentProvinceCode6 = null;
    this.parentCityCnname = null;
    this.parentCityPinyin = null;
    this.parentCityCode6 = null;
    this.parentCityCode3 = null;
  }

  /**
   * 区域6字码
   */
  public String getRegionCode6() {
    return this.regionCode6;
  }

  /**
   * 区域6字码
   */
  public SysChinaRegion setRegionCode6(String regionCode6) {
    this.regionCode6 = regionCode6;
    return this;
  }

  public void unsetRegionCode6() {
    this.regionCode6 = null;
  }

  /** Returns true if field regionCode6 is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCode6() {
    return this.regionCode6 != null;
  }

  public void setRegionCode6IsSet(boolean value) {
    if (!value) {
      this.regionCode6 = null;
    }
  }

  /**
   * 区域三字码
   */
  public String getRegionCode3() {
    return this.regionCode3;
  }

  /**
   * 区域三字码
   */
  public SysChinaRegion setRegionCode3(String regionCode3) {
    this.regionCode3 = regionCode3;
    return this;
  }

  public void unsetRegionCode3() {
    this.regionCode3 = null;
  }

  /** Returns true if field regionCode3 is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCode3() {
    return this.regionCode3 != null;
  }

  public void setRegionCode3IsSet(boolean value) {
    if (!value) {
      this.regionCode3 = null;
    }
  }

  /**
   * 区域中文名称
   */
  public String getRegionCnname() {
    return this.regionCnname;
  }

  /**
   * 区域中文名称
   */
  public SysChinaRegion setRegionCnname(String regionCnname) {
    this.regionCnname = regionCnname;
    return this;
  }

  public void unsetRegionCnname() {
    this.regionCnname = null;
  }

  /** Returns true if field regionCnname is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCnname() {
    return this.regionCnname != null;
  }

  public void setRegionCnnameIsSet(boolean value) {
    if (!value) {
      this.regionCnname = null;
    }
  }

  /**
   * 所在区域拼音
   */
  public String getRegionPinyin() {
    return this.regionPinyin;
  }

  /**
   * 所在区域拼音
   */
  public SysChinaRegion setRegionPinyin(String regionPinyin) {
    this.regionPinyin = regionPinyin;
    return this;
  }

  public void unsetRegionPinyin() {
    this.regionPinyin = null;
  }

  /** Returns true if field regionPinyin is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionPinyin() {
    return this.regionPinyin != null;
  }

  public void setRegionPinyinIsSet(boolean value) {
    if (!value) {
      this.regionPinyin = null;
    }
  }

  /**
   * 所在省份中文名称
   */
  public String getParentProvinceCnname() {
    return this.parentProvinceCnname;
  }

  /**
   * 所在省份中文名称
   */
  public SysChinaRegion setParentProvinceCnname(String parentProvinceCnname) {
    this.parentProvinceCnname = parentProvinceCnname;
    return this;
  }

  public void unsetParentProvinceCnname() {
    this.parentProvinceCnname = null;
  }

  /** Returns true if field parentProvinceCnname is set (has been assigned a value) and false otherwise */
  public boolean isSetParentProvinceCnname() {
    return this.parentProvinceCnname != null;
  }

  public void setParentProvinceCnnameIsSet(boolean value) {
    if (!value) {
      this.parentProvinceCnname = null;
    }
  }

  /**
   * 所在省份拼音
   */
  public String getParentProvincePinyin() {
    return this.parentProvincePinyin;
  }

  /**
   * 所在省份拼音
   */
  public SysChinaRegion setParentProvincePinyin(String parentProvincePinyin) {
    this.parentProvincePinyin = parentProvincePinyin;
    return this;
  }

  public void unsetParentProvincePinyin() {
    this.parentProvincePinyin = null;
  }

  /** Returns true if field parentProvincePinyin is set (has been assigned a value) and false otherwise */
  public boolean isSetParentProvincePinyin() {
    return this.parentProvincePinyin != null;
  }

  public void setParentProvincePinyinIsSet(boolean value) {
    if (!value) {
      this.parentProvincePinyin = null;
    }
  }

  /**
   * 所在省份6字代码
   */
  public String getParentProvinceCode6() {
    return this.parentProvinceCode6;
  }

  /**
   * 所在省份6字代码
   */
  public SysChinaRegion setParentProvinceCode6(String parentProvinceCode6) {
    this.parentProvinceCode6 = parentProvinceCode6;
    return this;
  }

  public void unsetParentProvinceCode6() {
    this.parentProvinceCode6 = null;
  }

  /** Returns true if field parentProvinceCode6 is set (has been assigned a value) and false otherwise */
  public boolean isSetParentProvinceCode6() {
    return this.parentProvinceCode6 != null;
  }

  public void setParentProvinceCode6IsSet(boolean value) {
    if (!value) {
      this.parentProvinceCode6 = null;
    }
  }

  /**
   * 所在城市中文名称
   */
  public String getParentCityCnname() {
    return this.parentCityCnname;
  }

  /**
   * 所在城市中文名称
   */
  public SysChinaRegion setParentCityCnname(String parentCityCnname) {
    this.parentCityCnname = parentCityCnname;
    return this;
  }

  public void unsetParentCityCnname() {
    this.parentCityCnname = null;
  }

  /** Returns true if field parentCityCnname is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCityCnname() {
    return this.parentCityCnname != null;
  }

  public void setParentCityCnnameIsSet(boolean value) {
    if (!value) {
      this.parentCityCnname = null;
    }
  }

  /**
   * 所在城市拼音
   */
  public String getParentCityPinyin() {
    return this.parentCityPinyin;
  }

  /**
   * 所在城市拼音
   */
  public SysChinaRegion setParentCityPinyin(String parentCityPinyin) {
    this.parentCityPinyin = parentCityPinyin;
    return this;
  }

  public void unsetParentCityPinyin() {
    this.parentCityPinyin = null;
  }

  /** Returns true if field parentCityPinyin is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCityPinyin() {
    return this.parentCityPinyin != null;
  }

  public void setParentCityPinyinIsSet(boolean value) {
    if (!value) {
      this.parentCityPinyin = null;
    }
  }

  /**
   * 所在城市行政区划6字码（字母 开头的属于自定义的代码）
   */
  public String getParentCityCode6() {
    return this.parentCityCode6;
  }

  /**
   * 所在城市行政区划6字码（字母 开头的属于自定义的代码）
   */
  public SysChinaRegion setParentCityCode6(String parentCityCode6) {
    this.parentCityCode6 = parentCityCode6;
    return this;
  }

  public void unsetParentCityCode6() {
    this.parentCityCode6 = null;
  }

  /** Returns true if field parentCityCode6 is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCityCode6() {
    return this.parentCityCode6 != null;
  }

  public void setParentCityCode6IsSet(boolean value) {
    if (!value) {
      this.parentCityCode6 = null;
    }
  }

  /**
   * 所在城市三字码
   */
  public String getParentCityCode3() {
    return this.parentCityCode3;
  }

  /**
   * 所在城市三字码
   */
  public SysChinaRegion setParentCityCode3(String parentCityCode3) {
    this.parentCityCode3 = parentCityCode3;
    return this;
  }

  public void unsetParentCityCode3() {
    this.parentCityCode3 = null;
  }

  /** Returns true if field parentCityCode3 is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCityCode3() {
    return this.parentCityCode3 != null;
  }

  public void setParentCityCode3IsSet(boolean value) {
    if (!value) {
      this.parentCityCode3 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REGION_CODE6:
      if (value == null) {
        unsetRegionCode6();
      } else {
        setRegionCode6((String)value);
      }
      break;

    case REGION_CODE3:
      if (value == null) {
        unsetRegionCode3();
      } else {
        setRegionCode3((String)value);
      }
      break;

    case REGION_CNNAME:
      if (value == null) {
        unsetRegionCnname();
      } else {
        setRegionCnname((String)value);
      }
      break;

    case REGION_PINYIN:
      if (value == null) {
        unsetRegionPinyin();
      } else {
        setRegionPinyin((String)value);
      }
      break;

    case PARENT_PROVINCE_CNNAME:
      if (value == null) {
        unsetParentProvinceCnname();
      } else {
        setParentProvinceCnname((String)value);
      }
      break;

    case PARENT_PROVINCE_PINYIN:
      if (value == null) {
        unsetParentProvincePinyin();
      } else {
        setParentProvincePinyin((String)value);
      }
      break;

    case PARENT_PROVINCE_CODE6:
      if (value == null) {
        unsetParentProvinceCode6();
      } else {
        setParentProvinceCode6((String)value);
      }
      break;

    case PARENT_CITY_CNNAME:
      if (value == null) {
        unsetParentCityCnname();
      } else {
        setParentCityCnname((String)value);
      }
      break;

    case PARENT_CITY_PINYIN:
      if (value == null) {
        unsetParentCityPinyin();
      } else {
        setParentCityPinyin((String)value);
      }
      break;

    case PARENT_CITY_CODE6:
      if (value == null) {
        unsetParentCityCode6();
      } else {
        setParentCityCode6((String)value);
      }
      break;

    case PARENT_CITY_CODE3:
      if (value == null) {
        unsetParentCityCode3();
      } else {
        setParentCityCode3((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REGION_CODE6:
      return getRegionCode6();

    case REGION_CODE3:
      return getRegionCode3();

    case REGION_CNNAME:
      return getRegionCnname();

    case REGION_PINYIN:
      return getRegionPinyin();

    case PARENT_PROVINCE_CNNAME:
      return getParentProvinceCnname();

    case PARENT_PROVINCE_PINYIN:
      return getParentProvincePinyin();

    case PARENT_PROVINCE_CODE6:
      return getParentProvinceCode6();

    case PARENT_CITY_CNNAME:
      return getParentCityCnname();

    case PARENT_CITY_PINYIN:
      return getParentCityPinyin();

    case PARENT_CITY_CODE6:
      return getParentCityCode6();

    case PARENT_CITY_CODE3:
      return getParentCityCode3();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REGION_CODE6:
      return isSetRegionCode6();
    case REGION_CODE3:
      return isSetRegionCode3();
    case REGION_CNNAME:
      return isSetRegionCnname();
    case REGION_PINYIN:
      return isSetRegionPinyin();
    case PARENT_PROVINCE_CNNAME:
      return isSetParentProvinceCnname();
    case PARENT_PROVINCE_PINYIN:
      return isSetParentProvincePinyin();
    case PARENT_PROVINCE_CODE6:
      return isSetParentProvinceCode6();
    case PARENT_CITY_CNNAME:
      return isSetParentCityCnname();
    case PARENT_CITY_PINYIN:
      return isSetParentCityPinyin();
    case PARENT_CITY_CODE6:
      return isSetParentCityCode6();
    case PARENT_CITY_CODE3:
      return isSetParentCityCode3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysChinaRegion)
      return this.equals((SysChinaRegion)that);
    return false;
  }

  public boolean equals(SysChinaRegion that) {
    if (that == null)
      return false;

    boolean this_present_regionCode6 = true && this.isSetRegionCode6();
    boolean that_present_regionCode6 = true && that.isSetRegionCode6();
    if (this_present_regionCode6 || that_present_regionCode6) {
      if (!(this_present_regionCode6 && that_present_regionCode6))
        return false;
      if (!this.regionCode6.equals(that.regionCode6))
        return false;
    }

    boolean this_present_regionCode3 = true && this.isSetRegionCode3();
    boolean that_present_regionCode3 = true && that.isSetRegionCode3();
    if (this_present_regionCode3 || that_present_regionCode3) {
      if (!(this_present_regionCode3 && that_present_regionCode3))
        return false;
      if (!this.regionCode3.equals(that.regionCode3))
        return false;
    }

    boolean this_present_regionCnname = true && this.isSetRegionCnname();
    boolean that_present_regionCnname = true && that.isSetRegionCnname();
    if (this_present_regionCnname || that_present_regionCnname) {
      if (!(this_present_regionCnname && that_present_regionCnname))
        return false;
      if (!this.regionCnname.equals(that.regionCnname))
        return false;
    }

    boolean this_present_regionPinyin = true && this.isSetRegionPinyin();
    boolean that_present_regionPinyin = true && that.isSetRegionPinyin();
    if (this_present_regionPinyin || that_present_regionPinyin) {
      if (!(this_present_regionPinyin && that_present_regionPinyin))
        return false;
      if (!this.regionPinyin.equals(that.regionPinyin))
        return false;
    }

    boolean this_present_parentProvinceCnname = true && this.isSetParentProvinceCnname();
    boolean that_present_parentProvinceCnname = true && that.isSetParentProvinceCnname();
    if (this_present_parentProvinceCnname || that_present_parentProvinceCnname) {
      if (!(this_present_parentProvinceCnname && that_present_parentProvinceCnname))
        return false;
      if (!this.parentProvinceCnname.equals(that.parentProvinceCnname))
        return false;
    }

    boolean this_present_parentProvincePinyin = true && this.isSetParentProvincePinyin();
    boolean that_present_parentProvincePinyin = true && that.isSetParentProvincePinyin();
    if (this_present_parentProvincePinyin || that_present_parentProvincePinyin) {
      if (!(this_present_parentProvincePinyin && that_present_parentProvincePinyin))
        return false;
      if (!this.parentProvincePinyin.equals(that.parentProvincePinyin))
        return false;
    }

    boolean this_present_parentProvinceCode6 = true && this.isSetParentProvinceCode6();
    boolean that_present_parentProvinceCode6 = true && that.isSetParentProvinceCode6();
    if (this_present_parentProvinceCode6 || that_present_parentProvinceCode6) {
      if (!(this_present_parentProvinceCode6 && that_present_parentProvinceCode6))
        return false;
      if (!this.parentProvinceCode6.equals(that.parentProvinceCode6))
        return false;
    }

    boolean this_present_parentCityCnname = true && this.isSetParentCityCnname();
    boolean that_present_parentCityCnname = true && that.isSetParentCityCnname();
    if (this_present_parentCityCnname || that_present_parentCityCnname) {
      if (!(this_present_parentCityCnname && that_present_parentCityCnname))
        return false;
      if (!this.parentCityCnname.equals(that.parentCityCnname))
        return false;
    }

    boolean this_present_parentCityPinyin = true && this.isSetParentCityPinyin();
    boolean that_present_parentCityPinyin = true && that.isSetParentCityPinyin();
    if (this_present_parentCityPinyin || that_present_parentCityPinyin) {
      if (!(this_present_parentCityPinyin && that_present_parentCityPinyin))
        return false;
      if (!this.parentCityPinyin.equals(that.parentCityPinyin))
        return false;
    }

    boolean this_present_parentCityCode6 = true && this.isSetParentCityCode6();
    boolean that_present_parentCityCode6 = true && that.isSetParentCityCode6();
    if (this_present_parentCityCode6 || that_present_parentCityCode6) {
      if (!(this_present_parentCityCode6 && that_present_parentCityCode6))
        return false;
      if (!this.parentCityCode6.equals(that.parentCityCode6))
        return false;
    }

    boolean this_present_parentCityCode3 = true && this.isSetParentCityCode3();
    boolean that_present_parentCityCode3 = true && that.isSetParentCityCode3();
    if (this_present_parentCityCode3 || that_present_parentCityCode3) {
      if (!(this_present_parentCityCode3 && that_present_parentCityCode3))
        return false;
      if (!this.parentCityCode3.equals(that.parentCityCode3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_regionCode6 = true && (isSetRegionCode6());
    list.add(present_regionCode6);
    if (present_regionCode6)
      list.add(regionCode6);

    boolean present_regionCode3 = true && (isSetRegionCode3());
    list.add(present_regionCode3);
    if (present_regionCode3)
      list.add(regionCode3);

    boolean present_regionCnname = true && (isSetRegionCnname());
    list.add(present_regionCnname);
    if (present_regionCnname)
      list.add(regionCnname);

    boolean present_regionPinyin = true && (isSetRegionPinyin());
    list.add(present_regionPinyin);
    if (present_regionPinyin)
      list.add(regionPinyin);

    boolean present_parentProvinceCnname = true && (isSetParentProvinceCnname());
    list.add(present_parentProvinceCnname);
    if (present_parentProvinceCnname)
      list.add(parentProvinceCnname);

    boolean present_parentProvincePinyin = true && (isSetParentProvincePinyin());
    list.add(present_parentProvincePinyin);
    if (present_parentProvincePinyin)
      list.add(parentProvincePinyin);

    boolean present_parentProvinceCode6 = true && (isSetParentProvinceCode6());
    list.add(present_parentProvinceCode6);
    if (present_parentProvinceCode6)
      list.add(parentProvinceCode6);

    boolean present_parentCityCnname = true && (isSetParentCityCnname());
    list.add(present_parentCityCnname);
    if (present_parentCityCnname)
      list.add(parentCityCnname);

    boolean present_parentCityPinyin = true && (isSetParentCityPinyin());
    list.add(present_parentCityPinyin);
    if (present_parentCityPinyin)
      list.add(parentCityPinyin);

    boolean present_parentCityCode6 = true && (isSetParentCityCode6());
    list.add(present_parentCityCode6);
    if (present_parentCityCode6)
      list.add(parentCityCode6);

    boolean present_parentCityCode3 = true && (isSetParentCityCode3());
    list.add(present_parentCityCode3);
    if (present_parentCityCode3)
      list.add(parentCityCode3);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysChinaRegion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRegionCode6()).compareTo(other.isSetRegionCode6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCode6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCode6, other.regionCode6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionCode3()).compareTo(other.isSetRegionCode3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCode3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCode3, other.regionCode3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionCnname()).compareTo(other.isSetRegionCnname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCnname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCnname, other.regionCnname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionPinyin()).compareTo(other.isSetRegionPinyin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionPinyin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionPinyin, other.regionPinyin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentProvinceCnname()).compareTo(other.isSetParentProvinceCnname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentProvinceCnname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentProvinceCnname, other.parentProvinceCnname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentProvincePinyin()).compareTo(other.isSetParentProvincePinyin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentProvincePinyin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentProvincePinyin, other.parentProvincePinyin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentProvinceCode6()).compareTo(other.isSetParentProvinceCode6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentProvinceCode6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentProvinceCode6, other.parentProvinceCode6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCityCnname()).compareTo(other.isSetParentCityCnname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCityCnname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCityCnname, other.parentCityCnname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCityPinyin()).compareTo(other.isSetParentCityPinyin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCityPinyin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCityPinyin, other.parentCityPinyin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCityCode6()).compareTo(other.isSetParentCityCode6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCityCode6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCityCode6, other.parentCityCode6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCityCode3()).compareTo(other.isSetParentCityCode3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCityCode3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCityCode3, other.parentCityCode3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysChinaRegion(");
    boolean first = true;

    sb.append("regionCode6:");
    if (this.regionCode6 == null) {
      sb.append("null");
    } else {
      sb.append(this.regionCode6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionCode3:");
    if (this.regionCode3 == null) {
      sb.append("null");
    } else {
      sb.append(this.regionCode3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionCnname:");
    if (this.regionCnname == null) {
      sb.append("null");
    } else {
      sb.append(this.regionCnname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionPinyin:");
    if (this.regionPinyin == null) {
      sb.append("null");
    } else {
      sb.append(this.regionPinyin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentProvinceCnname:");
    if (this.parentProvinceCnname == null) {
      sb.append("null");
    } else {
      sb.append(this.parentProvinceCnname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentProvincePinyin:");
    if (this.parentProvincePinyin == null) {
      sb.append("null");
    } else {
      sb.append(this.parentProvincePinyin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentProvinceCode6:");
    if (this.parentProvinceCode6 == null) {
      sb.append("null");
    } else {
      sb.append(this.parentProvinceCode6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCityCnname:");
    if (this.parentCityCnname == null) {
      sb.append("null");
    } else {
      sb.append(this.parentCityCnname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCityPinyin:");
    if (this.parentCityPinyin == null) {
      sb.append("null");
    } else {
      sb.append(this.parentCityPinyin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCityCode6:");
    if (this.parentCityCode6 == null) {
      sb.append("null");
    } else {
      sb.append(this.parentCityCode6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCityCode3:");
    if (this.parentCityCode3 == null) {
      sb.append("null");
    } else {
      sb.append(this.parentCityCode3);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysChinaRegionStandardSchemeFactory implements SchemeFactory {
    public SysChinaRegionStandardScheme getScheme() {
      return new SysChinaRegionStandardScheme();
    }
  }

  private static class SysChinaRegionStandardScheme extends StandardScheme<SysChinaRegion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysChinaRegion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REGION_CODE6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionCode6 = iprot.readString();
              struct.setRegionCode6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGION_CODE3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionCode3 = iprot.readString();
              struct.setRegionCode3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGION_CNNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionCnname = iprot.readString();
              struct.setRegionCnnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION_PINYIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionPinyin = iprot.readString();
              struct.setRegionPinyinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARENT_PROVINCE_CNNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentProvinceCnname = iprot.readString();
              struct.setParentProvinceCnnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_PROVINCE_PINYIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentProvincePinyin = iprot.readString();
              struct.setParentProvincePinyinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENT_PROVINCE_CODE6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentProvinceCode6 = iprot.readString();
              struct.setParentProvinceCode6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_CITY_CNNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentCityCnname = iprot.readString();
              struct.setParentCityCnnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARENT_CITY_PINYIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentCityPinyin = iprot.readString();
              struct.setParentCityPinyinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARENT_CITY_CODE6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentCityCode6 = iprot.readString();
              struct.setParentCityCode6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARENT_CITY_CODE3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentCityCode3 = iprot.readString();
              struct.setParentCityCode3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysChinaRegion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.regionCode6 != null) {
        oprot.writeFieldBegin(REGION_CODE6_FIELD_DESC);
        oprot.writeString(struct.regionCode6);
        oprot.writeFieldEnd();
      }
      if (struct.regionCode3 != null) {
        oprot.writeFieldBegin(REGION_CODE3_FIELD_DESC);
        oprot.writeString(struct.regionCode3);
        oprot.writeFieldEnd();
      }
      if (struct.regionCnname != null) {
        oprot.writeFieldBegin(REGION_CNNAME_FIELD_DESC);
        oprot.writeString(struct.regionCnname);
        oprot.writeFieldEnd();
      }
      if (struct.regionPinyin != null) {
        oprot.writeFieldBegin(REGION_PINYIN_FIELD_DESC);
        oprot.writeString(struct.regionPinyin);
        oprot.writeFieldEnd();
      }
      if (struct.parentProvinceCnname != null) {
        oprot.writeFieldBegin(PARENT_PROVINCE_CNNAME_FIELD_DESC);
        oprot.writeString(struct.parentProvinceCnname);
        oprot.writeFieldEnd();
      }
      if (struct.parentProvincePinyin != null) {
        oprot.writeFieldBegin(PARENT_PROVINCE_PINYIN_FIELD_DESC);
        oprot.writeString(struct.parentProvincePinyin);
        oprot.writeFieldEnd();
      }
      if (struct.parentProvinceCode6 != null) {
        oprot.writeFieldBegin(PARENT_PROVINCE_CODE6_FIELD_DESC);
        oprot.writeString(struct.parentProvinceCode6);
        oprot.writeFieldEnd();
      }
      if (struct.parentCityCnname != null) {
        oprot.writeFieldBegin(PARENT_CITY_CNNAME_FIELD_DESC);
        oprot.writeString(struct.parentCityCnname);
        oprot.writeFieldEnd();
      }
      if (struct.parentCityPinyin != null) {
        oprot.writeFieldBegin(PARENT_CITY_PINYIN_FIELD_DESC);
        oprot.writeString(struct.parentCityPinyin);
        oprot.writeFieldEnd();
      }
      if (struct.parentCityCode6 != null) {
        oprot.writeFieldBegin(PARENT_CITY_CODE6_FIELD_DESC);
        oprot.writeString(struct.parentCityCode6);
        oprot.writeFieldEnd();
      }
      if (struct.parentCityCode3 != null) {
        oprot.writeFieldBegin(PARENT_CITY_CODE3_FIELD_DESC);
        oprot.writeString(struct.parentCityCode3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysChinaRegionTupleSchemeFactory implements SchemeFactory {
    public SysChinaRegionTupleScheme getScheme() {
      return new SysChinaRegionTupleScheme();
    }
  }

  private static class SysChinaRegionTupleScheme extends TupleScheme<SysChinaRegion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysChinaRegion struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRegionCode6()) {
        optionals.set(0);
      }
      if (struct.isSetRegionCode3()) {
        optionals.set(1);
      }
      if (struct.isSetRegionCnname()) {
        optionals.set(2);
      }
      if (struct.isSetRegionPinyin()) {
        optionals.set(3);
      }
      if (struct.isSetParentProvinceCnname()) {
        optionals.set(4);
      }
      if (struct.isSetParentProvincePinyin()) {
        optionals.set(5);
      }
      if (struct.isSetParentProvinceCode6()) {
        optionals.set(6);
      }
      if (struct.isSetParentCityCnname()) {
        optionals.set(7);
      }
      if (struct.isSetParentCityPinyin()) {
        optionals.set(8);
      }
      if (struct.isSetParentCityCode6()) {
        optionals.set(9);
      }
      if (struct.isSetParentCityCode3()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRegionCode6()) {
        oprot.writeString(struct.regionCode6);
      }
      if (struct.isSetRegionCode3()) {
        oprot.writeString(struct.regionCode3);
      }
      if (struct.isSetRegionCnname()) {
        oprot.writeString(struct.regionCnname);
      }
      if (struct.isSetRegionPinyin()) {
        oprot.writeString(struct.regionPinyin);
      }
      if (struct.isSetParentProvinceCnname()) {
        oprot.writeString(struct.parentProvinceCnname);
      }
      if (struct.isSetParentProvincePinyin()) {
        oprot.writeString(struct.parentProvincePinyin);
      }
      if (struct.isSetParentProvinceCode6()) {
        oprot.writeString(struct.parentProvinceCode6);
      }
      if (struct.isSetParentCityCnname()) {
        oprot.writeString(struct.parentCityCnname);
      }
      if (struct.isSetParentCityPinyin()) {
        oprot.writeString(struct.parentCityPinyin);
      }
      if (struct.isSetParentCityCode6()) {
        oprot.writeString(struct.parentCityCode6);
      }
      if (struct.isSetParentCityCode3()) {
        oprot.writeString(struct.parentCityCode3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysChinaRegion struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.regionCode6 = iprot.readString();
        struct.setRegionCode6IsSet(true);
      }
      if (incoming.get(1)) {
        struct.regionCode3 = iprot.readString();
        struct.setRegionCode3IsSet(true);
      }
      if (incoming.get(2)) {
        struct.regionCnname = iprot.readString();
        struct.setRegionCnnameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.regionPinyin = iprot.readString();
        struct.setRegionPinyinIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parentProvinceCnname = iprot.readString();
        struct.setParentProvinceCnnameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parentProvincePinyin = iprot.readString();
        struct.setParentProvincePinyinIsSet(true);
      }
      if (incoming.get(6)) {
        struct.parentProvinceCode6 = iprot.readString();
        struct.setParentProvinceCode6IsSet(true);
      }
      if (incoming.get(7)) {
        struct.parentCityCnname = iprot.readString();
        struct.setParentCityCnnameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.parentCityPinyin = iprot.readString();
        struct.setParentCityPinyinIsSet(true);
      }
      if (incoming.get(9)) {
        struct.parentCityCode6 = iprot.readString();
        struct.setParentCityCode6IsSet(true);
      }
      if (incoming.get(10)) {
        struct.parentCityCode3 = iprot.readString();
        struct.setParentCityCode3IsSet(true);
      }
    }
  }

}

