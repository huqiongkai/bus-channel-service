/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 车票元素规则VO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-26")
public class BusPkgInfoBusVO implements org.apache.thrift.TBase<BusPkgInfoBusVO, BusPkgInfoBusVO._Fields>, java.io.Serializable, Cloneable, Comparable<BusPkgInfoBusVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusPkgInfoBusVO");

  private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TO_STATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toStationId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SYS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sysCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPART_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("departDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField RT_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtOrderCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BUS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("busCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField REMAIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("remainCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FULL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("fullPrice", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusPkgInfoBusVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusPkgInfoBusVOTupleSchemeFactory());
  }

  /**
   * 出发地id
   */
  public String unitId; // required
  /**
   * 目的地id
   */
  public String toStationId; // required
  /**
   * 出票系统
   */
  public String sysCode; // required
  /**
   * 出发日期
   */
  public long departDate; // required
  /**
   * 车次编号
   */
  public String rtOrderCode; // required
  /**
   * 车票数量
   */
  public long busCount; // required
  /**
   * 可用数量
   */
  public long remainCount; // required
  /**
   * 车票元素规则VO
   */
  public long fullPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 出发地id
     */
    UNIT_ID((short)1, "unitId"),
    /**
     * 目的地id
     */
    TO_STATION_ID((short)2, "toStationId"),
    /**
     * 出票系统
     */
    SYS_CODE((short)3, "sysCode"),
    /**
     * 出发日期
     */
    DEPART_DATE((short)4, "departDate"),
    /**
     * 车次编号
     */
    RT_ORDER_CODE((short)5, "rtOrderCode"),
    /**
     * 车票数量
     */
    BUS_COUNT((short)6, "busCount"),
    /**
     * 可用数量
     */
    REMAIN_COUNT((short)7, "remainCount"),
    /**
     * 车票元素规则VO
     */
    FULL_PRICE((short)8, "fullPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIT_ID
          return UNIT_ID;
        case 2: // TO_STATION_ID
          return TO_STATION_ID;
        case 3: // SYS_CODE
          return SYS_CODE;
        case 4: // DEPART_DATE
          return DEPART_DATE;
        case 5: // RT_ORDER_CODE
          return RT_ORDER_CODE;
        case 6: // BUS_COUNT
          return BUS_COUNT;
        case 7: // REMAIN_COUNT
          return REMAIN_COUNT;
        case 8: // FULL_PRICE
          return FULL_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPARTDATE_ISSET_ID = 0;
  private static final int __BUSCOUNT_ISSET_ID = 1;
  private static final int __REMAINCOUNT_ISSET_ID = 2;
  private static final int __FULLPRICE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_STATION_ID, new org.apache.thrift.meta_data.FieldMetaData("toStationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYS_CODE, new org.apache.thrift.meta_data.FieldMetaData("sysCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPART_DATE, new org.apache.thrift.meta_data.FieldMetaData("departDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RT_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("rtOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("busCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMAIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("remainCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FULL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("fullPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusPkgInfoBusVO.class, metaDataMap);
  }

  public BusPkgInfoBusVO() {
  }

  public BusPkgInfoBusVO(
    String unitId,
    String toStationId,
    String sysCode,
    long departDate,
    String rtOrderCode,
    long busCount,
    long remainCount,
    long fullPrice)
  {
    this();
    this.unitId = unitId;
    this.toStationId = toStationId;
    this.sysCode = sysCode;
    this.departDate = departDate;
    setDepartDateIsSet(true);
    this.rtOrderCode = rtOrderCode;
    this.busCount = busCount;
    setBusCountIsSet(true);
    this.remainCount = remainCount;
    setRemainCountIsSet(true);
    this.fullPrice = fullPrice;
    setFullPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusPkgInfoBusVO(BusPkgInfoBusVO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUnitId()) {
      this.unitId = other.unitId;
    }
    if (other.isSetToStationId()) {
      this.toStationId = other.toStationId;
    }
    if (other.isSetSysCode()) {
      this.sysCode = other.sysCode;
    }
    this.departDate = other.departDate;
    if (other.isSetRtOrderCode()) {
      this.rtOrderCode = other.rtOrderCode;
    }
    this.busCount = other.busCount;
    this.remainCount = other.remainCount;
    this.fullPrice = other.fullPrice;
  }

  public BusPkgInfoBusVO deepCopy() {
    return new BusPkgInfoBusVO(this);
  }

  @Override
  public void clear() {
    this.unitId = null;
    this.toStationId = null;
    this.sysCode = null;
    setDepartDateIsSet(false);
    this.departDate = 0;
    this.rtOrderCode = null;
    setBusCountIsSet(false);
    this.busCount = 0;
    setRemainCountIsSet(false);
    this.remainCount = 0;
    setFullPriceIsSet(false);
    this.fullPrice = 0;
  }

  /**
   * 出发地id
   */
  public String getUnitId() {
    return this.unitId;
  }

  /**
   * 出发地id
   */
  public BusPkgInfoBusVO setUnitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  public void unsetUnitId() {
    this.unitId = null;
  }

  /** Returns true if field unitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitId() {
    return this.unitId != null;
  }

  public void setUnitIdIsSet(boolean value) {
    if (!value) {
      this.unitId = null;
    }
  }

  /**
   * 目的地id
   */
  public String getToStationId() {
    return this.toStationId;
  }

  /**
   * 目的地id
   */
  public BusPkgInfoBusVO setToStationId(String toStationId) {
    this.toStationId = toStationId;
    return this;
  }

  public void unsetToStationId() {
    this.toStationId = null;
  }

  /** Returns true if field toStationId is set (has been assigned a value) and false otherwise */
  public boolean isSetToStationId() {
    return this.toStationId != null;
  }

  public void setToStationIdIsSet(boolean value) {
    if (!value) {
      this.toStationId = null;
    }
  }

  /**
   * 出票系统
   */
  public String getSysCode() {
    return this.sysCode;
  }

  /**
   * 出票系统
   */
  public BusPkgInfoBusVO setSysCode(String sysCode) {
    this.sysCode = sysCode;
    return this;
  }

  public void unsetSysCode() {
    this.sysCode = null;
  }

  /** Returns true if field sysCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSysCode() {
    return this.sysCode != null;
  }

  public void setSysCodeIsSet(boolean value) {
    if (!value) {
      this.sysCode = null;
    }
  }

  /**
   * 出发日期
   */
  public long getDepartDate() {
    return this.departDate;
  }

  /**
   * 出发日期
   */
  public BusPkgInfoBusVO setDepartDate(long departDate) {
    this.departDate = departDate;
    setDepartDateIsSet(true);
    return this;
  }

  public void unsetDepartDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTDATE_ISSET_ID);
  }

  /** Returns true if field departDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTDATE_ISSET_ID);
  }

  public void setDepartDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTDATE_ISSET_ID, value);
  }

  /**
   * 车次编号
   */
  public String getRtOrderCode() {
    return this.rtOrderCode;
  }

  /**
   * 车次编号
   */
  public BusPkgInfoBusVO setRtOrderCode(String rtOrderCode) {
    this.rtOrderCode = rtOrderCode;
    return this;
  }

  public void unsetRtOrderCode() {
    this.rtOrderCode = null;
  }

  /** Returns true if field rtOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRtOrderCode() {
    return this.rtOrderCode != null;
  }

  public void setRtOrderCodeIsSet(boolean value) {
    if (!value) {
      this.rtOrderCode = null;
    }
  }

  /**
   * 车票数量
   */
  public long getBusCount() {
    return this.busCount;
  }

  /**
   * 车票数量
   */
  public BusPkgInfoBusVO setBusCount(long busCount) {
    this.busCount = busCount;
    setBusCountIsSet(true);
    return this;
  }

  public void unsetBusCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSCOUNT_ISSET_ID);
  }

  /** Returns true if field busCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBusCount() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSCOUNT_ISSET_ID);
  }

  public void setBusCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSCOUNT_ISSET_ID, value);
  }

  /**
   * 可用数量
   */
  public long getRemainCount() {
    return this.remainCount;
  }

  /**
   * 可用数量
   */
  public BusPkgInfoBusVO setRemainCount(long remainCount) {
    this.remainCount = remainCount;
    setRemainCountIsSet(true);
    return this;
  }

  public void unsetRemainCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINCOUNT_ISSET_ID);
  }

  /** Returns true if field remainCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINCOUNT_ISSET_ID);
  }

  public void setRemainCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINCOUNT_ISSET_ID, value);
  }

  /**
   * 车票元素规则VO
   */
  public long getFullPrice() {
    return this.fullPrice;
  }

  /**
   * 车票元素规则VO
   */
  public BusPkgInfoBusVO setFullPrice(long fullPrice) {
    this.fullPrice = fullPrice;
    setFullPriceIsSet(true);
    return this;
  }

  public void unsetFullPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FULLPRICE_ISSET_ID);
  }

  /** Returns true if field fullPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetFullPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __FULLPRICE_ISSET_ID);
  }

  public void setFullPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FULLPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNIT_ID:
      if (value == null) {
        unsetUnitId();
      } else {
        setUnitId((String)value);
      }
      break;

    case TO_STATION_ID:
      if (value == null) {
        unsetToStationId();
      } else {
        setToStationId((String)value);
      }
      break;

    case SYS_CODE:
      if (value == null) {
        unsetSysCode();
      } else {
        setSysCode((String)value);
      }
      break;

    case DEPART_DATE:
      if (value == null) {
        unsetDepartDate();
      } else {
        setDepartDate((Long)value);
      }
      break;

    case RT_ORDER_CODE:
      if (value == null) {
        unsetRtOrderCode();
      } else {
        setRtOrderCode((String)value);
      }
      break;

    case BUS_COUNT:
      if (value == null) {
        unsetBusCount();
      } else {
        setBusCount((Long)value);
      }
      break;

    case REMAIN_COUNT:
      if (value == null) {
        unsetRemainCount();
      } else {
        setRemainCount((Long)value);
      }
      break;

    case FULL_PRICE:
      if (value == null) {
        unsetFullPrice();
      } else {
        setFullPrice((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIT_ID:
      return getUnitId();

    case TO_STATION_ID:
      return getToStationId();

    case SYS_CODE:
      return getSysCode();

    case DEPART_DATE:
      return getDepartDate();

    case RT_ORDER_CODE:
      return getRtOrderCode();

    case BUS_COUNT:
      return getBusCount();

    case REMAIN_COUNT:
      return getRemainCount();

    case FULL_PRICE:
      return getFullPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNIT_ID:
      return isSetUnitId();
    case TO_STATION_ID:
      return isSetToStationId();
    case SYS_CODE:
      return isSetSysCode();
    case DEPART_DATE:
      return isSetDepartDate();
    case RT_ORDER_CODE:
      return isSetRtOrderCode();
    case BUS_COUNT:
      return isSetBusCount();
    case REMAIN_COUNT:
      return isSetRemainCount();
    case FULL_PRICE:
      return isSetFullPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusPkgInfoBusVO)
      return this.equals((BusPkgInfoBusVO)that);
    return false;
  }

  public boolean equals(BusPkgInfoBusVO that) {
    if (that == null)
      return false;

    boolean this_present_unitId = true && this.isSetUnitId();
    boolean that_present_unitId = true && that.isSetUnitId();
    if (this_present_unitId || that_present_unitId) {
      if (!(this_present_unitId && that_present_unitId))
        return false;
      if (!this.unitId.equals(that.unitId))
        return false;
    }

    boolean this_present_toStationId = true && this.isSetToStationId();
    boolean that_present_toStationId = true && that.isSetToStationId();
    if (this_present_toStationId || that_present_toStationId) {
      if (!(this_present_toStationId && that_present_toStationId))
        return false;
      if (!this.toStationId.equals(that.toStationId))
        return false;
    }

    boolean this_present_sysCode = true && this.isSetSysCode();
    boolean that_present_sysCode = true && that.isSetSysCode();
    if (this_present_sysCode || that_present_sysCode) {
      if (!(this_present_sysCode && that_present_sysCode))
        return false;
      if (!this.sysCode.equals(that.sysCode))
        return false;
    }

    boolean this_present_departDate = true;
    boolean that_present_departDate = true;
    if (this_present_departDate || that_present_departDate) {
      if (!(this_present_departDate && that_present_departDate))
        return false;
      if (this.departDate != that.departDate)
        return false;
    }

    boolean this_present_rtOrderCode = true && this.isSetRtOrderCode();
    boolean that_present_rtOrderCode = true && that.isSetRtOrderCode();
    if (this_present_rtOrderCode || that_present_rtOrderCode) {
      if (!(this_present_rtOrderCode && that_present_rtOrderCode))
        return false;
      if (!this.rtOrderCode.equals(that.rtOrderCode))
        return false;
    }

    boolean this_present_busCount = true;
    boolean that_present_busCount = true;
    if (this_present_busCount || that_present_busCount) {
      if (!(this_present_busCount && that_present_busCount))
        return false;
      if (this.busCount != that.busCount)
        return false;
    }

    boolean this_present_remainCount = true;
    boolean that_present_remainCount = true;
    if (this_present_remainCount || that_present_remainCount) {
      if (!(this_present_remainCount && that_present_remainCount))
        return false;
      if (this.remainCount != that.remainCount)
        return false;
    }

    boolean this_present_fullPrice = true;
    boolean that_present_fullPrice = true;
    if (this_present_fullPrice || that_present_fullPrice) {
      if (!(this_present_fullPrice && that_present_fullPrice))
        return false;
      if (this.fullPrice != that.fullPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_unitId = true && (isSetUnitId());
    list.add(present_unitId);
    if (present_unitId)
      list.add(unitId);

    boolean present_toStationId = true && (isSetToStationId());
    list.add(present_toStationId);
    if (present_toStationId)
      list.add(toStationId);

    boolean present_sysCode = true && (isSetSysCode());
    list.add(present_sysCode);
    if (present_sysCode)
      list.add(sysCode);

    boolean present_departDate = true;
    list.add(present_departDate);
    if (present_departDate)
      list.add(departDate);

    boolean present_rtOrderCode = true && (isSetRtOrderCode());
    list.add(present_rtOrderCode);
    if (present_rtOrderCode)
      list.add(rtOrderCode);

    boolean present_busCount = true;
    list.add(present_busCount);
    if (present_busCount)
      list.add(busCount);

    boolean present_remainCount = true;
    list.add(present_remainCount);
    if (present_remainCount)
      list.add(remainCount);

    boolean present_fullPrice = true;
    list.add(present_fullPrice);
    if (present_fullPrice)
      list.add(fullPrice);

    return list.hashCode();
  }

  @Override
  public int compareTo(BusPkgInfoBusVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUnitId()).compareTo(other.isSetUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitId, other.unitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStationId()).compareTo(other.isSetToStationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStationId, other.toStationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSysCode()).compareTo(other.isSetSysCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysCode, other.sysCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartDate()).compareTo(other.isSetDepartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departDate, other.departDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtOrderCode()).compareTo(other.isSetRtOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtOrderCode, other.rtOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusCount()).compareTo(other.isSetBusCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busCount, other.busCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainCount()).compareTo(other.isSetRemainCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainCount, other.remainCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullPrice()).compareTo(other.isSetFullPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullPrice, other.fullPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusPkgInfoBusVO(");
    boolean first = true;

    sb.append("unitId:");
    if (this.unitId == null) {
      sb.append("null");
    } else {
      sb.append(this.unitId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStationId:");
    if (this.toStationId == null) {
      sb.append("null");
    } else {
      sb.append(this.toStationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysCode:");
    if (this.sysCode == null) {
      sb.append("null");
    } else {
      sb.append(this.sysCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("departDate:");
    sb.append(this.departDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rtOrderCode:");
    if (this.rtOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.rtOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busCount:");
    sb.append(this.busCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainCount:");
    sb.append(this.remainCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullPrice:");
    sb.append(this.fullPrice);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusPkgInfoBusVOStandardSchemeFactory implements SchemeFactory {
    public BusPkgInfoBusVOStandardScheme getScheme() {
      return new BusPkgInfoBusVOStandardScheme();
    }
  }

  private static class BusPkgInfoBusVOStandardScheme extends StandardScheme<BusPkgInfoBusVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusPkgInfoBusVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitId = iprot.readString();
              struct.setUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_STATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toStationId = iprot.readString();
              struct.setToStationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sysCode = iprot.readString();
              struct.setSysCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPART_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departDate = iprot.readI64();
              struct.setDepartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RT_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtOrderCode = iprot.readString();
              struct.setRtOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.busCount = iprot.readI64();
              struct.setBusCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMAIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.remainCount = iprot.readI64();
              struct.setRemainCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FULL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fullPrice = iprot.readI64();
              struct.setFullPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusPkgInfoBusVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.unitId != null) {
        oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
        oprot.writeString(struct.unitId);
        oprot.writeFieldEnd();
      }
      if (struct.toStationId != null) {
        oprot.writeFieldBegin(TO_STATION_ID_FIELD_DESC);
        oprot.writeString(struct.toStationId);
        oprot.writeFieldEnd();
      }
      if (struct.sysCode != null) {
        oprot.writeFieldBegin(SYS_CODE_FIELD_DESC);
        oprot.writeString(struct.sysCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPART_DATE_FIELD_DESC);
      oprot.writeI64(struct.departDate);
      oprot.writeFieldEnd();
      if (struct.rtOrderCode != null) {
        oprot.writeFieldBegin(RT_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.rtOrderCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUS_COUNT_FIELD_DESC);
      oprot.writeI64(struct.busCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAIN_COUNT_FIELD_DESC);
      oprot.writeI64(struct.remainCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FULL_PRICE_FIELD_DESC);
      oprot.writeI64(struct.fullPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusPkgInfoBusVOTupleSchemeFactory implements SchemeFactory {
    public BusPkgInfoBusVOTupleScheme getScheme() {
      return new BusPkgInfoBusVOTupleScheme();
    }
  }

  private static class BusPkgInfoBusVOTupleScheme extends TupleScheme<BusPkgInfoBusVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusPkgInfoBusVO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUnitId()) {
        optionals.set(0);
      }
      if (struct.isSetToStationId()) {
        optionals.set(1);
      }
      if (struct.isSetSysCode()) {
        optionals.set(2);
      }
      if (struct.isSetDepartDate()) {
        optionals.set(3);
      }
      if (struct.isSetRtOrderCode()) {
        optionals.set(4);
      }
      if (struct.isSetBusCount()) {
        optionals.set(5);
      }
      if (struct.isSetRemainCount()) {
        optionals.set(6);
      }
      if (struct.isSetFullPrice()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetUnitId()) {
        oprot.writeString(struct.unitId);
      }
      if (struct.isSetToStationId()) {
        oprot.writeString(struct.toStationId);
      }
      if (struct.isSetSysCode()) {
        oprot.writeString(struct.sysCode);
      }
      if (struct.isSetDepartDate()) {
        oprot.writeI64(struct.departDate);
      }
      if (struct.isSetRtOrderCode()) {
        oprot.writeString(struct.rtOrderCode);
      }
      if (struct.isSetBusCount()) {
        oprot.writeI64(struct.busCount);
      }
      if (struct.isSetRemainCount()) {
        oprot.writeI64(struct.remainCount);
      }
      if (struct.isSetFullPrice()) {
        oprot.writeI64(struct.fullPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusPkgInfoBusVO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.unitId = iprot.readString();
        struct.setUnitIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toStationId = iprot.readString();
        struct.setToStationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sysCode = iprot.readString();
        struct.setSysCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.departDate = iprot.readI64();
        struct.setDepartDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rtOrderCode = iprot.readString();
        struct.setRtOrderCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.busCount = iprot.readI64();
        struct.setBusCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remainCount = iprot.readI64();
        struct.setRemainCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fullPrice = iprot.readI64();
        struct.setFullPriceIsSet(true);
      }
    }
  }

}

