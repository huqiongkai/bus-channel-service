/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-26")
public class ExBusOrder implements org.apache.thrift.TBase<ExBusOrder, ExBusOrder._Fields>, java.io.Serializable, Cloneable, Comparable<ExBusOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExBusOrder");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MODIFY_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyDatetime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EX_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exOrderId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RTORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rtorderId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RTORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtorderCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TO_STATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toStationId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLEAVE_DTYYYY_MMDD_HHMMSS_FIELD_DESC = new org.apache.thrift.protocol.TField("pleaveDtyyyyMMddHHmmss", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TO_STATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toStationName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TO_STATION6CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("toStation6code", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FROM_STATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromStationName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FROM_STATION6CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromStation6code", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TO_PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toProvinceName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TO_PROVINCE6CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("toProvince6code", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FROM_PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromProvinceName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField FROM_PROVINCE6CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromProvince6code", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TICKET_FAIL_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketFailReason", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TICKET_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketStatus", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TICKET_CONFIRM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketConfirmDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TICKET_REC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecStatus", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TICKET_REC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecDate", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TICKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketPrice", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField TICKET_REC_RANDOM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketRecRandomCode", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PSG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("psgName", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PSG_CERTIFICATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("psgCertificateType", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField PSG_CERTIFICATE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("psgCertificateNo", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PSG_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("psgMobile", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField IS_TEST_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isTestOrder", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField TICKET_GATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketGateName", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField TICKET_SEAT_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketSeatSeq", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField TICKET_USER_DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketUserDisplayName", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField TICKET_SALE_CORP_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketSaleCorp", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField TICKET_STATION_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketStationAddr", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketType", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField TICKET_SALE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketSaleTime", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField BUS_TICKET_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("busTicketNo", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField EX_ORDER_ID_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("exOrderIdIndex", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField CHANNEL_SMS_FIELD_DESC = new org.apache.thrift.protocol.TField("channelSms", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField REFUND_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDesc", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField PKG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pkgName", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField PKG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("pkgDesc", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField TICKET_DISPLAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketDisplayPrice", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField ORDER_TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTotalPrice", org.apache.thrift.protocol.TType.I32, (short)45);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExBusOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExBusOrderTupleSchemeFactory());
  }

  /**
   * 主键
   */
  public int id; // required
  /**
   * 修改时间   yyyyMMddHHmmss
   */
  public String modifyDatetime; // required
  /**
   * 备注
   */
  public String remark; // required
  /**
   * 创建时间  yyyyMMddHHmmss
   */
  public String createDate; // required
  /**
   * 外部 订单号
   */
  public String exOrderId; // required
  /**
   * 班次id
   */
  public String rtorderId; // required
  /**
   * 班次号
   */
  public String rtorderCode; // required
  /**
   * 出发车站编号
   */
  public String unitId; // required
  /**
   * 到达车站编号
   */
  public String toStationId; // required
  /**
   * 车辆发车时间 yyyyMMddHHmmss
   */
  public String pleaveDtyyyyMMddHHmmss; // required
  /**
   * 到站名称
   */
  public String toStationName; // required
  /**
   * 到达车站6字码
   */
  public String toStation6code; // required
  /**
   * 出发车站名称
   */
  public String fromStationName; // required
  /**
   * 出发车站6字码
   */
  public String fromStation6code; // required
  /**
   * 到达省份名称
   */
  public String toProvinceName; // required
  /**
   * 到达省份6字码
   */
  public String toProvince6code; // required
  /**
   * 出发省份名称
   */
  public String fromProvinceName; // required
  /**
   * 出发省份6字代码
   */
  public String fromProvince6code; // required
  /**
   * 出票失败原因(暂时不用)
   */
  public String ticketFailReason; // required
  /**
   * 车票状态
   */
  public String ticketStatus; // required
  /**
   * 出票时间 yyyyMMddHHmmss
   */
  public String ticketConfirmDate; // required
  /**
   * 取票状态
   */
  public String ticketRecStatus; // required
  /**
   * 取票时间 yyyyMMddHHmmss
   */
  public String ticketRecDate; // required
  /**
   * 车票结算价格
   */
  public int ticketPrice; // required
  /**
   * 取票码
   */
  public String ticketRecRandomCode; // required
  /**
   * 乘客姓名
   */
  public String psgName; // required
  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public CertificateType psgCertificateType; // required
  /**
   * 证件号
   */
  public String psgCertificateNo; // required
  /**
   * 手机号
   */
  public String psgMobile; // required
  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public String isTestOrder; // required
  /**
   * 检票口 --仅用做打印在车票上使用
   */
  public String ticketGateName; // required
  /**
   * 座位号码 --仅用做打印在车票上使用
   */
  public String ticketSeatSeq; // required
  /**
   * 出票人姓名 --仅用做打印在车票上使用
   */
  public String ticketUserDisplayName; // required
  /**
   * 出票站点名称 --仅用做打印在车票上使用
   */
  public String ticketSaleCorp; // required
  /**
   * 出票站点地址 --仅用做打印在车票上使用
   */
  public String ticketStationAddr; // required
  /**
   * 票面类型  --仅用做打印在车票上使用
   */
  public String ticketType; // required
  /**
   * 出票时间戳 --仅用做打印在车票上使用
   */
  public String ticketSaleTime; // required
  /**
   * 车票号
   */
  public String busTicketNo; // required
  /**
   * 车票序号
   */
  public int exOrderIdIndex; // required
  /**
   * 短信发送内容
   */
  public String channelSms; // required
  /**
   * 退改规定
   */
  public String refundDesc; // required
  /**
   * 套餐名称
   */
  public String pkgName; // required
  /**
   * 套餐描述
   */
  public String pkgDesc; // required
  /**
   * 车票展示价格，票面价，打印在车票中
   */
  public int ticketDisplayPrice; // required
  /**
   * 套餐总价  对于非打包产品显示 整张订单总价
   */
  public int orderTotalPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键
     */
    ID((short)1, "id"),
    /**
     * 修改时间   yyyyMMddHHmmss
     */
    MODIFY_DATETIME((short)2, "modifyDatetime"),
    /**
     * 备注
     */
    REMARK((short)3, "remark"),
    /**
     * 创建时间  yyyyMMddHHmmss
     */
    CREATE_DATE((short)4, "createDate"),
    /**
     * 外部 订单号
     */
    EX_ORDER_ID((short)5, "exOrderId"),
    /**
     * 班次id
     */
    RTORDER_ID((short)6, "rtorderId"),
    /**
     * 班次号
     */
    RTORDER_CODE((short)7, "rtorderCode"),
    /**
     * 出发车站编号
     */
    UNIT_ID((short)8, "unitId"),
    /**
     * 到达车站编号
     */
    TO_STATION_ID((short)9, "toStationId"),
    /**
     * 车辆发车时间 yyyyMMddHHmmss
     */
    PLEAVE_DTYYYY_MMDD_HHMMSS((short)10, "pleaveDtyyyyMMddHHmmss"),
    /**
     * 到站名称
     */
    TO_STATION_NAME((short)11, "toStationName"),
    /**
     * 到达车站6字码
     */
    TO_STATION6CODE((short)12, "toStation6code"),
    /**
     * 出发车站名称
     */
    FROM_STATION_NAME((short)13, "fromStationName"),
    /**
     * 出发车站6字码
     */
    FROM_STATION6CODE((short)14, "fromStation6code"),
    /**
     * 到达省份名称
     */
    TO_PROVINCE_NAME((short)15, "toProvinceName"),
    /**
     * 到达省份6字码
     */
    TO_PROVINCE6CODE((short)16, "toProvince6code"),
    /**
     * 出发省份名称
     */
    FROM_PROVINCE_NAME((short)17, "fromProvinceName"),
    /**
     * 出发省份6字代码
     */
    FROM_PROVINCE6CODE((short)18, "fromProvince6code"),
    /**
     * 出票失败原因(暂时不用)
     */
    TICKET_FAIL_REASON((short)19, "ticketFailReason"),
    /**
     * 车票状态
     */
    TICKET_STATUS((short)20, "ticketStatus"),
    /**
     * 出票时间 yyyyMMddHHmmss
     */
    TICKET_CONFIRM_DATE((short)21, "ticketConfirmDate"),
    /**
     * 取票状态
     */
    TICKET_REC_STATUS((short)22, "ticketRecStatus"),
    /**
     * 取票时间 yyyyMMddHHmmss
     */
    TICKET_REC_DATE((short)23, "ticketRecDate"),
    /**
     * 车票结算价格
     */
    TICKET_PRICE((short)24, "ticketPrice"),
    /**
     * 取票码
     */
    TICKET_REC_RANDOM_CODE((short)25, "ticketRecRandomCode"),
    /**
     * 乘客姓名
     */
    PSG_NAME((short)26, "psgName"),
    /**
     * 证件类型
     * 
     * @see CertificateType
     */
    PSG_CERTIFICATE_TYPE((short)27, "psgCertificateType"),
    /**
     * 证件号
     */
    PSG_CERTIFICATE_NO((short)28, "psgCertificateNo"),
    /**
     * 手机号
     */
    PSG_MOBILE((short)29, "psgMobile"),
    /**
     * 是否测试订单   Y:测试订单  N:非测试订单
     */
    IS_TEST_ORDER((short)30, "isTestOrder"),
    /**
     * 检票口 --仅用做打印在车票上使用
     */
    TICKET_GATE_NAME((short)31, "ticketGateName"),
    /**
     * 座位号码 --仅用做打印在车票上使用
     */
    TICKET_SEAT_SEQ((short)32, "ticketSeatSeq"),
    /**
     * 出票人姓名 --仅用做打印在车票上使用
     */
    TICKET_USER_DISPLAY_NAME((short)33, "ticketUserDisplayName"),
    /**
     * 出票站点名称 --仅用做打印在车票上使用
     */
    TICKET_SALE_CORP((short)34, "ticketSaleCorp"),
    /**
     * 出票站点地址 --仅用做打印在车票上使用
     */
    TICKET_STATION_ADDR((short)35, "ticketStationAddr"),
    /**
     * 票面类型  --仅用做打印在车票上使用
     */
    TICKET_TYPE((short)36, "ticketType"),
    /**
     * 出票时间戳 --仅用做打印在车票上使用
     */
    TICKET_SALE_TIME((short)37, "ticketSaleTime"),
    /**
     * 车票号
     */
    BUS_TICKET_NO((short)38, "busTicketNo"),
    /**
     * 车票序号
     */
    EX_ORDER_ID_INDEX((short)39, "exOrderIdIndex"),
    /**
     * 短信发送内容
     */
    CHANNEL_SMS((short)40, "channelSms"),
    /**
     * 退改规定
     */
    REFUND_DESC((short)41, "refundDesc"),
    /**
     * 套餐名称
     */
    PKG_NAME((short)42, "pkgName"),
    /**
     * 套餐描述
     */
    PKG_DESC((short)43, "pkgDesc"),
    /**
     * 车票展示价格，票面价，打印在车票中
     */
    TICKET_DISPLAY_PRICE((short)44, "ticketDisplayPrice"),
    /**
     * 套餐总价  对于非打包产品显示 整张订单总价
     */
    ORDER_TOTAL_PRICE((short)45, "orderTotalPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MODIFY_DATETIME
          return MODIFY_DATETIME;
        case 3: // REMARK
          return REMARK;
        case 4: // CREATE_DATE
          return CREATE_DATE;
        case 5: // EX_ORDER_ID
          return EX_ORDER_ID;
        case 6: // RTORDER_ID
          return RTORDER_ID;
        case 7: // RTORDER_CODE
          return RTORDER_CODE;
        case 8: // UNIT_ID
          return UNIT_ID;
        case 9: // TO_STATION_ID
          return TO_STATION_ID;
        case 10: // PLEAVE_DTYYYY_MMDD_HHMMSS
          return PLEAVE_DTYYYY_MMDD_HHMMSS;
        case 11: // TO_STATION_NAME
          return TO_STATION_NAME;
        case 12: // TO_STATION6CODE
          return TO_STATION6CODE;
        case 13: // FROM_STATION_NAME
          return FROM_STATION_NAME;
        case 14: // FROM_STATION6CODE
          return FROM_STATION6CODE;
        case 15: // TO_PROVINCE_NAME
          return TO_PROVINCE_NAME;
        case 16: // TO_PROVINCE6CODE
          return TO_PROVINCE6CODE;
        case 17: // FROM_PROVINCE_NAME
          return FROM_PROVINCE_NAME;
        case 18: // FROM_PROVINCE6CODE
          return FROM_PROVINCE6CODE;
        case 19: // TICKET_FAIL_REASON
          return TICKET_FAIL_REASON;
        case 20: // TICKET_STATUS
          return TICKET_STATUS;
        case 21: // TICKET_CONFIRM_DATE
          return TICKET_CONFIRM_DATE;
        case 22: // TICKET_REC_STATUS
          return TICKET_REC_STATUS;
        case 23: // TICKET_REC_DATE
          return TICKET_REC_DATE;
        case 24: // TICKET_PRICE
          return TICKET_PRICE;
        case 25: // TICKET_REC_RANDOM_CODE
          return TICKET_REC_RANDOM_CODE;
        case 26: // PSG_NAME
          return PSG_NAME;
        case 27: // PSG_CERTIFICATE_TYPE
          return PSG_CERTIFICATE_TYPE;
        case 28: // PSG_CERTIFICATE_NO
          return PSG_CERTIFICATE_NO;
        case 29: // PSG_MOBILE
          return PSG_MOBILE;
        case 30: // IS_TEST_ORDER
          return IS_TEST_ORDER;
        case 31: // TICKET_GATE_NAME
          return TICKET_GATE_NAME;
        case 32: // TICKET_SEAT_SEQ
          return TICKET_SEAT_SEQ;
        case 33: // TICKET_USER_DISPLAY_NAME
          return TICKET_USER_DISPLAY_NAME;
        case 34: // TICKET_SALE_CORP
          return TICKET_SALE_CORP;
        case 35: // TICKET_STATION_ADDR
          return TICKET_STATION_ADDR;
        case 36: // TICKET_TYPE
          return TICKET_TYPE;
        case 37: // TICKET_SALE_TIME
          return TICKET_SALE_TIME;
        case 38: // BUS_TICKET_NO
          return BUS_TICKET_NO;
        case 39: // EX_ORDER_ID_INDEX
          return EX_ORDER_ID_INDEX;
        case 40: // CHANNEL_SMS
          return CHANNEL_SMS;
        case 41: // REFUND_DESC
          return REFUND_DESC;
        case 42: // PKG_NAME
          return PKG_NAME;
        case 43: // PKG_DESC
          return PKG_DESC;
        case 44: // TICKET_DISPLAY_PRICE
          return TICKET_DISPLAY_PRICE;
        case 45: // ORDER_TOTAL_PRICE
          return ORDER_TOTAL_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TICKETPRICE_ISSET_ID = 1;
  private static final int __EXORDERIDINDEX_ISSET_ID = 2;
  private static final int __TICKETDISPLAYPRICE_ISSET_ID = 3;
  private static final int __ORDERTOTALPRICE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODIFY_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("modifyDatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("exOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RTORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("rtorderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RTORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("rtorderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_STATION_ID, new org.apache.thrift.meta_data.FieldMetaData("toStationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLEAVE_DTYYYY_MMDD_HHMMSS, new org.apache.thrift.meta_data.FieldMetaData("pleaveDtyyyyMMddHHmmss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_STATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("toStationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_STATION6CODE, new org.apache.thrift.meta_data.FieldMetaData("toStation6code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_STATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromStationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_STATION6CODE, new org.apache.thrift.meta_data.FieldMetaData("fromStation6code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("toProvinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_PROVINCE6CODE, new org.apache.thrift.meta_data.FieldMetaData("toProvince6code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromProvinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_PROVINCE6CODE, new org.apache.thrift.meta_data.FieldMetaData("fromProvince6code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_FAIL_REASON, new org.apache.thrift.meta_data.FieldMetaData("ticketFailReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ticketStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_CONFIRM_DATE, new org.apache.thrift.meta_data.FieldMetaData("ticketConfirmDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ticketRecStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_REC_DATE, new org.apache.thrift.meta_data.FieldMetaData("ticketRecDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ticketPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TICKET_REC_RANDOM_CODE, new org.apache.thrift.meta_data.FieldMetaData("ticketRecRandomCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_NAME, new org.apache.thrift.meta_data.FieldMetaData("psgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_CERTIFICATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("psgCertificateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CertificateType.class)));
    tmpMap.put(_Fields.PSG_CERTIFICATE_NO, new org.apache.thrift.meta_data.FieldMetaData("psgCertificateNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PSG_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("psgMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_TEST_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isTestOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_GATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketGateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_SEAT_SEQ, new org.apache.thrift.meta_data.FieldMetaData("ticketSeatSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_USER_DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketUserDisplayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_SALE_CORP, new org.apache.thrift.meta_data.FieldMetaData("ticketSaleCorp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_STATION_ADDR, new org.apache.thrift.meta_data.FieldMetaData("ticketStationAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ticketType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_SALE_TIME, new org.apache.thrift.meta_data.FieldMetaData("ticketSaleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_TICKET_NO, new org.apache.thrift.meta_data.FieldMetaData("busTicketNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX_ORDER_ID_INDEX, new org.apache.thrift.meta_data.FieldMetaData("exOrderIdIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_SMS, new org.apache.thrift.meta_data.FieldMetaData("channelSms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_DESC, new org.apache.thrift.meta_data.FieldMetaData("refundDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PKG_NAME, new org.apache.thrift.meta_data.FieldMetaData("pkgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PKG_DESC, new org.apache.thrift.meta_data.FieldMetaData("pkgDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_DISPLAY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ticketDisplayPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("orderTotalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExBusOrder.class, metaDataMap);
  }

  public ExBusOrder() {
  }

  public ExBusOrder(
    int id,
    String modifyDatetime,
    String remark,
    String createDate,
    String exOrderId,
    String rtorderId,
    String rtorderCode,
    String unitId,
    String toStationId,
    String pleaveDtyyyyMMddHHmmss,
    String toStationName,
    String toStation6code,
    String fromStationName,
    String fromStation6code,
    String toProvinceName,
    String toProvince6code,
    String fromProvinceName,
    String fromProvince6code,
    String ticketFailReason,
    String ticketStatus,
    String ticketConfirmDate,
    String ticketRecStatus,
    String ticketRecDate,
    int ticketPrice,
    String ticketRecRandomCode,
    String psgName,
    CertificateType psgCertificateType,
    String psgCertificateNo,
    String psgMobile,
    String isTestOrder,
    String ticketGateName,
    String ticketSeatSeq,
    String ticketUserDisplayName,
    String ticketSaleCorp,
    String ticketStationAddr,
    String ticketType,
    String ticketSaleTime,
    String busTicketNo,
    int exOrderIdIndex,
    String channelSms,
    String refundDesc,
    String pkgName,
    String pkgDesc,
    int ticketDisplayPrice,
    int orderTotalPrice)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.modifyDatetime = modifyDatetime;
    this.remark = remark;
    this.createDate = createDate;
    this.exOrderId = exOrderId;
    this.rtorderId = rtorderId;
    this.rtorderCode = rtorderCode;
    this.unitId = unitId;
    this.toStationId = toStationId;
    this.pleaveDtyyyyMMddHHmmss = pleaveDtyyyyMMddHHmmss;
    this.toStationName = toStationName;
    this.toStation6code = toStation6code;
    this.fromStationName = fromStationName;
    this.fromStation6code = fromStation6code;
    this.toProvinceName = toProvinceName;
    this.toProvince6code = toProvince6code;
    this.fromProvinceName = fromProvinceName;
    this.fromProvince6code = fromProvince6code;
    this.ticketFailReason = ticketFailReason;
    this.ticketStatus = ticketStatus;
    this.ticketConfirmDate = ticketConfirmDate;
    this.ticketRecStatus = ticketRecStatus;
    this.ticketRecDate = ticketRecDate;
    this.ticketPrice = ticketPrice;
    setTicketPriceIsSet(true);
    this.ticketRecRandomCode = ticketRecRandomCode;
    this.psgName = psgName;
    this.psgCertificateType = psgCertificateType;
    this.psgCertificateNo = psgCertificateNo;
    this.psgMobile = psgMobile;
    this.isTestOrder = isTestOrder;
    this.ticketGateName = ticketGateName;
    this.ticketSeatSeq = ticketSeatSeq;
    this.ticketUserDisplayName = ticketUserDisplayName;
    this.ticketSaleCorp = ticketSaleCorp;
    this.ticketStationAddr = ticketStationAddr;
    this.ticketType = ticketType;
    this.ticketSaleTime = ticketSaleTime;
    this.busTicketNo = busTicketNo;
    this.exOrderIdIndex = exOrderIdIndex;
    setExOrderIdIndexIsSet(true);
    this.channelSms = channelSms;
    this.refundDesc = refundDesc;
    this.pkgName = pkgName;
    this.pkgDesc = pkgDesc;
    this.ticketDisplayPrice = ticketDisplayPrice;
    setTicketDisplayPriceIsSet(true);
    this.orderTotalPrice = orderTotalPrice;
    setOrderTotalPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExBusOrder(ExBusOrder other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetModifyDatetime()) {
      this.modifyDatetime = other.modifyDatetime;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetExOrderId()) {
      this.exOrderId = other.exOrderId;
    }
    if (other.isSetRtorderId()) {
      this.rtorderId = other.rtorderId;
    }
    if (other.isSetRtorderCode()) {
      this.rtorderCode = other.rtorderCode;
    }
    if (other.isSetUnitId()) {
      this.unitId = other.unitId;
    }
    if (other.isSetToStationId()) {
      this.toStationId = other.toStationId;
    }
    if (other.isSetPleaveDtyyyyMMddHHmmss()) {
      this.pleaveDtyyyyMMddHHmmss = other.pleaveDtyyyyMMddHHmmss;
    }
    if (other.isSetToStationName()) {
      this.toStationName = other.toStationName;
    }
    if (other.isSetToStation6code()) {
      this.toStation6code = other.toStation6code;
    }
    if (other.isSetFromStationName()) {
      this.fromStationName = other.fromStationName;
    }
    if (other.isSetFromStation6code()) {
      this.fromStation6code = other.fromStation6code;
    }
    if (other.isSetToProvinceName()) {
      this.toProvinceName = other.toProvinceName;
    }
    if (other.isSetToProvince6code()) {
      this.toProvince6code = other.toProvince6code;
    }
    if (other.isSetFromProvinceName()) {
      this.fromProvinceName = other.fromProvinceName;
    }
    if (other.isSetFromProvince6code()) {
      this.fromProvince6code = other.fromProvince6code;
    }
    if (other.isSetTicketFailReason()) {
      this.ticketFailReason = other.ticketFailReason;
    }
    if (other.isSetTicketStatus()) {
      this.ticketStatus = other.ticketStatus;
    }
    if (other.isSetTicketConfirmDate()) {
      this.ticketConfirmDate = other.ticketConfirmDate;
    }
    if (other.isSetTicketRecStatus()) {
      this.ticketRecStatus = other.ticketRecStatus;
    }
    if (other.isSetTicketRecDate()) {
      this.ticketRecDate = other.ticketRecDate;
    }
    this.ticketPrice = other.ticketPrice;
    if (other.isSetTicketRecRandomCode()) {
      this.ticketRecRandomCode = other.ticketRecRandomCode;
    }
    if (other.isSetPsgName()) {
      this.psgName = other.psgName;
    }
    if (other.isSetPsgCertificateType()) {
      this.psgCertificateType = other.psgCertificateType;
    }
    if (other.isSetPsgCertificateNo()) {
      this.psgCertificateNo = other.psgCertificateNo;
    }
    if (other.isSetPsgMobile()) {
      this.psgMobile = other.psgMobile;
    }
    if (other.isSetIsTestOrder()) {
      this.isTestOrder = other.isTestOrder;
    }
    if (other.isSetTicketGateName()) {
      this.ticketGateName = other.ticketGateName;
    }
    if (other.isSetTicketSeatSeq()) {
      this.ticketSeatSeq = other.ticketSeatSeq;
    }
    if (other.isSetTicketUserDisplayName()) {
      this.ticketUserDisplayName = other.ticketUserDisplayName;
    }
    if (other.isSetTicketSaleCorp()) {
      this.ticketSaleCorp = other.ticketSaleCorp;
    }
    if (other.isSetTicketStationAddr()) {
      this.ticketStationAddr = other.ticketStationAddr;
    }
    if (other.isSetTicketType()) {
      this.ticketType = other.ticketType;
    }
    if (other.isSetTicketSaleTime()) {
      this.ticketSaleTime = other.ticketSaleTime;
    }
    if (other.isSetBusTicketNo()) {
      this.busTicketNo = other.busTicketNo;
    }
    this.exOrderIdIndex = other.exOrderIdIndex;
    if (other.isSetChannelSms()) {
      this.channelSms = other.channelSms;
    }
    if (other.isSetRefundDesc()) {
      this.refundDesc = other.refundDesc;
    }
    if (other.isSetPkgName()) {
      this.pkgName = other.pkgName;
    }
    if (other.isSetPkgDesc()) {
      this.pkgDesc = other.pkgDesc;
    }
    this.ticketDisplayPrice = other.ticketDisplayPrice;
    this.orderTotalPrice = other.orderTotalPrice;
  }

  public ExBusOrder deepCopy() {
    return new ExBusOrder(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.modifyDatetime = null;
    this.remark = null;
    this.createDate = null;
    this.exOrderId = null;
    this.rtorderId = null;
    this.rtorderCode = null;
    this.unitId = null;
    this.toStationId = null;
    this.pleaveDtyyyyMMddHHmmss = null;
    this.toStationName = null;
    this.toStation6code = null;
    this.fromStationName = null;
    this.fromStation6code = null;
    this.toProvinceName = null;
    this.toProvince6code = null;
    this.fromProvinceName = null;
    this.fromProvince6code = null;
    this.ticketFailReason = null;
    this.ticketStatus = null;
    this.ticketConfirmDate = null;
    this.ticketRecStatus = null;
    this.ticketRecDate = null;
    setTicketPriceIsSet(false);
    this.ticketPrice = 0;
    this.ticketRecRandomCode = null;
    this.psgName = null;
    this.psgCertificateType = null;
    this.psgCertificateNo = null;
    this.psgMobile = null;
    this.isTestOrder = null;
    this.ticketGateName = null;
    this.ticketSeatSeq = null;
    this.ticketUserDisplayName = null;
    this.ticketSaleCorp = null;
    this.ticketStationAddr = null;
    this.ticketType = null;
    this.ticketSaleTime = null;
    this.busTicketNo = null;
    setExOrderIdIndexIsSet(false);
    this.exOrderIdIndex = 0;
    this.channelSms = null;
    this.refundDesc = null;
    this.pkgName = null;
    this.pkgDesc = null;
    setTicketDisplayPriceIsSet(false);
    this.ticketDisplayPrice = 0;
    setOrderTotalPriceIsSet(false);
    this.orderTotalPrice = 0;
  }

  /**
   * 主键
   */
  public int getId() {
    return this.id;
  }

  /**
   * 主键
   */
  public ExBusOrder setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 修改时间   yyyyMMddHHmmss
   */
  public String getModifyDatetime() {
    return this.modifyDatetime;
  }

  /**
   * 修改时间   yyyyMMddHHmmss
   */
  public ExBusOrder setModifyDatetime(String modifyDatetime) {
    this.modifyDatetime = modifyDatetime;
    return this;
  }

  public void unsetModifyDatetime() {
    this.modifyDatetime = null;
  }

  /** Returns true if field modifyDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyDatetime() {
    return this.modifyDatetime != null;
  }

  public void setModifyDatetimeIsSet(boolean value) {
    if (!value) {
      this.modifyDatetime = null;
    }
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public ExBusOrder setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 创建时间  yyyyMMddHHmmss
   */
  public String getCreateDate() {
    return this.createDate;
  }

  /**
   * 创建时间  yyyyMMddHHmmss
   */
  public ExBusOrder setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  /**
   * 外部 订单号
   */
  public String getExOrderId() {
    return this.exOrderId;
  }

  /**
   * 外部 订单号
   */
  public ExBusOrder setExOrderId(String exOrderId) {
    this.exOrderId = exOrderId;
    return this;
  }

  public void unsetExOrderId() {
    this.exOrderId = null;
  }

  /** Returns true if field exOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExOrderId() {
    return this.exOrderId != null;
  }

  public void setExOrderIdIsSet(boolean value) {
    if (!value) {
      this.exOrderId = null;
    }
  }

  /**
   * 班次id
   */
  public String getRtorderId() {
    return this.rtorderId;
  }

  /**
   * 班次id
   */
  public ExBusOrder setRtorderId(String rtorderId) {
    this.rtorderId = rtorderId;
    return this;
  }

  public void unsetRtorderId() {
    this.rtorderId = null;
  }

  /** Returns true if field rtorderId is set (has been assigned a value) and false otherwise */
  public boolean isSetRtorderId() {
    return this.rtorderId != null;
  }

  public void setRtorderIdIsSet(boolean value) {
    if (!value) {
      this.rtorderId = null;
    }
  }

  /**
   * 班次号
   */
  public String getRtorderCode() {
    return this.rtorderCode;
  }

  /**
   * 班次号
   */
  public ExBusOrder setRtorderCode(String rtorderCode) {
    this.rtorderCode = rtorderCode;
    return this;
  }

  public void unsetRtorderCode() {
    this.rtorderCode = null;
  }

  /** Returns true if field rtorderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRtorderCode() {
    return this.rtorderCode != null;
  }

  public void setRtorderCodeIsSet(boolean value) {
    if (!value) {
      this.rtorderCode = null;
    }
  }

  /**
   * 出发车站编号
   */
  public String getUnitId() {
    return this.unitId;
  }

  /**
   * 出发车站编号
   */
  public ExBusOrder setUnitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  public void unsetUnitId() {
    this.unitId = null;
  }

  /** Returns true if field unitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitId() {
    return this.unitId != null;
  }

  public void setUnitIdIsSet(boolean value) {
    if (!value) {
      this.unitId = null;
    }
  }

  /**
   * 到达车站编号
   */
  public String getToStationId() {
    return this.toStationId;
  }

  /**
   * 到达车站编号
   */
  public ExBusOrder setToStationId(String toStationId) {
    this.toStationId = toStationId;
    return this;
  }

  public void unsetToStationId() {
    this.toStationId = null;
  }

  /** Returns true if field toStationId is set (has been assigned a value) and false otherwise */
  public boolean isSetToStationId() {
    return this.toStationId != null;
  }

  public void setToStationIdIsSet(boolean value) {
    if (!value) {
      this.toStationId = null;
    }
  }

  /**
   * 车辆发车时间 yyyyMMddHHmmss
   */
  public String getPleaveDtyyyyMMddHHmmss() {
    return this.pleaveDtyyyyMMddHHmmss;
  }

  /**
   * 车辆发车时间 yyyyMMddHHmmss
   */
  public ExBusOrder setPleaveDtyyyyMMddHHmmss(String pleaveDtyyyyMMddHHmmss) {
    this.pleaveDtyyyyMMddHHmmss = pleaveDtyyyyMMddHHmmss;
    return this;
  }

  public void unsetPleaveDtyyyyMMddHHmmss() {
    this.pleaveDtyyyyMMddHHmmss = null;
  }

  /** Returns true if field pleaveDtyyyyMMddHHmmss is set (has been assigned a value) and false otherwise */
  public boolean isSetPleaveDtyyyyMMddHHmmss() {
    return this.pleaveDtyyyyMMddHHmmss != null;
  }

  public void setPleaveDtyyyyMMddHHmmssIsSet(boolean value) {
    if (!value) {
      this.pleaveDtyyyyMMddHHmmss = null;
    }
  }

  /**
   * 到站名称
   */
  public String getToStationName() {
    return this.toStationName;
  }

  /**
   * 到站名称
   */
  public ExBusOrder setToStationName(String toStationName) {
    this.toStationName = toStationName;
    return this;
  }

  public void unsetToStationName() {
    this.toStationName = null;
  }

  /** Returns true if field toStationName is set (has been assigned a value) and false otherwise */
  public boolean isSetToStationName() {
    return this.toStationName != null;
  }

  public void setToStationNameIsSet(boolean value) {
    if (!value) {
      this.toStationName = null;
    }
  }

  /**
   * 到达车站6字码
   */
  public String getToStation6code() {
    return this.toStation6code;
  }

  /**
   * 到达车站6字码
   */
  public ExBusOrder setToStation6code(String toStation6code) {
    this.toStation6code = toStation6code;
    return this;
  }

  public void unsetToStation6code() {
    this.toStation6code = null;
  }

  /** Returns true if field toStation6code is set (has been assigned a value) and false otherwise */
  public boolean isSetToStation6code() {
    return this.toStation6code != null;
  }

  public void setToStation6codeIsSet(boolean value) {
    if (!value) {
      this.toStation6code = null;
    }
  }

  /**
   * 出发车站名称
   */
  public String getFromStationName() {
    return this.fromStationName;
  }

  /**
   * 出发车站名称
   */
  public ExBusOrder setFromStationName(String fromStationName) {
    this.fromStationName = fromStationName;
    return this;
  }

  public void unsetFromStationName() {
    this.fromStationName = null;
  }

  /** Returns true if field fromStationName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromStationName() {
    return this.fromStationName != null;
  }

  public void setFromStationNameIsSet(boolean value) {
    if (!value) {
      this.fromStationName = null;
    }
  }

  /**
   * 出发车站6字码
   */
  public String getFromStation6code() {
    return this.fromStation6code;
  }

  /**
   * 出发车站6字码
   */
  public ExBusOrder setFromStation6code(String fromStation6code) {
    this.fromStation6code = fromStation6code;
    return this;
  }

  public void unsetFromStation6code() {
    this.fromStation6code = null;
  }

  /** Returns true if field fromStation6code is set (has been assigned a value) and false otherwise */
  public boolean isSetFromStation6code() {
    return this.fromStation6code != null;
  }

  public void setFromStation6codeIsSet(boolean value) {
    if (!value) {
      this.fromStation6code = null;
    }
  }

  /**
   * 到达省份名称
   */
  public String getToProvinceName() {
    return this.toProvinceName;
  }

  /**
   * 到达省份名称
   */
  public ExBusOrder setToProvinceName(String toProvinceName) {
    this.toProvinceName = toProvinceName;
    return this;
  }

  public void unsetToProvinceName() {
    this.toProvinceName = null;
  }

  /** Returns true if field toProvinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetToProvinceName() {
    return this.toProvinceName != null;
  }

  public void setToProvinceNameIsSet(boolean value) {
    if (!value) {
      this.toProvinceName = null;
    }
  }

  /**
   * 到达省份6字码
   */
  public String getToProvince6code() {
    return this.toProvince6code;
  }

  /**
   * 到达省份6字码
   */
  public ExBusOrder setToProvince6code(String toProvince6code) {
    this.toProvince6code = toProvince6code;
    return this;
  }

  public void unsetToProvince6code() {
    this.toProvince6code = null;
  }

  /** Returns true if field toProvince6code is set (has been assigned a value) and false otherwise */
  public boolean isSetToProvince6code() {
    return this.toProvince6code != null;
  }

  public void setToProvince6codeIsSet(boolean value) {
    if (!value) {
      this.toProvince6code = null;
    }
  }

  /**
   * 出发省份名称
   */
  public String getFromProvinceName() {
    return this.fromProvinceName;
  }

  /**
   * 出发省份名称
   */
  public ExBusOrder setFromProvinceName(String fromProvinceName) {
    this.fromProvinceName = fromProvinceName;
    return this;
  }

  public void unsetFromProvinceName() {
    this.fromProvinceName = null;
  }

  /** Returns true if field fromProvinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromProvinceName() {
    return this.fromProvinceName != null;
  }

  public void setFromProvinceNameIsSet(boolean value) {
    if (!value) {
      this.fromProvinceName = null;
    }
  }

  /**
   * 出发省份6字代码
   */
  public String getFromProvince6code() {
    return this.fromProvince6code;
  }

  /**
   * 出发省份6字代码
   */
  public ExBusOrder setFromProvince6code(String fromProvince6code) {
    this.fromProvince6code = fromProvince6code;
    return this;
  }

  public void unsetFromProvince6code() {
    this.fromProvince6code = null;
  }

  /** Returns true if field fromProvince6code is set (has been assigned a value) and false otherwise */
  public boolean isSetFromProvince6code() {
    return this.fromProvince6code != null;
  }

  public void setFromProvince6codeIsSet(boolean value) {
    if (!value) {
      this.fromProvince6code = null;
    }
  }

  /**
   * 出票失败原因(暂时不用)
   */
  public String getTicketFailReason() {
    return this.ticketFailReason;
  }

  /**
   * 出票失败原因(暂时不用)
   */
  public ExBusOrder setTicketFailReason(String ticketFailReason) {
    this.ticketFailReason = ticketFailReason;
    return this;
  }

  public void unsetTicketFailReason() {
    this.ticketFailReason = null;
  }

  /** Returns true if field ticketFailReason is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketFailReason() {
    return this.ticketFailReason != null;
  }

  public void setTicketFailReasonIsSet(boolean value) {
    if (!value) {
      this.ticketFailReason = null;
    }
  }

  /**
   * 车票状态
   */
  public String getTicketStatus() {
    return this.ticketStatus;
  }

  /**
   * 车票状态
   */
  public ExBusOrder setTicketStatus(String ticketStatus) {
    this.ticketStatus = ticketStatus;
    return this;
  }

  public void unsetTicketStatus() {
    this.ticketStatus = null;
  }

  /** Returns true if field ticketStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketStatus() {
    return this.ticketStatus != null;
  }

  public void setTicketStatusIsSet(boolean value) {
    if (!value) {
      this.ticketStatus = null;
    }
  }

  /**
   * 出票时间 yyyyMMddHHmmss
   */
  public String getTicketConfirmDate() {
    return this.ticketConfirmDate;
  }

  /**
   * 出票时间 yyyyMMddHHmmss
   */
  public ExBusOrder setTicketConfirmDate(String ticketConfirmDate) {
    this.ticketConfirmDate = ticketConfirmDate;
    return this;
  }

  public void unsetTicketConfirmDate() {
    this.ticketConfirmDate = null;
  }

  /** Returns true if field ticketConfirmDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketConfirmDate() {
    return this.ticketConfirmDate != null;
  }

  public void setTicketConfirmDateIsSet(boolean value) {
    if (!value) {
      this.ticketConfirmDate = null;
    }
  }

  /**
   * 取票状态
   */
  public String getTicketRecStatus() {
    return this.ticketRecStatus;
  }

  /**
   * 取票状态
   */
  public ExBusOrder setTicketRecStatus(String ticketRecStatus) {
    this.ticketRecStatus = ticketRecStatus;
    return this;
  }

  public void unsetTicketRecStatus() {
    this.ticketRecStatus = null;
  }

  /** Returns true if field ticketRecStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecStatus() {
    return this.ticketRecStatus != null;
  }

  public void setTicketRecStatusIsSet(boolean value) {
    if (!value) {
      this.ticketRecStatus = null;
    }
  }

  /**
   * 取票时间 yyyyMMddHHmmss
   */
  public String getTicketRecDate() {
    return this.ticketRecDate;
  }

  /**
   * 取票时间 yyyyMMddHHmmss
   */
  public ExBusOrder setTicketRecDate(String ticketRecDate) {
    this.ticketRecDate = ticketRecDate;
    return this;
  }

  public void unsetTicketRecDate() {
    this.ticketRecDate = null;
  }

  /** Returns true if field ticketRecDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecDate() {
    return this.ticketRecDate != null;
  }

  public void setTicketRecDateIsSet(boolean value) {
    if (!value) {
      this.ticketRecDate = null;
    }
  }

  /**
   * 车票结算价格
   */
  public int getTicketPrice() {
    return this.ticketPrice;
  }

  /**
   * 车票结算价格
   */
  public ExBusOrder setTicketPrice(int ticketPrice) {
    this.ticketPrice = ticketPrice;
    setTicketPriceIsSet(true);
    return this;
  }

  public void unsetTicketPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETPRICE_ISSET_ID);
  }

  /** Returns true if field ticketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKETPRICE_ISSET_ID);
  }

  public void setTicketPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETPRICE_ISSET_ID, value);
  }

  /**
   * 取票码
   */
  public String getTicketRecRandomCode() {
    return this.ticketRecRandomCode;
  }

  /**
   * 取票码
   */
  public ExBusOrder setTicketRecRandomCode(String ticketRecRandomCode) {
    this.ticketRecRandomCode = ticketRecRandomCode;
    return this;
  }

  public void unsetTicketRecRandomCode() {
    this.ticketRecRandomCode = null;
  }

  /** Returns true if field ticketRecRandomCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketRecRandomCode() {
    return this.ticketRecRandomCode != null;
  }

  public void setTicketRecRandomCodeIsSet(boolean value) {
    if (!value) {
      this.ticketRecRandomCode = null;
    }
  }

  /**
   * 乘客姓名
   */
  public String getPsgName() {
    return this.psgName;
  }

  /**
   * 乘客姓名
   */
  public ExBusOrder setPsgName(String psgName) {
    this.psgName = psgName;
    return this;
  }

  public void unsetPsgName() {
    this.psgName = null;
  }

  /** Returns true if field psgName is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgName() {
    return this.psgName != null;
  }

  public void setPsgNameIsSet(boolean value) {
    if (!value) {
      this.psgName = null;
    }
  }

  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public CertificateType getPsgCertificateType() {
    return this.psgCertificateType;
  }

  /**
   * 证件类型
   * 
   * @see CertificateType
   */
  public ExBusOrder setPsgCertificateType(CertificateType psgCertificateType) {
    this.psgCertificateType = psgCertificateType;
    return this;
  }

  public void unsetPsgCertificateType() {
    this.psgCertificateType = null;
  }

  /** Returns true if field psgCertificateType is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgCertificateType() {
    return this.psgCertificateType != null;
  }

  public void setPsgCertificateTypeIsSet(boolean value) {
    if (!value) {
      this.psgCertificateType = null;
    }
  }

  /**
   * 证件号
   */
  public String getPsgCertificateNo() {
    return this.psgCertificateNo;
  }

  /**
   * 证件号
   */
  public ExBusOrder setPsgCertificateNo(String psgCertificateNo) {
    this.psgCertificateNo = psgCertificateNo;
    return this;
  }

  public void unsetPsgCertificateNo() {
    this.psgCertificateNo = null;
  }

  /** Returns true if field psgCertificateNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgCertificateNo() {
    return this.psgCertificateNo != null;
  }

  public void setPsgCertificateNoIsSet(boolean value) {
    if (!value) {
      this.psgCertificateNo = null;
    }
  }

  /**
   * 手机号
   */
  public String getPsgMobile() {
    return this.psgMobile;
  }

  /**
   * 手机号
   */
  public ExBusOrder setPsgMobile(String psgMobile) {
    this.psgMobile = psgMobile;
    return this;
  }

  public void unsetPsgMobile() {
    this.psgMobile = null;
  }

  /** Returns true if field psgMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgMobile() {
    return this.psgMobile != null;
  }

  public void setPsgMobileIsSet(boolean value) {
    if (!value) {
      this.psgMobile = null;
    }
  }

  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public String getIsTestOrder() {
    return this.isTestOrder;
  }

  /**
   * 是否测试订单   Y:测试订单  N:非测试订单
   */
  public ExBusOrder setIsTestOrder(String isTestOrder) {
    this.isTestOrder = isTestOrder;
    return this;
  }

  public void unsetIsTestOrder() {
    this.isTestOrder = null;
  }

  /** Returns true if field isTestOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTestOrder() {
    return this.isTestOrder != null;
  }

  public void setIsTestOrderIsSet(boolean value) {
    if (!value) {
      this.isTestOrder = null;
    }
  }

  /**
   * 检票口 --仅用做打印在车票上使用
   */
  public String getTicketGateName() {
    return this.ticketGateName;
  }

  /**
   * 检票口 --仅用做打印在车票上使用
   */
  public ExBusOrder setTicketGateName(String ticketGateName) {
    this.ticketGateName = ticketGateName;
    return this;
  }

  public void unsetTicketGateName() {
    this.ticketGateName = null;
  }

  /** Returns true if field ticketGateName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketGateName() {
    return this.ticketGateName != null;
  }

  public void setTicketGateNameIsSet(boolean value) {
    if (!value) {
      this.ticketGateName = null;
    }
  }

  /**
   * 座位号码 --仅用做打印在车票上使用
   */
  public String getTicketSeatSeq() {
    return this.ticketSeatSeq;
  }

  /**
   * 座位号码 --仅用做打印在车票上使用
   */
  public ExBusOrder setTicketSeatSeq(String ticketSeatSeq) {
    this.ticketSeatSeq = ticketSeatSeq;
    return this;
  }

  public void unsetTicketSeatSeq() {
    this.ticketSeatSeq = null;
  }

  /** Returns true if field ticketSeatSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketSeatSeq() {
    return this.ticketSeatSeq != null;
  }

  public void setTicketSeatSeqIsSet(boolean value) {
    if (!value) {
      this.ticketSeatSeq = null;
    }
  }

  /**
   * 出票人姓名 --仅用做打印在车票上使用
   */
  public String getTicketUserDisplayName() {
    return this.ticketUserDisplayName;
  }

  /**
   * 出票人姓名 --仅用做打印在车票上使用
   */
  public ExBusOrder setTicketUserDisplayName(String ticketUserDisplayName) {
    this.ticketUserDisplayName = ticketUserDisplayName;
    return this;
  }

  public void unsetTicketUserDisplayName() {
    this.ticketUserDisplayName = null;
  }

  /** Returns true if field ticketUserDisplayName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketUserDisplayName() {
    return this.ticketUserDisplayName != null;
  }

  public void setTicketUserDisplayNameIsSet(boolean value) {
    if (!value) {
      this.ticketUserDisplayName = null;
    }
  }

  /**
   * 出票站点名称 --仅用做打印在车票上使用
   */
  public String getTicketSaleCorp() {
    return this.ticketSaleCorp;
  }

  /**
   * 出票站点名称 --仅用做打印在车票上使用
   */
  public ExBusOrder setTicketSaleCorp(String ticketSaleCorp) {
    this.ticketSaleCorp = ticketSaleCorp;
    return this;
  }

  public void unsetTicketSaleCorp() {
    this.ticketSaleCorp = null;
  }

  /** Returns true if field ticketSaleCorp is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketSaleCorp() {
    return this.ticketSaleCorp != null;
  }

  public void setTicketSaleCorpIsSet(boolean value) {
    if (!value) {
      this.ticketSaleCorp = null;
    }
  }

  /**
   * 出票站点地址 --仅用做打印在车票上使用
   */
  public String getTicketStationAddr() {
    return this.ticketStationAddr;
  }

  /**
   * 出票站点地址 --仅用做打印在车票上使用
   */
  public ExBusOrder setTicketStationAddr(String ticketStationAddr) {
    this.ticketStationAddr = ticketStationAddr;
    return this;
  }

  public void unsetTicketStationAddr() {
    this.ticketStationAddr = null;
  }

  /** Returns true if field ticketStationAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketStationAddr() {
    return this.ticketStationAddr != null;
  }

  public void setTicketStationAddrIsSet(boolean value) {
    if (!value) {
      this.ticketStationAddr = null;
    }
  }

  /**
   * 票面类型  --仅用做打印在车票上使用
   */
  public String getTicketType() {
    return this.ticketType;
  }

  /**
   * 票面类型  --仅用做打印在车票上使用
   */
  public ExBusOrder setTicketType(String ticketType) {
    this.ticketType = ticketType;
    return this;
  }

  public void unsetTicketType() {
    this.ticketType = null;
  }

  /** Returns true if field ticketType is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketType() {
    return this.ticketType != null;
  }

  public void setTicketTypeIsSet(boolean value) {
    if (!value) {
      this.ticketType = null;
    }
  }

  /**
   * 出票时间戳 --仅用做打印在车票上使用
   */
  public String getTicketSaleTime() {
    return this.ticketSaleTime;
  }

  /**
   * 出票时间戳 --仅用做打印在车票上使用
   */
  public ExBusOrder setTicketSaleTime(String ticketSaleTime) {
    this.ticketSaleTime = ticketSaleTime;
    return this;
  }

  public void unsetTicketSaleTime() {
    this.ticketSaleTime = null;
  }

  /** Returns true if field ticketSaleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketSaleTime() {
    return this.ticketSaleTime != null;
  }

  public void setTicketSaleTimeIsSet(boolean value) {
    if (!value) {
      this.ticketSaleTime = null;
    }
  }

  /**
   * 车票号
   */
  public String getBusTicketNo() {
    return this.busTicketNo;
  }

  /**
   * 车票号
   */
  public ExBusOrder setBusTicketNo(String busTicketNo) {
    this.busTicketNo = busTicketNo;
    return this;
  }

  public void unsetBusTicketNo() {
    this.busTicketNo = null;
  }

  /** Returns true if field busTicketNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBusTicketNo() {
    return this.busTicketNo != null;
  }

  public void setBusTicketNoIsSet(boolean value) {
    if (!value) {
      this.busTicketNo = null;
    }
  }

  /**
   * 车票序号
   */
  public int getExOrderIdIndex() {
    return this.exOrderIdIndex;
  }

  /**
   * 车票序号
   */
  public ExBusOrder setExOrderIdIndex(int exOrderIdIndex) {
    this.exOrderIdIndex = exOrderIdIndex;
    setExOrderIdIndexIsSet(true);
    return this;
  }

  public void unsetExOrderIdIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXORDERIDINDEX_ISSET_ID);
  }

  /** Returns true if field exOrderIdIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetExOrderIdIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __EXORDERIDINDEX_ISSET_ID);
  }

  public void setExOrderIdIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXORDERIDINDEX_ISSET_ID, value);
  }

  /**
   * 短信发送内容
   */
  public String getChannelSms() {
    return this.channelSms;
  }

  /**
   * 短信发送内容
   */
  public ExBusOrder setChannelSms(String channelSms) {
    this.channelSms = channelSms;
    return this;
  }

  public void unsetChannelSms() {
    this.channelSms = null;
  }

  /** Returns true if field channelSms is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelSms() {
    return this.channelSms != null;
  }

  public void setChannelSmsIsSet(boolean value) {
    if (!value) {
      this.channelSms = null;
    }
  }

  /**
   * 退改规定
   */
  public String getRefundDesc() {
    return this.refundDesc;
  }

  /**
   * 退改规定
   */
  public ExBusOrder setRefundDesc(String refundDesc) {
    this.refundDesc = refundDesc;
    return this;
  }

  public void unsetRefundDesc() {
    this.refundDesc = null;
  }

  /** Returns true if field refundDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDesc() {
    return this.refundDesc != null;
  }

  public void setRefundDescIsSet(boolean value) {
    if (!value) {
      this.refundDesc = null;
    }
  }

  /**
   * 套餐名称
   */
  public String getPkgName() {
    return this.pkgName;
  }

  /**
   * 套餐名称
   */
  public ExBusOrder setPkgName(String pkgName) {
    this.pkgName = pkgName;
    return this;
  }

  public void unsetPkgName() {
    this.pkgName = null;
  }

  /** Returns true if field pkgName is set (has been assigned a value) and false otherwise */
  public boolean isSetPkgName() {
    return this.pkgName != null;
  }

  public void setPkgNameIsSet(boolean value) {
    if (!value) {
      this.pkgName = null;
    }
  }

  /**
   * 套餐描述
   */
  public String getPkgDesc() {
    return this.pkgDesc;
  }

  /**
   * 套餐描述
   */
  public ExBusOrder setPkgDesc(String pkgDesc) {
    this.pkgDesc = pkgDesc;
    return this;
  }

  public void unsetPkgDesc() {
    this.pkgDesc = null;
  }

  /** Returns true if field pkgDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetPkgDesc() {
    return this.pkgDesc != null;
  }

  public void setPkgDescIsSet(boolean value) {
    if (!value) {
      this.pkgDesc = null;
    }
  }

  /**
   * 车票展示价格，票面价，打印在车票中
   */
  public int getTicketDisplayPrice() {
    return this.ticketDisplayPrice;
  }

  /**
   * 车票展示价格，票面价，打印在车票中
   */
  public ExBusOrder setTicketDisplayPrice(int ticketDisplayPrice) {
    this.ticketDisplayPrice = ticketDisplayPrice;
    setTicketDisplayPriceIsSet(true);
    return this;
  }

  public void unsetTicketDisplayPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETDISPLAYPRICE_ISSET_ID);
  }

  /** Returns true if field ticketDisplayPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketDisplayPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKETDISPLAYPRICE_ISSET_ID);
  }

  public void setTicketDisplayPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETDISPLAYPRICE_ISSET_ID, value);
  }

  /**
   * 套餐总价  对于非打包产品显示 整张订单总价
   */
  public int getOrderTotalPrice() {
    return this.orderTotalPrice;
  }

  /**
   * 套餐总价  对于非打包产品显示 整张订单总价
   */
  public ExBusOrder setOrderTotalPrice(int orderTotalPrice) {
    this.orderTotalPrice = orderTotalPrice;
    setOrderTotalPriceIsSet(true);
    return this;
  }

  public void unsetOrderTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTOTALPRICE_ISSET_ID);
  }

  /** Returns true if field orderTotalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTOTALPRICE_ISSET_ID);
  }

  public void setOrderTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTOTALPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MODIFY_DATETIME:
      if (value == null) {
        unsetModifyDatetime();
      } else {
        setModifyDatetime((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case EX_ORDER_ID:
      if (value == null) {
        unsetExOrderId();
      } else {
        setExOrderId((String)value);
      }
      break;

    case RTORDER_ID:
      if (value == null) {
        unsetRtorderId();
      } else {
        setRtorderId((String)value);
      }
      break;

    case RTORDER_CODE:
      if (value == null) {
        unsetRtorderCode();
      } else {
        setRtorderCode((String)value);
      }
      break;

    case UNIT_ID:
      if (value == null) {
        unsetUnitId();
      } else {
        setUnitId((String)value);
      }
      break;

    case TO_STATION_ID:
      if (value == null) {
        unsetToStationId();
      } else {
        setToStationId((String)value);
      }
      break;

    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      if (value == null) {
        unsetPleaveDtyyyyMMddHHmmss();
      } else {
        setPleaveDtyyyyMMddHHmmss((String)value);
      }
      break;

    case TO_STATION_NAME:
      if (value == null) {
        unsetToStationName();
      } else {
        setToStationName((String)value);
      }
      break;

    case TO_STATION6CODE:
      if (value == null) {
        unsetToStation6code();
      } else {
        setToStation6code((String)value);
      }
      break;

    case FROM_STATION_NAME:
      if (value == null) {
        unsetFromStationName();
      } else {
        setFromStationName((String)value);
      }
      break;

    case FROM_STATION6CODE:
      if (value == null) {
        unsetFromStation6code();
      } else {
        setFromStation6code((String)value);
      }
      break;

    case TO_PROVINCE_NAME:
      if (value == null) {
        unsetToProvinceName();
      } else {
        setToProvinceName((String)value);
      }
      break;

    case TO_PROVINCE6CODE:
      if (value == null) {
        unsetToProvince6code();
      } else {
        setToProvince6code((String)value);
      }
      break;

    case FROM_PROVINCE_NAME:
      if (value == null) {
        unsetFromProvinceName();
      } else {
        setFromProvinceName((String)value);
      }
      break;

    case FROM_PROVINCE6CODE:
      if (value == null) {
        unsetFromProvince6code();
      } else {
        setFromProvince6code((String)value);
      }
      break;

    case TICKET_FAIL_REASON:
      if (value == null) {
        unsetTicketFailReason();
      } else {
        setTicketFailReason((String)value);
      }
      break;

    case TICKET_STATUS:
      if (value == null) {
        unsetTicketStatus();
      } else {
        setTicketStatus((String)value);
      }
      break;

    case TICKET_CONFIRM_DATE:
      if (value == null) {
        unsetTicketConfirmDate();
      } else {
        setTicketConfirmDate((String)value);
      }
      break;

    case TICKET_REC_STATUS:
      if (value == null) {
        unsetTicketRecStatus();
      } else {
        setTicketRecStatus((String)value);
      }
      break;

    case TICKET_REC_DATE:
      if (value == null) {
        unsetTicketRecDate();
      } else {
        setTicketRecDate((String)value);
      }
      break;

    case TICKET_PRICE:
      if (value == null) {
        unsetTicketPrice();
      } else {
        setTicketPrice((Integer)value);
      }
      break;

    case TICKET_REC_RANDOM_CODE:
      if (value == null) {
        unsetTicketRecRandomCode();
      } else {
        setTicketRecRandomCode((String)value);
      }
      break;

    case PSG_NAME:
      if (value == null) {
        unsetPsgName();
      } else {
        setPsgName((String)value);
      }
      break;

    case PSG_CERTIFICATE_TYPE:
      if (value == null) {
        unsetPsgCertificateType();
      } else {
        setPsgCertificateType((CertificateType)value);
      }
      break;

    case PSG_CERTIFICATE_NO:
      if (value == null) {
        unsetPsgCertificateNo();
      } else {
        setPsgCertificateNo((String)value);
      }
      break;

    case PSG_MOBILE:
      if (value == null) {
        unsetPsgMobile();
      } else {
        setPsgMobile((String)value);
      }
      break;

    case IS_TEST_ORDER:
      if (value == null) {
        unsetIsTestOrder();
      } else {
        setIsTestOrder((String)value);
      }
      break;

    case TICKET_GATE_NAME:
      if (value == null) {
        unsetTicketGateName();
      } else {
        setTicketGateName((String)value);
      }
      break;

    case TICKET_SEAT_SEQ:
      if (value == null) {
        unsetTicketSeatSeq();
      } else {
        setTicketSeatSeq((String)value);
      }
      break;

    case TICKET_USER_DISPLAY_NAME:
      if (value == null) {
        unsetTicketUserDisplayName();
      } else {
        setTicketUserDisplayName((String)value);
      }
      break;

    case TICKET_SALE_CORP:
      if (value == null) {
        unsetTicketSaleCorp();
      } else {
        setTicketSaleCorp((String)value);
      }
      break;

    case TICKET_STATION_ADDR:
      if (value == null) {
        unsetTicketStationAddr();
      } else {
        setTicketStationAddr((String)value);
      }
      break;

    case TICKET_TYPE:
      if (value == null) {
        unsetTicketType();
      } else {
        setTicketType((String)value);
      }
      break;

    case TICKET_SALE_TIME:
      if (value == null) {
        unsetTicketSaleTime();
      } else {
        setTicketSaleTime((String)value);
      }
      break;

    case BUS_TICKET_NO:
      if (value == null) {
        unsetBusTicketNo();
      } else {
        setBusTicketNo((String)value);
      }
      break;

    case EX_ORDER_ID_INDEX:
      if (value == null) {
        unsetExOrderIdIndex();
      } else {
        setExOrderIdIndex((Integer)value);
      }
      break;

    case CHANNEL_SMS:
      if (value == null) {
        unsetChannelSms();
      } else {
        setChannelSms((String)value);
      }
      break;

    case REFUND_DESC:
      if (value == null) {
        unsetRefundDesc();
      } else {
        setRefundDesc((String)value);
      }
      break;

    case PKG_NAME:
      if (value == null) {
        unsetPkgName();
      } else {
        setPkgName((String)value);
      }
      break;

    case PKG_DESC:
      if (value == null) {
        unsetPkgDesc();
      } else {
        setPkgDesc((String)value);
      }
      break;

    case TICKET_DISPLAY_PRICE:
      if (value == null) {
        unsetTicketDisplayPrice();
      } else {
        setTicketDisplayPrice((Integer)value);
      }
      break;

    case ORDER_TOTAL_PRICE:
      if (value == null) {
        unsetOrderTotalPrice();
      } else {
        setOrderTotalPrice((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MODIFY_DATETIME:
      return getModifyDatetime();

    case REMARK:
      return getRemark();

    case CREATE_DATE:
      return getCreateDate();

    case EX_ORDER_ID:
      return getExOrderId();

    case RTORDER_ID:
      return getRtorderId();

    case RTORDER_CODE:
      return getRtorderCode();

    case UNIT_ID:
      return getUnitId();

    case TO_STATION_ID:
      return getToStationId();

    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      return getPleaveDtyyyyMMddHHmmss();

    case TO_STATION_NAME:
      return getToStationName();

    case TO_STATION6CODE:
      return getToStation6code();

    case FROM_STATION_NAME:
      return getFromStationName();

    case FROM_STATION6CODE:
      return getFromStation6code();

    case TO_PROVINCE_NAME:
      return getToProvinceName();

    case TO_PROVINCE6CODE:
      return getToProvince6code();

    case FROM_PROVINCE_NAME:
      return getFromProvinceName();

    case FROM_PROVINCE6CODE:
      return getFromProvince6code();

    case TICKET_FAIL_REASON:
      return getTicketFailReason();

    case TICKET_STATUS:
      return getTicketStatus();

    case TICKET_CONFIRM_DATE:
      return getTicketConfirmDate();

    case TICKET_REC_STATUS:
      return getTicketRecStatus();

    case TICKET_REC_DATE:
      return getTicketRecDate();

    case TICKET_PRICE:
      return getTicketPrice();

    case TICKET_REC_RANDOM_CODE:
      return getTicketRecRandomCode();

    case PSG_NAME:
      return getPsgName();

    case PSG_CERTIFICATE_TYPE:
      return getPsgCertificateType();

    case PSG_CERTIFICATE_NO:
      return getPsgCertificateNo();

    case PSG_MOBILE:
      return getPsgMobile();

    case IS_TEST_ORDER:
      return getIsTestOrder();

    case TICKET_GATE_NAME:
      return getTicketGateName();

    case TICKET_SEAT_SEQ:
      return getTicketSeatSeq();

    case TICKET_USER_DISPLAY_NAME:
      return getTicketUserDisplayName();

    case TICKET_SALE_CORP:
      return getTicketSaleCorp();

    case TICKET_STATION_ADDR:
      return getTicketStationAddr();

    case TICKET_TYPE:
      return getTicketType();

    case TICKET_SALE_TIME:
      return getTicketSaleTime();

    case BUS_TICKET_NO:
      return getBusTicketNo();

    case EX_ORDER_ID_INDEX:
      return getExOrderIdIndex();

    case CHANNEL_SMS:
      return getChannelSms();

    case REFUND_DESC:
      return getRefundDesc();

    case PKG_NAME:
      return getPkgName();

    case PKG_DESC:
      return getPkgDesc();

    case TICKET_DISPLAY_PRICE:
      return getTicketDisplayPrice();

    case ORDER_TOTAL_PRICE:
      return getOrderTotalPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MODIFY_DATETIME:
      return isSetModifyDatetime();
    case REMARK:
      return isSetRemark();
    case CREATE_DATE:
      return isSetCreateDate();
    case EX_ORDER_ID:
      return isSetExOrderId();
    case RTORDER_ID:
      return isSetRtorderId();
    case RTORDER_CODE:
      return isSetRtorderCode();
    case UNIT_ID:
      return isSetUnitId();
    case TO_STATION_ID:
      return isSetToStationId();
    case PLEAVE_DTYYYY_MMDD_HHMMSS:
      return isSetPleaveDtyyyyMMddHHmmss();
    case TO_STATION_NAME:
      return isSetToStationName();
    case TO_STATION6CODE:
      return isSetToStation6code();
    case FROM_STATION_NAME:
      return isSetFromStationName();
    case FROM_STATION6CODE:
      return isSetFromStation6code();
    case TO_PROVINCE_NAME:
      return isSetToProvinceName();
    case TO_PROVINCE6CODE:
      return isSetToProvince6code();
    case FROM_PROVINCE_NAME:
      return isSetFromProvinceName();
    case FROM_PROVINCE6CODE:
      return isSetFromProvince6code();
    case TICKET_FAIL_REASON:
      return isSetTicketFailReason();
    case TICKET_STATUS:
      return isSetTicketStatus();
    case TICKET_CONFIRM_DATE:
      return isSetTicketConfirmDate();
    case TICKET_REC_STATUS:
      return isSetTicketRecStatus();
    case TICKET_REC_DATE:
      return isSetTicketRecDate();
    case TICKET_PRICE:
      return isSetTicketPrice();
    case TICKET_REC_RANDOM_CODE:
      return isSetTicketRecRandomCode();
    case PSG_NAME:
      return isSetPsgName();
    case PSG_CERTIFICATE_TYPE:
      return isSetPsgCertificateType();
    case PSG_CERTIFICATE_NO:
      return isSetPsgCertificateNo();
    case PSG_MOBILE:
      return isSetPsgMobile();
    case IS_TEST_ORDER:
      return isSetIsTestOrder();
    case TICKET_GATE_NAME:
      return isSetTicketGateName();
    case TICKET_SEAT_SEQ:
      return isSetTicketSeatSeq();
    case TICKET_USER_DISPLAY_NAME:
      return isSetTicketUserDisplayName();
    case TICKET_SALE_CORP:
      return isSetTicketSaleCorp();
    case TICKET_STATION_ADDR:
      return isSetTicketStationAddr();
    case TICKET_TYPE:
      return isSetTicketType();
    case TICKET_SALE_TIME:
      return isSetTicketSaleTime();
    case BUS_TICKET_NO:
      return isSetBusTicketNo();
    case EX_ORDER_ID_INDEX:
      return isSetExOrderIdIndex();
    case CHANNEL_SMS:
      return isSetChannelSms();
    case REFUND_DESC:
      return isSetRefundDesc();
    case PKG_NAME:
      return isSetPkgName();
    case PKG_DESC:
      return isSetPkgDesc();
    case TICKET_DISPLAY_PRICE:
      return isSetTicketDisplayPrice();
    case ORDER_TOTAL_PRICE:
      return isSetOrderTotalPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExBusOrder)
      return this.equals((ExBusOrder)that);
    return false;
  }

  public boolean equals(ExBusOrder that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_modifyDatetime = true && this.isSetModifyDatetime();
    boolean that_present_modifyDatetime = true && that.isSetModifyDatetime();
    if (this_present_modifyDatetime || that_present_modifyDatetime) {
      if (!(this_present_modifyDatetime && that_present_modifyDatetime))
        return false;
      if (!this.modifyDatetime.equals(that.modifyDatetime))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_exOrderId = true && this.isSetExOrderId();
    boolean that_present_exOrderId = true && that.isSetExOrderId();
    if (this_present_exOrderId || that_present_exOrderId) {
      if (!(this_present_exOrderId && that_present_exOrderId))
        return false;
      if (!this.exOrderId.equals(that.exOrderId))
        return false;
    }

    boolean this_present_rtorderId = true && this.isSetRtorderId();
    boolean that_present_rtorderId = true && that.isSetRtorderId();
    if (this_present_rtorderId || that_present_rtorderId) {
      if (!(this_present_rtorderId && that_present_rtorderId))
        return false;
      if (!this.rtorderId.equals(that.rtorderId))
        return false;
    }

    boolean this_present_rtorderCode = true && this.isSetRtorderCode();
    boolean that_present_rtorderCode = true && that.isSetRtorderCode();
    if (this_present_rtorderCode || that_present_rtorderCode) {
      if (!(this_present_rtorderCode && that_present_rtorderCode))
        return false;
      if (!this.rtorderCode.equals(that.rtorderCode))
        return false;
    }

    boolean this_present_unitId = true && this.isSetUnitId();
    boolean that_present_unitId = true && that.isSetUnitId();
    if (this_present_unitId || that_present_unitId) {
      if (!(this_present_unitId && that_present_unitId))
        return false;
      if (!this.unitId.equals(that.unitId))
        return false;
    }

    boolean this_present_toStationId = true && this.isSetToStationId();
    boolean that_present_toStationId = true && that.isSetToStationId();
    if (this_present_toStationId || that_present_toStationId) {
      if (!(this_present_toStationId && that_present_toStationId))
        return false;
      if (!this.toStationId.equals(that.toStationId))
        return false;
    }

    boolean this_present_pleaveDtyyyyMMddHHmmss = true && this.isSetPleaveDtyyyyMMddHHmmss();
    boolean that_present_pleaveDtyyyyMMddHHmmss = true && that.isSetPleaveDtyyyyMMddHHmmss();
    if (this_present_pleaveDtyyyyMMddHHmmss || that_present_pleaveDtyyyyMMddHHmmss) {
      if (!(this_present_pleaveDtyyyyMMddHHmmss && that_present_pleaveDtyyyyMMddHHmmss))
        return false;
      if (!this.pleaveDtyyyyMMddHHmmss.equals(that.pleaveDtyyyyMMddHHmmss))
        return false;
    }

    boolean this_present_toStationName = true && this.isSetToStationName();
    boolean that_present_toStationName = true && that.isSetToStationName();
    if (this_present_toStationName || that_present_toStationName) {
      if (!(this_present_toStationName && that_present_toStationName))
        return false;
      if (!this.toStationName.equals(that.toStationName))
        return false;
    }

    boolean this_present_toStation6code = true && this.isSetToStation6code();
    boolean that_present_toStation6code = true && that.isSetToStation6code();
    if (this_present_toStation6code || that_present_toStation6code) {
      if (!(this_present_toStation6code && that_present_toStation6code))
        return false;
      if (!this.toStation6code.equals(that.toStation6code))
        return false;
    }

    boolean this_present_fromStationName = true && this.isSetFromStationName();
    boolean that_present_fromStationName = true && that.isSetFromStationName();
    if (this_present_fromStationName || that_present_fromStationName) {
      if (!(this_present_fromStationName && that_present_fromStationName))
        return false;
      if (!this.fromStationName.equals(that.fromStationName))
        return false;
    }

    boolean this_present_fromStation6code = true && this.isSetFromStation6code();
    boolean that_present_fromStation6code = true && that.isSetFromStation6code();
    if (this_present_fromStation6code || that_present_fromStation6code) {
      if (!(this_present_fromStation6code && that_present_fromStation6code))
        return false;
      if (!this.fromStation6code.equals(that.fromStation6code))
        return false;
    }

    boolean this_present_toProvinceName = true && this.isSetToProvinceName();
    boolean that_present_toProvinceName = true && that.isSetToProvinceName();
    if (this_present_toProvinceName || that_present_toProvinceName) {
      if (!(this_present_toProvinceName && that_present_toProvinceName))
        return false;
      if (!this.toProvinceName.equals(that.toProvinceName))
        return false;
    }

    boolean this_present_toProvince6code = true && this.isSetToProvince6code();
    boolean that_present_toProvince6code = true && that.isSetToProvince6code();
    if (this_present_toProvince6code || that_present_toProvince6code) {
      if (!(this_present_toProvince6code && that_present_toProvince6code))
        return false;
      if (!this.toProvince6code.equals(that.toProvince6code))
        return false;
    }

    boolean this_present_fromProvinceName = true && this.isSetFromProvinceName();
    boolean that_present_fromProvinceName = true && that.isSetFromProvinceName();
    if (this_present_fromProvinceName || that_present_fromProvinceName) {
      if (!(this_present_fromProvinceName && that_present_fromProvinceName))
        return false;
      if (!this.fromProvinceName.equals(that.fromProvinceName))
        return false;
    }

    boolean this_present_fromProvince6code = true && this.isSetFromProvince6code();
    boolean that_present_fromProvince6code = true && that.isSetFromProvince6code();
    if (this_present_fromProvince6code || that_present_fromProvince6code) {
      if (!(this_present_fromProvince6code && that_present_fromProvince6code))
        return false;
      if (!this.fromProvince6code.equals(that.fromProvince6code))
        return false;
    }

    boolean this_present_ticketFailReason = true && this.isSetTicketFailReason();
    boolean that_present_ticketFailReason = true && that.isSetTicketFailReason();
    if (this_present_ticketFailReason || that_present_ticketFailReason) {
      if (!(this_present_ticketFailReason && that_present_ticketFailReason))
        return false;
      if (!this.ticketFailReason.equals(that.ticketFailReason))
        return false;
    }

    boolean this_present_ticketStatus = true && this.isSetTicketStatus();
    boolean that_present_ticketStatus = true && that.isSetTicketStatus();
    if (this_present_ticketStatus || that_present_ticketStatus) {
      if (!(this_present_ticketStatus && that_present_ticketStatus))
        return false;
      if (!this.ticketStatus.equals(that.ticketStatus))
        return false;
    }

    boolean this_present_ticketConfirmDate = true && this.isSetTicketConfirmDate();
    boolean that_present_ticketConfirmDate = true && that.isSetTicketConfirmDate();
    if (this_present_ticketConfirmDate || that_present_ticketConfirmDate) {
      if (!(this_present_ticketConfirmDate && that_present_ticketConfirmDate))
        return false;
      if (!this.ticketConfirmDate.equals(that.ticketConfirmDate))
        return false;
    }

    boolean this_present_ticketRecStatus = true && this.isSetTicketRecStatus();
    boolean that_present_ticketRecStatus = true && that.isSetTicketRecStatus();
    if (this_present_ticketRecStatus || that_present_ticketRecStatus) {
      if (!(this_present_ticketRecStatus && that_present_ticketRecStatus))
        return false;
      if (!this.ticketRecStatus.equals(that.ticketRecStatus))
        return false;
    }

    boolean this_present_ticketRecDate = true && this.isSetTicketRecDate();
    boolean that_present_ticketRecDate = true && that.isSetTicketRecDate();
    if (this_present_ticketRecDate || that_present_ticketRecDate) {
      if (!(this_present_ticketRecDate && that_present_ticketRecDate))
        return false;
      if (!this.ticketRecDate.equals(that.ticketRecDate))
        return false;
    }

    boolean this_present_ticketPrice = true;
    boolean that_present_ticketPrice = true;
    if (this_present_ticketPrice || that_present_ticketPrice) {
      if (!(this_present_ticketPrice && that_present_ticketPrice))
        return false;
      if (this.ticketPrice != that.ticketPrice)
        return false;
    }

    boolean this_present_ticketRecRandomCode = true && this.isSetTicketRecRandomCode();
    boolean that_present_ticketRecRandomCode = true && that.isSetTicketRecRandomCode();
    if (this_present_ticketRecRandomCode || that_present_ticketRecRandomCode) {
      if (!(this_present_ticketRecRandomCode && that_present_ticketRecRandomCode))
        return false;
      if (!this.ticketRecRandomCode.equals(that.ticketRecRandomCode))
        return false;
    }

    boolean this_present_psgName = true && this.isSetPsgName();
    boolean that_present_psgName = true && that.isSetPsgName();
    if (this_present_psgName || that_present_psgName) {
      if (!(this_present_psgName && that_present_psgName))
        return false;
      if (!this.psgName.equals(that.psgName))
        return false;
    }

    boolean this_present_psgCertificateType = true && this.isSetPsgCertificateType();
    boolean that_present_psgCertificateType = true && that.isSetPsgCertificateType();
    if (this_present_psgCertificateType || that_present_psgCertificateType) {
      if (!(this_present_psgCertificateType && that_present_psgCertificateType))
        return false;
      if (!this.psgCertificateType.equals(that.psgCertificateType))
        return false;
    }

    boolean this_present_psgCertificateNo = true && this.isSetPsgCertificateNo();
    boolean that_present_psgCertificateNo = true && that.isSetPsgCertificateNo();
    if (this_present_psgCertificateNo || that_present_psgCertificateNo) {
      if (!(this_present_psgCertificateNo && that_present_psgCertificateNo))
        return false;
      if (!this.psgCertificateNo.equals(that.psgCertificateNo))
        return false;
    }

    boolean this_present_psgMobile = true && this.isSetPsgMobile();
    boolean that_present_psgMobile = true && that.isSetPsgMobile();
    if (this_present_psgMobile || that_present_psgMobile) {
      if (!(this_present_psgMobile && that_present_psgMobile))
        return false;
      if (!this.psgMobile.equals(that.psgMobile))
        return false;
    }

    boolean this_present_isTestOrder = true && this.isSetIsTestOrder();
    boolean that_present_isTestOrder = true && that.isSetIsTestOrder();
    if (this_present_isTestOrder || that_present_isTestOrder) {
      if (!(this_present_isTestOrder && that_present_isTestOrder))
        return false;
      if (!this.isTestOrder.equals(that.isTestOrder))
        return false;
    }

    boolean this_present_ticketGateName = true && this.isSetTicketGateName();
    boolean that_present_ticketGateName = true && that.isSetTicketGateName();
    if (this_present_ticketGateName || that_present_ticketGateName) {
      if (!(this_present_ticketGateName && that_present_ticketGateName))
        return false;
      if (!this.ticketGateName.equals(that.ticketGateName))
        return false;
    }

    boolean this_present_ticketSeatSeq = true && this.isSetTicketSeatSeq();
    boolean that_present_ticketSeatSeq = true && that.isSetTicketSeatSeq();
    if (this_present_ticketSeatSeq || that_present_ticketSeatSeq) {
      if (!(this_present_ticketSeatSeq && that_present_ticketSeatSeq))
        return false;
      if (!this.ticketSeatSeq.equals(that.ticketSeatSeq))
        return false;
    }

    boolean this_present_ticketUserDisplayName = true && this.isSetTicketUserDisplayName();
    boolean that_present_ticketUserDisplayName = true && that.isSetTicketUserDisplayName();
    if (this_present_ticketUserDisplayName || that_present_ticketUserDisplayName) {
      if (!(this_present_ticketUserDisplayName && that_present_ticketUserDisplayName))
        return false;
      if (!this.ticketUserDisplayName.equals(that.ticketUserDisplayName))
        return false;
    }

    boolean this_present_ticketSaleCorp = true && this.isSetTicketSaleCorp();
    boolean that_present_ticketSaleCorp = true && that.isSetTicketSaleCorp();
    if (this_present_ticketSaleCorp || that_present_ticketSaleCorp) {
      if (!(this_present_ticketSaleCorp && that_present_ticketSaleCorp))
        return false;
      if (!this.ticketSaleCorp.equals(that.ticketSaleCorp))
        return false;
    }

    boolean this_present_ticketStationAddr = true && this.isSetTicketStationAddr();
    boolean that_present_ticketStationAddr = true && that.isSetTicketStationAddr();
    if (this_present_ticketStationAddr || that_present_ticketStationAddr) {
      if (!(this_present_ticketStationAddr && that_present_ticketStationAddr))
        return false;
      if (!this.ticketStationAddr.equals(that.ticketStationAddr))
        return false;
    }

    boolean this_present_ticketType = true && this.isSetTicketType();
    boolean that_present_ticketType = true && that.isSetTicketType();
    if (this_present_ticketType || that_present_ticketType) {
      if (!(this_present_ticketType && that_present_ticketType))
        return false;
      if (!this.ticketType.equals(that.ticketType))
        return false;
    }

    boolean this_present_ticketSaleTime = true && this.isSetTicketSaleTime();
    boolean that_present_ticketSaleTime = true && that.isSetTicketSaleTime();
    if (this_present_ticketSaleTime || that_present_ticketSaleTime) {
      if (!(this_present_ticketSaleTime && that_present_ticketSaleTime))
        return false;
      if (!this.ticketSaleTime.equals(that.ticketSaleTime))
        return false;
    }

    boolean this_present_busTicketNo = true && this.isSetBusTicketNo();
    boolean that_present_busTicketNo = true && that.isSetBusTicketNo();
    if (this_present_busTicketNo || that_present_busTicketNo) {
      if (!(this_present_busTicketNo && that_present_busTicketNo))
        return false;
      if (!this.busTicketNo.equals(that.busTicketNo))
        return false;
    }

    boolean this_present_exOrderIdIndex = true;
    boolean that_present_exOrderIdIndex = true;
    if (this_present_exOrderIdIndex || that_present_exOrderIdIndex) {
      if (!(this_present_exOrderIdIndex && that_present_exOrderIdIndex))
        return false;
      if (this.exOrderIdIndex != that.exOrderIdIndex)
        return false;
    }

    boolean this_present_channelSms = true && this.isSetChannelSms();
    boolean that_present_channelSms = true && that.isSetChannelSms();
    if (this_present_channelSms || that_present_channelSms) {
      if (!(this_present_channelSms && that_present_channelSms))
        return false;
      if (!this.channelSms.equals(that.channelSms))
        return false;
    }

    boolean this_present_refundDesc = true && this.isSetRefundDesc();
    boolean that_present_refundDesc = true && that.isSetRefundDesc();
    if (this_present_refundDesc || that_present_refundDesc) {
      if (!(this_present_refundDesc && that_present_refundDesc))
        return false;
      if (!this.refundDesc.equals(that.refundDesc))
        return false;
    }

    boolean this_present_pkgName = true && this.isSetPkgName();
    boolean that_present_pkgName = true && that.isSetPkgName();
    if (this_present_pkgName || that_present_pkgName) {
      if (!(this_present_pkgName && that_present_pkgName))
        return false;
      if (!this.pkgName.equals(that.pkgName))
        return false;
    }

    boolean this_present_pkgDesc = true && this.isSetPkgDesc();
    boolean that_present_pkgDesc = true && that.isSetPkgDesc();
    if (this_present_pkgDesc || that_present_pkgDesc) {
      if (!(this_present_pkgDesc && that_present_pkgDesc))
        return false;
      if (!this.pkgDesc.equals(that.pkgDesc))
        return false;
    }

    boolean this_present_ticketDisplayPrice = true;
    boolean that_present_ticketDisplayPrice = true;
    if (this_present_ticketDisplayPrice || that_present_ticketDisplayPrice) {
      if (!(this_present_ticketDisplayPrice && that_present_ticketDisplayPrice))
        return false;
      if (this.ticketDisplayPrice != that.ticketDisplayPrice)
        return false;
    }

    boolean this_present_orderTotalPrice = true;
    boolean that_present_orderTotalPrice = true;
    if (this_present_orderTotalPrice || that_present_orderTotalPrice) {
      if (!(this_present_orderTotalPrice && that_present_orderTotalPrice))
        return false;
      if (this.orderTotalPrice != that.orderTotalPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_modifyDatetime = true && (isSetModifyDatetime());
    list.add(present_modifyDatetime);
    if (present_modifyDatetime)
      list.add(modifyDatetime);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_exOrderId = true && (isSetExOrderId());
    list.add(present_exOrderId);
    if (present_exOrderId)
      list.add(exOrderId);

    boolean present_rtorderId = true && (isSetRtorderId());
    list.add(present_rtorderId);
    if (present_rtorderId)
      list.add(rtorderId);

    boolean present_rtorderCode = true && (isSetRtorderCode());
    list.add(present_rtorderCode);
    if (present_rtorderCode)
      list.add(rtorderCode);

    boolean present_unitId = true && (isSetUnitId());
    list.add(present_unitId);
    if (present_unitId)
      list.add(unitId);

    boolean present_toStationId = true && (isSetToStationId());
    list.add(present_toStationId);
    if (present_toStationId)
      list.add(toStationId);

    boolean present_pleaveDtyyyyMMddHHmmss = true && (isSetPleaveDtyyyyMMddHHmmss());
    list.add(present_pleaveDtyyyyMMddHHmmss);
    if (present_pleaveDtyyyyMMddHHmmss)
      list.add(pleaveDtyyyyMMddHHmmss);

    boolean present_toStationName = true && (isSetToStationName());
    list.add(present_toStationName);
    if (present_toStationName)
      list.add(toStationName);

    boolean present_toStation6code = true && (isSetToStation6code());
    list.add(present_toStation6code);
    if (present_toStation6code)
      list.add(toStation6code);

    boolean present_fromStationName = true && (isSetFromStationName());
    list.add(present_fromStationName);
    if (present_fromStationName)
      list.add(fromStationName);

    boolean present_fromStation6code = true && (isSetFromStation6code());
    list.add(present_fromStation6code);
    if (present_fromStation6code)
      list.add(fromStation6code);

    boolean present_toProvinceName = true && (isSetToProvinceName());
    list.add(present_toProvinceName);
    if (present_toProvinceName)
      list.add(toProvinceName);

    boolean present_toProvince6code = true && (isSetToProvince6code());
    list.add(present_toProvince6code);
    if (present_toProvince6code)
      list.add(toProvince6code);

    boolean present_fromProvinceName = true && (isSetFromProvinceName());
    list.add(present_fromProvinceName);
    if (present_fromProvinceName)
      list.add(fromProvinceName);

    boolean present_fromProvince6code = true && (isSetFromProvince6code());
    list.add(present_fromProvince6code);
    if (present_fromProvince6code)
      list.add(fromProvince6code);

    boolean present_ticketFailReason = true && (isSetTicketFailReason());
    list.add(present_ticketFailReason);
    if (present_ticketFailReason)
      list.add(ticketFailReason);

    boolean present_ticketStatus = true && (isSetTicketStatus());
    list.add(present_ticketStatus);
    if (present_ticketStatus)
      list.add(ticketStatus);

    boolean present_ticketConfirmDate = true && (isSetTicketConfirmDate());
    list.add(present_ticketConfirmDate);
    if (present_ticketConfirmDate)
      list.add(ticketConfirmDate);

    boolean present_ticketRecStatus = true && (isSetTicketRecStatus());
    list.add(present_ticketRecStatus);
    if (present_ticketRecStatus)
      list.add(ticketRecStatus);

    boolean present_ticketRecDate = true && (isSetTicketRecDate());
    list.add(present_ticketRecDate);
    if (present_ticketRecDate)
      list.add(ticketRecDate);

    boolean present_ticketPrice = true;
    list.add(present_ticketPrice);
    if (present_ticketPrice)
      list.add(ticketPrice);

    boolean present_ticketRecRandomCode = true && (isSetTicketRecRandomCode());
    list.add(present_ticketRecRandomCode);
    if (present_ticketRecRandomCode)
      list.add(ticketRecRandomCode);

    boolean present_psgName = true && (isSetPsgName());
    list.add(present_psgName);
    if (present_psgName)
      list.add(psgName);

    boolean present_psgCertificateType = true && (isSetPsgCertificateType());
    list.add(present_psgCertificateType);
    if (present_psgCertificateType)
      list.add(psgCertificateType.getValue());

    boolean present_psgCertificateNo = true && (isSetPsgCertificateNo());
    list.add(present_psgCertificateNo);
    if (present_psgCertificateNo)
      list.add(psgCertificateNo);

    boolean present_psgMobile = true && (isSetPsgMobile());
    list.add(present_psgMobile);
    if (present_psgMobile)
      list.add(psgMobile);

    boolean present_isTestOrder = true && (isSetIsTestOrder());
    list.add(present_isTestOrder);
    if (present_isTestOrder)
      list.add(isTestOrder);

    boolean present_ticketGateName = true && (isSetTicketGateName());
    list.add(present_ticketGateName);
    if (present_ticketGateName)
      list.add(ticketGateName);

    boolean present_ticketSeatSeq = true && (isSetTicketSeatSeq());
    list.add(present_ticketSeatSeq);
    if (present_ticketSeatSeq)
      list.add(ticketSeatSeq);

    boolean present_ticketUserDisplayName = true && (isSetTicketUserDisplayName());
    list.add(present_ticketUserDisplayName);
    if (present_ticketUserDisplayName)
      list.add(ticketUserDisplayName);

    boolean present_ticketSaleCorp = true && (isSetTicketSaleCorp());
    list.add(present_ticketSaleCorp);
    if (present_ticketSaleCorp)
      list.add(ticketSaleCorp);

    boolean present_ticketStationAddr = true && (isSetTicketStationAddr());
    list.add(present_ticketStationAddr);
    if (present_ticketStationAddr)
      list.add(ticketStationAddr);

    boolean present_ticketType = true && (isSetTicketType());
    list.add(present_ticketType);
    if (present_ticketType)
      list.add(ticketType);

    boolean present_ticketSaleTime = true && (isSetTicketSaleTime());
    list.add(present_ticketSaleTime);
    if (present_ticketSaleTime)
      list.add(ticketSaleTime);

    boolean present_busTicketNo = true && (isSetBusTicketNo());
    list.add(present_busTicketNo);
    if (present_busTicketNo)
      list.add(busTicketNo);

    boolean present_exOrderIdIndex = true;
    list.add(present_exOrderIdIndex);
    if (present_exOrderIdIndex)
      list.add(exOrderIdIndex);

    boolean present_channelSms = true && (isSetChannelSms());
    list.add(present_channelSms);
    if (present_channelSms)
      list.add(channelSms);

    boolean present_refundDesc = true && (isSetRefundDesc());
    list.add(present_refundDesc);
    if (present_refundDesc)
      list.add(refundDesc);

    boolean present_pkgName = true && (isSetPkgName());
    list.add(present_pkgName);
    if (present_pkgName)
      list.add(pkgName);

    boolean present_pkgDesc = true && (isSetPkgDesc());
    list.add(present_pkgDesc);
    if (present_pkgDesc)
      list.add(pkgDesc);

    boolean present_ticketDisplayPrice = true;
    list.add(present_ticketDisplayPrice);
    if (present_ticketDisplayPrice)
      list.add(ticketDisplayPrice);

    boolean present_orderTotalPrice = true;
    list.add(present_orderTotalPrice);
    if (present_orderTotalPrice)
      list.add(orderTotalPrice);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExBusOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyDatetime()).compareTo(other.isSetModifyDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyDatetime, other.modifyDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExOrderId()).compareTo(other.isSetExOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOrderId, other.exOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtorderId()).compareTo(other.isSetRtorderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtorderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtorderId, other.rtorderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtorderCode()).compareTo(other.isSetRtorderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtorderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtorderCode, other.rtorderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitId()).compareTo(other.isSetUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitId, other.unitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStationId()).compareTo(other.isSetToStationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStationId, other.toStationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPleaveDtyyyyMMddHHmmss()).compareTo(other.isSetPleaveDtyyyyMMddHHmmss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPleaveDtyyyyMMddHHmmss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pleaveDtyyyyMMddHHmmss, other.pleaveDtyyyyMMddHHmmss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStationName()).compareTo(other.isSetToStationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStationName, other.toStationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStation6code()).compareTo(other.isSetToStation6code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStation6code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStation6code, other.toStation6code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromStationName()).compareTo(other.isSetFromStationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromStationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromStationName, other.fromStationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromStation6code()).compareTo(other.isSetFromStation6code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromStation6code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromStation6code, other.fromStation6code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToProvinceName()).compareTo(other.isSetToProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toProvinceName, other.toProvinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToProvince6code()).compareTo(other.isSetToProvince6code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToProvince6code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toProvince6code, other.toProvince6code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromProvinceName()).compareTo(other.isSetFromProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromProvinceName, other.fromProvinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromProvince6code()).compareTo(other.isSetFromProvince6code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromProvince6code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromProvince6code, other.fromProvince6code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketFailReason()).compareTo(other.isSetTicketFailReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketFailReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketFailReason, other.ticketFailReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketStatus()).compareTo(other.isSetTicketStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketStatus, other.ticketStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketConfirmDate()).compareTo(other.isSetTicketConfirmDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketConfirmDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketConfirmDate, other.ticketConfirmDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecStatus()).compareTo(other.isSetTicketRecStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecStatus, other.ticketRecStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecDate()).compareTo(other.isSetTicketRecDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecDate, other.ticketRecDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketPrice()).compareTo(other.isSetTicketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketPrice, other.ticketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketRecRandomCode()).compareTo(other.isSetTicketRecRandomCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketRecRandomCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketRecRandomCode, other.ticketRecRandomCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgName()).compareTo(other.isSetPsgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgName, other.psgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgCertificateType()).compareTo(other.isSetPsgCertificateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgCertificateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgCertificateType, other.psgCertificateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgCertificateNo()).compareTo(other.isSetPsgCertificateNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgCertificateNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgCertificateNo, other.psgCertificateNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgMobile()).compareTo(other.isSetPsgMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgMobile, other.psgMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTestOrder()).compareTo(other.isSetIsTestOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTestOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTestOrder, other.isTestOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketGateName()).compareTo(other.isSetTicketGateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketGateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketGateName, other.ticketGateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketSeatSeq()).compareTo(other.isSetTicketSeatSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketSeatSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketSeatSeq, other.ticketSeatSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketUserDisplayName()).compareTo(other.isSetTicketUserDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketUserDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketUserDisplayName, other.ticketUserDisplayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketSaleCorp()).compareTo(other.isSetTicketSaleCorp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketSaleCorp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketSaleCorp, other.ticketSaleCorp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketStationAddr()).compareTo(other.isSetTicketStationAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketStationAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketStationAddr, other.ticketStationAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketType()).compareTo(other.isSetTicketType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketType, other.ticketType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketSaleTime()).compareTo(other.isSetTicketSaleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketSaleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketSaleTime, other.ticketSaleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusTicketNo()).compareTo(other.isSetBusTicketNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusTicketNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busTicketNo, other.busTicketNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExOrderIdIndex()).compareTo(other.isSetExOrderIdIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOrderIdIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOrderIdIndex, other.exOrderIdIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelSms()).compareTo(other.isSetChannelSms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelSms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelSms, other.channelSms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDesc()).compareTo(other.isSetRefundDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDesc, other.refundDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPkgName()).compareTo(other.isSetPkgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkgName, other.pkgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPkgDesc()).compareTo(other.isSetPkgDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkgDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkgDesc, other.pkgDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketDisplayPrice()).compareTo(other.isSetTicketDisplayPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketDisplayPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketDisplayPrice, other.ticketDisplayPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTotalPrice()).compareTo(other.isSetOrderTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTotalPrice, other.orderTotalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExBusOrder(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyDatetime:");
    if (this.modifyDatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.modifyDatetime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exOrderId:");
    if (this.exOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.exOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rtorderId:");
    if (this.rtorderId == null) {
      sb.append("null");
    } else {
      sb.append(this.rtorderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rtorderCode:");
    if (this.rtorderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.rtorderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitId:");
    if (this.unitId == null) {
      sb.append("null");
    } else {
      sb.append(this.unitId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStationId:");
    if (this.toStationId == null) {
      sb.append("null");
    } else {
      sb.append(this.toStationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pleaveDtyyyyMMddHHmmss:");
    if (this.pleaveDtyyyyMMddHHmmss == null) {
      sb.append("null");
    } else {
      sb.append(this.pleaveDtyyyyMMddHHmmss);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStationName:");
    if (this.toStationName == null) {
      sb.append("null");
    } else {
      sb.append(this.toStationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStation6code:");
    if (this.toStation6code == null) {
      sb.append("null");
    } else {
      sb.append(this.toStation6code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromStationName:");
    if (this.fromStationName == null) {
      sb.append("null");
    } else {
      sb.append(this.fromStationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromStation6code:");
    if (this.fromStation6code == null) {
      sb.append("null");
    } else {
      sb.append(this.fromStation6code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toProvinceName:");
    if (this.toProvinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.toProvinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toProvince6code:");
    if (this.toProvince6code == null) {
      sb.append("null");
    } else {
      sb.append(this.toProvince6code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromProvinceName:");
    if (this.fromProvinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.fromProvinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromProvince6code:");
    if (this.fromProvince6code == null) {
      sb.append("null");
    } else {
      sb.append(this.fromProvince6code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketFailReason:");
    if (this.ticketFailReason == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketFailReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketStatus:");
    if (this.ticketStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketConfirmDate:");
    if (this.ticketConfirmDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketConfirmDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketRecStatus:");
    if (this.ticketRecStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketRecStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketRecDate:");
    if (this.ticketRecDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketRecDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketPrice:");
    sb.append(this.ticketPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketRecRandomCode:");
    if (this.ticketRecRandomCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketRecRandomCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgName:");
    if (this.psgName == null) {
      sb.append("null");
    } else {
      sb.append(this.psgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgCertificateType:");
    if (this.psgCertificateType == null) {
      sb.append("null");
    } else {
      sb.append(this.psgCertificateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgCertificateNo:");
    if (this.psgCertificateNo == null) {
      sb.append("null");
    } else {
      sb.append(this.psgCertificateNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgMobile:");
    if (this.psgMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.psgMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTestOrder:");
    if (this.isTestOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.isTestOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketGateName:");
    if (this.ticketGateName == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketGateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketSeatSeq:");
    if (this.ticketSeatSeq == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketSeatSeq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketUserDisplayName:");
    if (this.ticketUserDisplayName == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketUserDisplayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketSaleCorp:");
    if (this.ticketSaleCorp == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketSaleCorp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketStationAddr:");
    if (this.ticketStationAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketStationAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketType:");
    if (this.ticketType == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketSaleTime:");
    if (this.ticketSaleTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketSaleTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busTicketNo:");
    if (this.busTicketNo == null) {
      sb.append("null");
    } else {
      sb.append(this.busTicketNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exOrderIdIndex:");
    sb.append(this.exOrderIdIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelSms:");
    if (this.channelSms == null) {
      sb.append("null");
    } else {
      sb.append(this.channelSms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDesc:");
    if (this.refundDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.refundDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pkgName:");
    if (this.pkgName == null) {
      sb.append("null");
    } else {
      sb.append(this.pkgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pkgDesc:");
    if (this.pkgDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.pkgDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketDisplayPrice:");
    sb.append(this.ticketDisplayPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderTotalPrice:");
    sb.append(this.orderTotalPrice);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExBusOrderStandardSchemeFactory implements SchemeFactory {
    public ExBusOrderStandardScheme getScheme() {
      return new ExBusOrderStandardScheme();
    }
  }

  private static class ExBusOrderStandardScheme extends StandardScheme<ExBusOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExBusOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODIFY_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifyDatetime = iprot.readString();
              struct.setModifyDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EX_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exOrderId = iprot.readString();
              struct.setExOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RTORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtorderId = iprot.readString();
              struct.setRtorderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RTORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtorderCode = iprot.readString();
              struct.setRtorderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitId = iprot.readString();
              struct.setUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TO_STATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toStationId = iprot.readString();
              struct.setToStationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLEAVE_DTYYYY_MMDD_HHMMSS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pleaveDtyyyyMMddHHmmss = iprot.readString();
              struct.setPleaveDtyyyyMMddHHmmssIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TO_STATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toStationName = iprot.readString();
              struct.setToStationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TO_STATION6CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toStation6code = iprot.readString();
              struct.setToStation6codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FROM_STATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromStationName = iprot.readString();
              struct.setFromStationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FROM_STATION6CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromStation6code = iprot.readString();
              struct.setFromStation6codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TO_PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toProvinceName = iprot.readString();
              struct.setToProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TO_PROVINCE6CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toProvince6code = iprot.readString();
              struct.setToProvince6codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FROM_PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromProvinceName = iprot.readString();
              struct.setFromProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FROM_PROVINCE6CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromProvince6code = iprot.readString();
              struct.setFromProvince6codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TICKET_FAIL_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketFailReason = iprot.readString();
              struct.setTicketFailReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TICKET_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketStatus = iprot.readString();
              struct.setTicketStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TICKET_CONFIRM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketConfirmDate = iprot.readString();
              struct.setTicketConfirmDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TICKET_REC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecStatus = iprot.readString();
              struct.setTicketRecStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TICKET_REC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecDate = iprot.readString();
              struct.setTicketRecDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TICKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticketPrice = iprot.readI32();
              struct.setTicketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TICKET_REC_RANDOM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketRecRandomCode = iprot.readString();
              struct.setTicketRecRandomCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PSG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgName = iprot.readString();
              struct.setPsgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PSG_CERTIFICATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.psgCertificateType = com.shbus.easybus.front.CertificateType.findByValue(iprot.readI32());
              struct.setPsgCertificateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PSG_CERTIFICATE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgCertificateNo = iprot.readString();
              struct.setPsgCertificateNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PSG_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.psgMobile = iprot.readString();
              struct.setPsgMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // IS_TEST_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isTestOrder = iprot.readString();
              struct.setIsTestOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TICKET_GATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketGateName = iprot.readString();
              struct.setTicketGateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // TICKET_SEAT_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketSeatSeq = iprot.readString();
              struct.setTicketSeatSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // TICKET_USER_DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketUserDisplayName = iprot.readString();
              struct.setTicketUserDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // TICKET_SALE_CORP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketSaleCorp = iprot.readString();
              struct.setTicketSaleCorpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // TICKET_STATION_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketStationAddr = iprot.readString();
              struct.setTicketStationAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // TICKET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketType = iprot.readString();
              struct.setTicketTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // TICKET_SALE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketSaleTime = iprot.readString();
              struct.setTicketSaleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // BUS_TICKET_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busTicketNo = iprot.readString();
              struct.setBusTicketNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // EX_ORDER_ID_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exOrderIdIndex = iprot.readI32();
              struct.setExOrderIdIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CHANNEL_SMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelSms = iprot.readString();
              struct.setChannelSmsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // REFUND_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundDesc = iprot.readString();
              struct.setRefundDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // PKG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pkgName = iprot.readString();
              struct.setPkgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PKG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pkgDesc = iprot.readString();
              struct.setPkgDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // TICKET_DISPLAY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticketDisplayPrice = iprot.readI32();
              struct.setTicketDisplayPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // ORDER_TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderTotalPrice = iprot.readI32();
              struct.setOrderTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExBusOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.modifyDatetime != null) {
        oprot.writeFieldBegin(MODIFY_DATETIME_FIELD_DESC);
        oprot.writeString(struct.modifyDatetime);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.exOrderId != null) {
        oprot.writeFieldBegin(EX_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.exOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.rtorderId != null) {
        oprot.writeFieldBegin(RTORDER_ID_FIELD_DESC);
        oprot.writeString(struct.rtorderId);
        oprot.writeFieldEnd();
      }
      if (struct.rtorderCode != null) {
        oprot.writeFieldBegin(RTORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.rtorderCode);
        oprot.writeFieldEnd();
      }
      if (struct.unitId != null) {
        oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
        oprot.writeString(struct.unitId);
        oprot.writeFieldEnd();
      }
      if (struct.toStationId != null) {
        oprot.writeFieldBegin(TO_STATION_ID_FIELD_DESC);
        oprot.writeString(struct.toStationId);
        oprot.writeFieldEnd();
      }
      if (struct.pleaveDtyyyyMMddHHmmss != null) {
        oprot.writeFieldBegin(PLEAVE_DTYYYY_MMDD_HHMMSS_FIELD_DESC);
        oprot.writeString(struct.pleaveDtyyyyMMddHHmmss);
        oprot.writeFieldEnd();
      }
      if (struct.toStationName != null) {
        oprot.writeFieldBegin(TO_STATION_NAME_FIELD_DESC);
        oprot.writeString(struct.toStationName);
        oprot.writeFieldEnd();
      }
      if (struct.toStation6code != null) {
        oprot.writeFieldBegin(TO_STATION6CODE_FIELD_DESC);
        oprot.writeString(struct.toStation6code);
        oprot.writeFieldEnd();
      }
      if (struct.fromStationName != null) {
        oprot.writeFieldBegin(FROM_STATION_NAME_FIELD_DESC);
        oprot.writeString(struct.fromStationName);
        oprot.writeFieldEnd();
      }
      if (struct.fromStation6code != null) {
        oprot.writeFieldBegin(FROM_STATION6CODE_FIELD_DESC);
        oprot.writeString(struct.fromStation6code);
        oprot.writeFieldEnd();
      }
      if (struct.toProvinceName != null) {
        oprot.writeFieldBegin(TO_PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.toProvinceName);
        oprot.writeFieldEnd();
      }
      if (struct.toProvince6code != null) {
        oprot.writeFieldBegin(TO_PROVINCE6CODE_FIELD_DESC);
        oprot.writeString(struct.toProvince6code);
        oprot.writeFieldEnd();
      }
      if (struct.fromProvinceName != null) {
        oprot.writeFieldBegin(FROM_PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.fromProvinceName);
        oprot.writeFieldEnd();
      }
      if (struct.fromProvince6code != null) {
        oprot.writeFieldBegin(FROM_PROVINCE6CODE_FIELD_DESC);
        oprot.writeString(struct.fromProvince6code);
        oprot.writeFieldEnd();
      }
      if (struct.ticketFailReason != null) {
        oprot.writeFieldBegin(TICKET_FAIL_REASON_FIELD_DESC);
        oprot.writeString(struct.ticketFailReason);
        oprot.writeFieldEnd();
      }
      if (struct.ticketStatus != null) {
        oprot.writeFieldBegin(TICKET_STATUS_FIELD_DESC);
        oprot.writeString(struct.ticketStatus);
        oprot.writeFieldEnd();
      }
      if (struct.ticketConfirmDate != null) {
        oprot.writeFieldBegin(TICKET_CONFIRM_DATE_FIELD_DESC);
        oprot.writeString(struct.ticketConfirmDate);
        oprot.writeFieldEnd();
      }
      if (struct.ticketRecStatus != null) {
        oprot.writeFieldBegin(TICKET_REC_STATUS_FIELD_DESC);
        oprot.writeString(struct.ticketRecStatus);
        oprot.writeFieldEnd();
      }
      if (struct.ticketRecDate != null) {
        oprot.writeFieldBegin(TICKET_REC_DATE_FIELD_DESC);
        oprot.writeString(struct.ticketRecDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKET_PRICE_FIELD_DESC);
      oprot.writeI32(struct.ticketPrice);
      oprot.writeFieldEnd();
      if (struct.ticketRecRandomCode != null) {
        oprot.writeFieldBegin(TICKET_REC_RANDOM_CODE_FIELD_DESC);
        oprot.writeString(struct.ticketRecRandomCode);
        oprot.writeFieldEnd();
      }
      if (struct.psgName != null) {
        oprot.writeFieldBegin(PSG_NAME_FIELD_DESC);
        oprot.writeString(struct.psgName);
        oprot.writeFieldEnd();
      }
      if (struct.psgCertificateType != null) {
        oprot.writeFieldBegin(PSG_CERTIFICATE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.psgCertificateType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.psgCertificateNo != null) {
        oprot.writeFieldBegin(PSG_CERTIFICATE_NO_FIELD_DESC);
        oprot.writeString(struct.psgCertificateNo);
        oprot.writeFieldEnd();
      }
      if (struct.psgMobile != null) {
        oprot.writeFieldBegin(PSG_MOBILE_FIELD_DESC);
        oprot.writeString(struct.psgMobile);
        oprot.writeFieldEnd();
      }
      if (struct.isTestOrder != null) {
        oprot.writeFieldBegin(IS_TEST_ORDER_FIELD_DESC);
        oprot.writeString(struct.isTestOrder);
        oprot.writeFieldEnd();
      }
      if (struct.ticketGateName != null) {
        oprot.writeFieldBegin(TICKET_GATE_NAME_FIELD_DESC);
        oprot.writeString(struct.ticketGateName);
        oprot.writeFieldEnd();
      }
      if (struct.ticketSeatSeq != null) {
        oprot.writeFieldBegin(TICKET_SEAT_SEQ_FIELD_DESC);
        oprot.writeString(struct.ticketSeatSeq);
        oprot.writeFieldEnd();
      }
      if (struct.ticketUserDisplayName != null) {
        oprot.writeFieldBegin(TICKET_USER_DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.ticketUserDisplayName);
        oprot.writeFieldEnd();
      }
      if (struct.ticketSaleCorp != null) {
        oprot.writeFieldBegin(TICKET_SALE_CORP_FIELD_DESC);
        oprot.writeString(struct.ticketSaleCorp);
        oprot.writeFieldEnd();
      }
      if (struct.ticketStationAddr != null) {
        oprot.writeFieldBegin(TICKET_STATION_ADDR_FIELD_DESC);
        oprot.writeString(struct.ticketStationAddr);
        oprot.writeFieldEnd();
      }
      if (struct.ticketType != null) {
        oprot.writeFieldBegin(TICKET_TYPE_FIELD_DESC);
        oprot.writeString(struct.ticketType);
        oprot.writeFieldEnd();
      }
      if (struct.ticketSaleTime != null) {
        oprot.writeFieldBegin(TICKET_SALE_TIME_FIELD_DESC);
        oprot.writeString(struct.ticketSaleTime);
        oprot.writeFieldEnd();
      }
      if (struct.busTicketNo != null) {
        oprot.writeFieldBegin(BUS_TICKET_NO_FIELD_DESC);
        oprot.writeString(struct.busTicketNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EX_ORDER_ID_INDEX_FIELD_DESC);
      oprot.writeI32(struct.exOrderIdIndex);
      oprot.writeFieldEnd();
      if (struct.channelSms != null) {
        oprot.writeFieldBegin(CHANNEL_SMS_FIELD_DESC);
        oprot.writeString(struct.channelSms);
        oprot.writeFieldEnd();
      }
      if (struct.refundDesc != null) {
        oprot.writeFieldBegin(REFUND_DESC_FIELD_DESC);
        oprot.writeString(struct.refundDesc);
        oprot.writeFieldEnd();
      }
      if (struct.pkgName != null) {
        oprot.writeFieldBegin(PKG_NAME_FIELD_DESC);
        oprot.writeString(struct.pkgName);
        oprot.writeFieldEnd();
      }
      if (struct.pkgDesc != null) {
        oprot.writeFieldBegin(PKG_DESC_FIELD_DESC);
        oprot.writeString(struct.pkgDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKET_DISPLAY_PRICE_FIELD_DESC);
      oprot.writeI32(struct.ticketDisplayPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_TOTAL_PRICE_FIELD_DESC);
      oprot.writeI32(struct.orderTotalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExBusOrderTupleSchemeFactory implements SchemeFactory {
    public ExBusOrderTupleScheme getScheme() {
      return new ExBusOrderTupleScheme();
    }
  }

  private static class ExBusOrderTupleScheme extends TupleScheme<ExBusOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExBusOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetModifyDatetime()) {
        optionals.set(1);
      }
      if (struct.isSetRemark()) {
        optionals.set(2);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(3);
      }
      if (struct.isSetExOrderId()) {
        optionals.set(4);
      }
      if (struct.isSetRtorderId()) {
        optionals.set(5);
      }
      if (struct.isSetRtorderCode()) {
        optionals.set(6);
      }
      if (struct.isSetUnitId()) {
        optionals.set(7);
      }
      if (struct.isSetToStationId()) {
        optionals.set(8);
      }
      if (struct.isSetPleaveDtyyyyMMddHHmmss()) {
        optionals.set(9);
      }
      if (struct.isSetToStationName()) {
        optionals.set(10);
      }
      if (struct.isSetToStation6code()) {
        optionals.set(11);
      }
      if (struct.isSetFromStationName()) {
        optionals.set(12);
      }
      if (struct.isSetFromStation6code()) {
        optionals.set(13);
      }
      if (struct.isSetToProvinceName()) {
        optionals.set(14);
      }
      if (struct.isSetToProvince6code()) {
        optionals.set(15);
      }
      if (struct.isSetFromProvinceName()) {
        optionals.set(16);
      }
      if (struct.isSetFromProvince6code()) {
        optionals.set(17);
      }
      if (struct.isSetTicketFailReason()) {
        optionals.set(18);
      }
      if (struct.isSetTicketStatus()) {
        optionals.set(19);
      }
      if (struct.isSetTicketConfirmDate()) {
        optionals.set(20);
      }
      if (struct.isSetTicketRecStatus()) {
        optionals.set(21);
      }
      if (struct.isSetTicketRecDate()) {
        optionals.set(22);
      }
      if (struct.isSetTicketPrice()) {
        optionals.set(23);
      }
      if (struct.isSetTicketRecRandomCode()) {
        optionals.set(24);
      }
      if (struct.isSetPsgName()) {
        optionals.set(25);
      }
      if (struct.isSetPsgCertificateType()) {
        optionals.set(26);
      }
      if (struct.isSetPsgCertificateNo()) {
        optionals.set(27);
      }
      if (struct.isSetPsgMobile()) {
        optionals.set(28);
      }
      if (struct.isSetIsTestOrder()) {
        optionals.set(29);
      }
      if (struct.isSetTicketGateName()) {
        optionals.set(30);
      }
      if (struct.isSetTicketSeatSeq()) {
        optionals.set(31);
      }
      if (struct.isSetTicketUserDisplayName()) {
        optionals.set(32);
      }
      if (struct.isSetTicketSaleCorp()) {
        optionals.set(33);
      }
      if (struct.isSetTicketStationAddr()) {
        optionals.set(34);
      }
      if (struct.isSetTicketType()) {
        optionals.set(35);
      }
      if (struct.isSetTicketSaleTime()) {
        optionals.set(36);
      }
      if (struct.isSetBusTicketNo()) {
        optionals.set(37);
      }
      if (struct.isSetExOrderIdIndex()) {
        optionals.set(38);
      }
      if (struct.isSetChannelSms()) {
        optionals.set(39);
      }
      if (struct.isSetRefundDesc()) {
        optionals.set(40);
      }
      if (struct.isSetPkgName()) {
        optionals.set(41);
      }
      if (struct.isSetPkgDesc()) {
        optionals.set(42);
      }
      if (struct.isSetTicketDisplayPrice()) {
        optionals.set(43);
      }
      if (struct.isSetOrderTotalPrice()) {
        optionals.set(44);
      }
      oprot.writeBitSet(optionals, 45);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetModifyDatetime()) {
        oprot.writeString(struct.modifyDatetime);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetExOrderId()) {
        oprot.writeString(struct.exOrderId);
      }
      if (struct.isSetRtorderId()) {
        oprot.writeString(struct.rtorderId);
      }
      if (struct.isSetRtorderCode()) {
        oprot.writeString(struct.rtorderCode);
      }
      if (struct.isSetUnitId()) {
        oprot.writeString(struct.unitId);
      }
      if (struct.isSetToStationId()) {
        oprot.writeString(struct.toStationId);
      }
      if (struct.isSetPleaveDtyyyyMMddHHmmss()) {
        oprot.writeString(struct.pleaveDtyyyyMMddHHmmss);
      }
      if (struct.isSetToStationName()) {
        oprot.writeString(struct.toStationName);
      }
      if (struct.isSetToStation6code()) {
        oprot.writeString(struct.toStation6code);
      }
      if (struct.isSetFromStationName()) {
        oprot.writeString(struct.fromStationName);
      }
      if (struct.isSetFromStation6code()) {
        oprot.writeString(struct.fromStation6code);
      }
      if (struct.isSetToProvinceName()) {
        oprot.writeString(struct.toProvinceName);
      }
      if (struct.isSetToProvince6code()) {
        oprot.writeString(struct.toProvince6code);
      }
      if (struct.isSetFromProvinceName()) {
        oprot.writeString(struct.fromProvinceName);
      }
      if (struct.isSetFromProvince6code()) {
        oprot.writeString(struct.fromProvince6code);
      }
      if (struct.isSetTicketFailReason()) {
        oprot.writeString(struct.ticketFailReason);
      }
      if (struct.isSetTicketStatus()) {
        oprot.writeString(struct.ticketStatus);
      }
      if (struct.isSetTicketConfirmDate()) {
        oprot.writeString(struct.ticketConfirmDate);
      }
      if (struct.isSetTicketRecStatus()) {
        oprot.writeString(struct.ticketRecStatus);
      }
      if (struct.isSetTicketRecDate()) {
        oprot.writeString(struct.ticketRecDate);
      }
      if (struct.isSetTicketPrice()) {
        oprot.writeI32(struct.ticketPrice);
      }
      if (struct.isSetTicketRecRandomCode()) {
        oprot.writeString(struct.ticketRecRandomCode);
      }
      if (struct.isSetPsgName()) {
        oprot.writeString(struct.psgName);
      }
      if (struct.isSetPsgCertificateType()) {
        oprot.writeI32(struct.psgCertificateType.getValue());
      }
      if (struct.isSetPsgCertificateNo()) {
        oprot.writeString(struct.psgCertificateNo);
      }
      if (struct.isSetPsgMobile()) {
        oprot.writeString(struct.psgMobile);
      }
      if (struct.isSetIsTestOrder()) {
        oprot.writeString(struct.isTestOrder);
      }
      if (struct.isSetTicketGateName()) {
        oprot.writeString(struct.ticketGateName);
      }
      if (struct.isSetTicketSeatSeq()) {
        oprot.writeString(struct.ticketSeatSeq);
      }
      if (struct.isSetTicketUserDisplayName()) {
        oprot.writeString(struct.ticketUserDisplayName);
      }
      if (struct.isSetTicketSaleCorp()) {
        oprot.writeString(struct.ticketSaleCorp);
      }
      if (struct.isSetTicketStationAddr()) {
        oprot.writeString(struct.ticketStationAddr);
      }
      if (struct.isSetTicketType()) {
        oprot.writeString(struct.ticketType);
      }
      if (struct.isSetTicketSaleTime()) {
        oprot.writeString(struct.ticketSaleTime);
      }
      if (struct.isSetBusTicketNo()) {
        oprot.writeString(struct.busTicketNo);
      }
      if (struct.isSetExOrderIdIndex()) {
        oprot.writeI32(struct.exOrderIdIndex);
      }
      if (struct.isSetChannelSms()) {
        oprot.writeString(struct.channelSms);
      }
      if (struct.isSetRefundDesc()) {
        oprot.writeString(struct.refundDesc);
      }
      if (struct.isSetPkgName()) {
        oprot.writeString(struct.pkgName);
      }
      if (struct.isSetPkgDesc()) {
        oprot.writeString(struct.pkgDesc);
      }
      if (struct.isSetTicketDisplayPrice()) {
        oprot.writeI32(struct.ticketDisplayPrice);
      }
      if (struct.isSetOrderTotalPrice()) {
        oprot.writeI32(struct.orderTotalPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExBusOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(45);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.modifyDatetime = iprot.readString();
        struct.setModifyDatetimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exOrderId = iprot.readString();
        struct.setExOrderIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rtorderId = iprot.readString();
        struct.setRtorderIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rtorderCode = iprot.readString();
        struct.setRtorderCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.unitId = iprot.readString();
        struct.setUnitIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.toStationId = iprot.readString();
        struct.setToStationIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pleaveDtyyyyMMddHHmmss = iprot.readString();
        struct.setPleaveDtyyyyMMddHHmmssIsSet(true);
      }
      if (incoming.get(10)) {
        struct.toStationName = iprot.readString();
        struct.setToStationNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.toStation6code = iprot.readString();
        struct.setToStation6codeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.fromStationName = iprot.readString();
        struct.setFromStationNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fromStation6code = iprot.readString();
        struct.setFromStation6codeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.toProvinceName = iprot.readString();
        struct.setToProvinceNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.toProvince6code = iprot.readString();
        struct.setToProvince6codeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.fromProvinceName = iprot.readString();
        struct.setFromProvinceNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.fromProvince6code = iprot.readString();
        struct.setFromProvince6codeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.ticketFailReason = iprot.readString();
        struct.setTicketFailReasonIsSet(true);
      }
      if (incoming.get(19)) {
        struct.ticketStatus = iprot.readString();
        struct.setTicketStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.ticketConfirmDate = iprot.readString();
        struct.setTicketConfirmDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.ticketRecStatus = iprot.readString();
        struct.setTicketRecStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.ticketRecDate = iprot.readString();
        struct.setTicketRecDateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.ticketPrice = iprot.readI32();
        struct.setTicketPriceIsSet(true);
      }
      if (incoming.get(24)) {
        struct.ticketRecRandomCode = iprot.readString();
        struct.setTicketRecRandomCodeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.psgName = iprot.readString();
        struct.setPsgNameIsSet(true);
      }
      if (incoming.get(26)) {
        struct.psgCertificateType = com.shbus.easybus.front.CertificateType.findByValue(iprot.readI32());
        struct.setPsgCertificateTypeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.psgCertificateNo = iprot.readString();
        struct.setPsgCertificateNoIsSet(true);
      }
      if (incoming.get(28)) {
        struct.psgMobile = iprot.readString();
        struct.setPsgMobileIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isTestOrder = iprot.readString();
        struct.setIsTestOrderIsSet(true);
      }
      if (incoming.get(30)) {
        struct.ticketGateName = iprot.readString();
        struct.setTicketGateNameIsSet(true);
      }
      if (incoming.get(31)) {
        struct.ticketSeatSeq = iprot.readString();
        struct.setTicketSeatSeqIsSet(true);
      }
      if (incoming.get(32)) {
        struct.ticketUserDisplayName = iprot.readString();
        struct.setTicketUserDisplayNameIsSet(true);
      }
      if (incoming.get(33)) {
        struct.ticketSaleCorp = iprot.readString();
        struct.setTicketSaleCorpIsSet(true);
      }
      if (incoming.get(34)) {
        struct.ticketStationAddr = iprot.readString();
        struct.setTicketStationAddrIsSet(true);
      }
      if (incoming.get(35)) {
        struct.ticketType = iprot.readString();
        struct.setTicketTypeIsSet(true);
      }
      if (incoming.get(36)) {
        struct.ticketSaleTime = iprot.readString();
        struct.setTicketSaleTimeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.busTicketNo = iprot.readString();
        struct.setBusTicketNoIsSet(true);
      }
      if (incoming.get(38)) {
        struct.exOrderIdIndex = iprot.readI32();
        struct.setExOrderIdIndexIsSet(true);
      }
      if (incoming.get(39)) {
        struct.channelSms = iprot.readString();
        struct.setChannelSmsIsSet(true);
      }
      if (incoming.get(40)) {
        struct.refundDesc = iprot.readString();
        struct.setRefundDescIsSet(true);
      }
      if (incoming.get(41)) {
        struct.pkgName = iprot.readString();
        struct.setPkgNameIsSet(true);
      }
      if (incoming.get(42)) {
        struct.pkgDesc = iprot.readString();
        struct.setPkgDescIsSet(true);
      }
      if (incoming.get(43)) {
        struct.ticketDisplayPrice = iprot.readI32();
        struct.setTicketDisplayPriceIsSet(true);
      }
      if (incoming.get(44)) {
        struct.orderTotalPrice = iprot.readI32();
        struct.setOrderTotalPriceIsSet(true);
      }
    }
  }

}

