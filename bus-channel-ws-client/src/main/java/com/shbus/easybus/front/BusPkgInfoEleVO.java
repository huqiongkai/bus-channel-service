/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shbus.easybus.front;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 非车票元素规则VO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-26")
public class BusPkgInfoEleVO implements org.apache.thrift.TBase<BusPkgInfoEleVO, BusPkgInfoEleVO._Fields>, java.io.Serializable, Cloneable, Comparable<BusPkgInfoEleVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusPkgInfoEleVO");

  private static final org.apache.thrift.protocol.TField EX_ELE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exEleId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ELE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("eleCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ELE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("eleName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ELE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("eleDesc", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusPkgInfoEleVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusPkgInfoEleVOTupleSchemeFactory());
  }

  /**
   * 元素id
   */
  public long exEleId; // required
  /**
   * 元素使用日期
   */
  public long date; // required
  /**
   * 元素数量
   */
  public long eleCount; // required
  /**
   * 元素名称
   */
  public String eleName; // required
  /**
   * 元素描述
   */
  public String eleDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 元素id
     */
    EX_ELE_ID((short)1, "exEleId"),
    /**
     * 元素使用日期
     */
    DATE((short)2, "date"),
    /**
     * 元素数量
     */
    ELE_COUNT((short)3, "eleCount"),
    /**
     * 元素名称
     */
    ELE_NAME((short)4, "eleName"),
    /**
     * 元素描述
     */
    ELE_DESC((short)5, "eleDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EX_ELE_ID
          return EX_ELE_ID;
        case 2: // DATE
          return DATE;
        case 3: // ELE_COUNT
          return ELE_COUNT;
        case 4: // ELE_NAME
          return ELE_NAME;
        case 5: // ELE_DESC
          return ELE_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXELEID_ISSET_ID = 0;
  private static final int __DATE_ISSET_ID = 1;
  private static final int __ELECOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EX_ELE_ID, new org.apache.thrift.meta_data.FieldMetaData("exEleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ELE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("eleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ELE_NAME, new org.apache.thrift.meta_data.FieldMetaData("eleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ELE_DESC, new org.apache.thrift.meta_data.FieldMetaData("eleDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusPkgInfoEleVO.class, metaDataMap);
  }

  public BusPkgInfoEleVO() {
  }

  public BusPkgInfoEleVO(
    long exEleId,
    long date,
    long eleCount,
    String eleName,
    String eleDesc)
  {
    this();
    this.exEleId = exEleId;
    setExEleIdIsSet(true);
    this.date = date;
    setDateIsSet(true);
    this.eleCount = eleCount;
    setEleCountIsSet(true);
    this.eleName = eleName;
    this.eleDesc = eleDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusPkgInfoEleVO(BusPkgInfoEleVO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.exEleId = other.exEleId;
    this.date = other.date;
    this.eleCount = other.eleCount;
    if (other.isSetEleName()) {
      this.eleName = other.eleName;
    }
    if (other.isSetEleDesc()) {
      this.eleDesc = other.eleDesc;
    }
  }

  public BusPkgInfoEleVO deepCopy() {
    return new BusPkgInfoEleVO(this);
  }

  @Override
  public void clear() {
    setExEleIdIsSet(false);
    this.exEleId = 0;
    setDateIsSet(false);
    this.date = 0;
    setEleCountIsSet(false);
    this.eleCount = 0;
    this.eleName = null;
    this.eleDesc = null;
  }

  /**
   * 元素id
   */
  public long getExEleId() {
    return this.exEleId;
  }

  /**
   * 元素id
   */
  public BusPkgInfoEleVO setExEleId(long exEleId) {
    this.exEleId = exEleId;
    setExEleIdIsSet(true);
    return this;
  }

  public void unsetExEleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXELEID_ISSET_ID);
  }

  /** Returns true if field exEleId is set (has been assigned a value) and false otherwise */
  public boolean isSetExEleId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXELEID_ISSET_ID);
  }

  public void setExEleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXELEID_ISSET_ID, value);
  }

  /**
   * 元素使用日期
   */
  public long getDate() {
    return this.date;
  }

  /**
   * 元素使用日期
   */
  public BusPkgInfoEleVO setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  /**
   * 元素数量
   */
  public long getEleCount() {
    return this.eleCount;
  }

  /**
   * 元素数量
   */
  public BusPkgInfoEleVO setEleCount(long eleCount) {
    this.eleCount = eleCount;
    setEleCountIsSet(true);
    return this;
  }

  public void unsetEleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ELECOUNT_ISSET_ID);
  }

  /** Returns true if field eleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ELECOUNT_ISSET_ID);
  }

  public void setEleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ELECOUNT_ISSET_ID, value);
  }

  /**
   * 元素名称
   */
  public String getEleName() {
    return this.eleName;
  }

  /**
   * 元素名称
   */
  public BusPkgInfoEleVO setEleName(String eleName) {
    this.eleName = eleName;
    return this;
  }

  public void unsetEleName() {
    this.eleName = null;
  }

  /** Returns true if field eleName is set (has been assigned a value) and false otherwise */
  public boolean isSetEleName() {
    return this.eleName != null;
  }

  public void setEleNameIsSet(boolean value) {
    if (!value) {
      this.eleName = null;
    }
  }

  /**
   * 元素描述
   */
  public String getEleDesc() {
    return this.eleDesc;
  }

  /**
   * 元素描述
   */
  public BusPkgInfoEleVO setEleDesc(String eleDesc) {
    this.eleDesc = eleDesc;
    return this;
  }

  public void unsetEleDesc() {
    this.eleDesc = null;
  }

  /** Returns true if field eleDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetEleDesc() {
    return this.eleDesc != null;
  }

  public void setEleDescIsSet(boolean value) {
    if (!value) {
      this.eleDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EX_ELE_ID:
      if (value == null) {
        unsetExEleId();
      } else {
        setExEleId((Long)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case ELE_COUNT:
      if (value == null) {
        unsetEleCount();
      } else {
        setEleCount((Long)value);
      }
      break;

    case ELE_NAME:
      if (value == null) {
        unsetEleName();
      } else {
        setEleName((String)value);
      }
      break;

    case ELE_DESC:
      if (value == null) {
        unsetEleDesc();
      } else {
        setEleDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EX_ELE_ID:
      return getExEleId();

    case DATE:
      return getDate();

    case ELE_COUNT:
      return getEleCount();

    case ELE_NAME:
      return getEleName();

    case ELE_DESC:
      return getEleDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EX_ELE_ID:
      return isSetExEleId();
    case DATE:
      return isSetDate();
    case ELE_COUNT:
      return isSetEleCount();
    case ELE_NAME:
      return isSetEleName();
    case ELE_DESC:
      return isSetEleDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusPkgInfoEleVO)
      return this.equals((BusPkgInfoEleVO)that);
    return false;
  }

  public boolean equals(BusPkgInfoEleVO that) {
    if (that == null)
      return false;

    boolean this_present_exEleId = true;
    boolean that_present_exEleId = true;
    if (this_present_exEleId || that_present_exEleId) {
      if (!(this_present_exEleId && that_present_exEleId))
        return false;
      if (this.exEleId != that.exEleId)
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_eleCount = true;
    boolean that_present_eleCount = true;
    if (this_present_eleCount || that_present_eleCount) {
      if (!(this_present_eleCount && that_present_eleCount))
        return false;
      if (this.eleCount != that.eleCount)
        return false;
    }

    boolean this_present_eleName = true && this.isSetEleName();
    boolean that_present_eleName = true && that.isSetEleName();
    if (this_present_eleName || that_present_eleName) {
      if (!(this_present_eleName && that_present_eleName))
        return false;
      if (!this.eleName.equals(that.eleName))
        return false;
    }

    boolean this_present_eleDesc = true && this.isSetEleDesc();
    boolean that_present_eleDesc = true && that.isSetEleDesc();
    if (this_present_eleDesc || that_present_eleDesc) {
      if (!(this_present_eleDesc && that_present_eleDesc))
        return false;
      if (!this.eleDesc.equals(that.eleDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_exEleId = true;
    list.add(present_exEleId);
    if (present_exEleId)
      list.add(exEleId);

    boolean present_date = true;
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_eleCount = true;
    list.add(present_eleCount);
    if (present_eleCount)
      list.add(eleCount);

    boolean present_eleName = true && (isSetEleName());
    list.add(present_eleName);
    if (present_eleName)
      list.add(eleName);

    boolean present_eleDesc = true && (isSetEleDesc());
    list.add(present_eleDesc);
    if (present_eleDesc)
      list.add(eleDesc);

    return list.hashCode();
  }

  @Override
  public int compareTo(BusPkgInfoEleVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExEleId()).compareTo(other.isSetExEleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExEleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exEleId, other.exEleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEleCount()).compareTo(other.isSetEleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eleCount, other.eleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEleName()).compareTo(other.isSetEleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eleName, other.eleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEleDesc()).compareTo(other.isSetEleDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEleDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eleDesc, other.eleDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusPkgInfoEleVO(");
    boolean first = true;

    sb.append("exEleId:");
    sb.append(this.exEleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eleCount:");
    sb.append(this.eleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eleName:");
    if (this.eleName == null) {
      sb.append("null");
    } else {
      sb.append(this.eleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eleDesc:");
    if (this.eleDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.eleDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusPkgInfoEleVOStandardSchemeFactory implements SchemeFactory {
    public BusPkgInfoEleVOStandardScheme getScheme() {
      return new BusPkgInfoEleVOStandardScheme();
    }
  }

  private static class BusPkgInfoEleVOStandardScheme extends StandardScheme<BusPkgInfoEleVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusPkgInfoEleVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EX_ELE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exEleId = iprot.readI64();
              struct.setExEleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ELE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eleCount = iprot.readI64();
              struct.setEleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ELE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eleName = iprot.readString();
              struct.setEleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ELE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eleDesc = iprot.readString();
              struct.setEleDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusPkgInfoEleVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EX_ELE_ID_FIELD_DESC);
      oprot.writeI64(struct.exEleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(struct.date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ELE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.eleCount);
      oprot.writeFieldEnd();
      if (struct.eleName != null) {
        oprot.writeFieldBegin(ELE_NAME_FIELD_DESC);
        oprot.writeString(struct.eleName);
        oprot.writeFieldEnd();
      }
      if (struct.eleDesc != null) {
        oprot.writeFieldBegin(ELE_DESC_FIELD_DESC);
        oprot.writeString(struct.eleDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusPkgInfoEleVOTupleSchemeFactory implements SchemeFactory {
    public BusPkgInfoEleVOTupleScheme getScheme() {
      return new BusPkgInfoEleVOTupleScheme();
    }
  }

  private static class BusPkgInfoEleVOTupleScheme extends TupleScheme<BusPkgInfoEleVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusPkgInfoEleVO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExEleId()) {
        optionals.set(0);
      }
      if (struct.isSetDate()) {
        optionals.set(1);
      }
      if (struct.isSetEleCount()) {
        optionals.set(2);
      }
      if (struct.isSetEleName()) {
        optionals.set(3);
      }
      if (struct.isSetEleDesc()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExEleId()) {
        oprot.writeI64(struct.exEleId);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetEleCount()) {
        oprot.writeI64(struct.eleCount);
      }
      if (struct.isSetEleName()) {
        oprot.writeString(struct.eleName);
      }
      if (struct.isSetEleDesc()) {
        oprot.writeString(struct.eleDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusPkgInfoEleVO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.exEleId = iprot.readI64();
        struct.setExEleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eleCount = iprot.readI64();
        struct.setEleCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eleName = iprot.readString();
        struct.setEleNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eleDesc = iprot.readString();
        struct.setEleDescIsSet(true);
      }
    }
  }

}

